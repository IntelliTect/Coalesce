import{_ as p,c as r,I as o,w as a,a as e,l as s,a7 as l,D as n,o as i}from"./chunks/framework.BkavzUpE.js";const I=JSON.parse('{"title":"Includes String","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/includes.md","filePath":"concepts/includes.md"}'),d={name:"concepts/includes.md"},D=s("h1",{id:"includes-string",tabindex:"-1"},[e("Includes String "),s("a",{class:"header-anchor",href:"#includes-string","aria-label":'Permalink to "Includes String"'},"​")],-1),u=s("p",null,'Coalesce provides a number of extension points for loading & serialization which make use of a concept called an "includes string" (also referred to as "include string" or just "includes").',-1),y=s("h2",{id:"includes-string-1",tabindex:"-1"},[e("Includes String "),s("a",{class:"header-anchor",href:"#includes-string-1","aria-label":'Permalink to "Includes String"'},"​")],-1),h=s("p",null,"The includes string is simply a string which can be set to any arbitrary value. It is passed from the client to the server in order to customize data loading and serialization. It can be set on both the TypeScript ViewModels and the ListViewModels.",-1),C=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki dark-plus vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"PersonViewModel"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#9CDCFE"}},"PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," '@/viewmodels.g'")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"var"),s("span",{style:{color:"#9CDCFE"}}," person"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"person"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"details"'),s("span",{style:{color:"#D4D4D4"}},";")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"var"),s("span",{style:{color:"#9CDCFE"}}," personList"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"details"'),s("span",{style:{color:"#D4D4D4"}},";")])])])],-1),m=l(`<p>The default value (i.e. no action) is the empty string.</p><h3 id="special-values" tabindex="-1">Special Values <a class="header-anchor" href="#special-values" aria-label="Permalink to &quot;Special Values&quot;">​</a></h3><p>There are a few values of <code>includes</code> that are either set by default in the auto-generated views, or otherwise have special meaning:</p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>&#39;none&#39;</code></td><td>Setting <code>includes</code> to <code>none</code> suppresses the <a href="/Coalesce/modeling/model-components/data-sources.html#default-loading-behavior">Default Loading Behavior</a> provided by the <a href="/Coalesce/modeling/model-components/data-sources.html#standard-data-source">Standard Data Source</a> - The resulting data will be the requested object (or list of objects) and nothing more.</td></tr><tr><td><code>&#39;admin-list&#39;</code></td><td>Used when loading a list of objects in the <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-admin-table-page.html">Vue admin list page</a>.</td></tr><tr><td><code>&#39;admin-editor&#39;</code></td><td>Used when loading an object in the <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-admin-editor.html">Vue admin editor component</a>.</td></tr><tr><td><code>&#39;Editor&#39;</code></td><td>Legacy. Used when loading an object in the generated Knockout CreateEdit views.</td></tr><tr><td><code>&#39;&lt;ModelName&gt;ListGen&#39;</code></td><td>Legacy. Used when loading a list of objects in the generated Knockout Table and Cards views. For example, <code>PersonListGen</code></td></tr></tbody></table><h2 id="dtoincludes-dtoexcludes" tabindex="-1">DtoIncludes &amp; DtoExcludes <a class="header-anchor" href="#dtoincludes-dtoexcludes" aria-label="Permalink to &quot;DtoIncludes &amp; DtoExcludes&quot;">​</a></h2><p>Main document: <a href="/Coalesce/modeling/model-components/attributes/dto-includes-excludes.html">[DtoIncludes] &amp; [DtoExcludes]</a>.</p><p>There are two C# attributes, <code>DtoIncludes</code> and <code>DtoExcludes</code>, that can be used to annotate your data model in order to customize what data gets put into the DTOs and ultimately serialized to JSON and sent out to the client.</p><p>When the database entries are returned to the client they will be trimmed based on the requested includes string and the values in <code>DtoExcludes</code> and <code>DtoIncludes</code>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>These attributes are <strong>not security attributes</strong> - consumers of your application&#39;s API can set the includes string to any value when making a request.</p><p>Do not use them to keep certain data private - use the <a href="/Coalesce/modeling/model-components/attributes/security-attribute.html">Security Attributes</a> family of attributes for that.</p></div><p>It is important to note that the value of the includes string will match against these attributes on <em>any</em> of your models that appears in the object graph being mapped to DTOs - it is not limited only to the model type of the root object.</p><div class="tip custom-block"><p class="custom-block-title">Important</p><p><code>DtoIncludes</code> does not ensure that specific data will be loaded from the database. It only <em>permits</em> what is <em>already</em> loaded into the current EF DbContext to be returned from the API. See <a href="/Coalesce/modeling/model-components/data-sources.html">Data Sources</a> to learn how to control what data gets loaded from the database.</p></div><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><p>Server code:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Person</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;">    // Don&#39;t include CreatedBy when editing - will be included for all other views</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoExcludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Editor&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> AppUser</span><span style="color:#9CDCFE;"> CreatedBy</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // Only include the Person&#39;s Department when \`includes == &quot;details&quot;\` on the TypeScript ViewModel.</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoIncludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;details&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> Department</span><span style="color:#9CDCFE;"> Department</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // LastName will be included in all views</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> LastName</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Department</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoIncludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;details&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> ICollection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Client code:</p>`,15),b=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki dark-plus vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," '@/viewmodels.g'")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"const"),s("span",{style:{color:"#4FC1FF"}}," personList"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"Editor"'),s("span",{style:{color:"#D4D4D4"}},";")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"await"),s("span",{style:{color:"#9CDCFE"}}," personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"$load"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Objects in personList.$items will not contain CreatedBy nor Department objects.")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"const"),s("span",{style:{color:"#4FC1FF"}}," personList2"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"personList2"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"details"'),s("span",{style:{color:"#D4D4D4"}},";")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"await"),s("span",{style:{color:"#9CDCFE"}}," personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"$load"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Objects in personList2.items will be allowed to contain both CreatedBy and Department objects. ")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Department will be allowed to include its other Person objects.")])])])],-1),g=s("h3",{id:"properties",tabindex:"-1"},[e("Properties "),s("a",{class:"header-anchor",href:"#properties","aria-label":'Permalink to "Properties"'},"​")],-1),w=l('<p>A comma-delimited list of values of <a href="/Coalesce/concepts/includes.html"><code>includes</code></a> on which to operate.</p><p>For <code>DtoIncludes</code>, this will be the values of <code>includes</code> for which this property will be <strong>allowed</strong> to be serialized and sent to the client.</p><p>For <code>DtoExcludes</code>, this will be the values of <code>includes</code> for which this property will <strong>not</strong> be serialized and sent to the client.</p>',3);function f(_,E,v,P,A,F){const t=n("CodeTabs"),c=n("Prop");return i(),r("div",null,[D,u,y,h,o(t,null,{vue:a(()=>[C]),_:1}),m,o(t,null,{vue:a(()=>[b]),_:1}),g,o(c,{def:"public string ContentViews { get; set; }",ctor:"1"}),e(),w])}const T=p(d,[["render",f]]);export{I as __pageData,T as default};
