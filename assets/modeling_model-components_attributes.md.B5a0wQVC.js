import{_ as e,c as a,o as t,a7 as o}from"./chunks/framework.BkavzUpE.js";const b=JSON.parse('{"title":"Attributes","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/attributes.md","filePath":"modeling/model-components/attributes.md"}'),r={name:"modeling/model-components/attributes.md"},i=o('<h1 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h1><p>Coalesce provides a number of C# attributes that can be used to decorate your model classes and their properties in order to customize behavior, appearance, security, and more. Coalesce also supports a number of annotations from <code>System.ComponentModel.DataAnnotations</code>.</p><h2 id="coalesce-attributes" tabindex="-1">Coalesce Attributes <a class="header-anchor" href="#coalesce-attributes" aria-label="Permalink to &quot;Coalesce Attributes&quot;">​</a></h2><p>Browse the list in the sidebar to learn about the attributes that Coalesce provides that can be used to decorate your models.</p><h2 id="componentmodel-attributes" tabindex="-1">ComponentModel Attributes <a class="header-anchor" href="#componentmodel-attributes" aria-label="Permalink to &quot;ComponentModel Attributes&quot;">​</a></h2><p>Coalesce also supports a number of the built-in <code>System.ComponentModel.DataAnnotations</code> attributes and will use these to shape the generated code.</p><h3 id="display" tabindex="-1">[Display] <a class="header-anchor" href="#display" aria-label="Permalink to &quot;[Display]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.DisplayAttribute</code></p><p>The displayed name and description of a property, as well as the order in which it appears in generated views, can be set via the <code>[Display]</code> attribute. By default, properties will be displayed in the order in which they are defined in their class.</p><h3 id="displayname" tabindex="-1">[DisplayName] <a class="header-anchor" href="#displayname" aria-label="Permalink to &quot;[DisplayName]&quot;">​</a></h3><p><code>System.ComponentModel.DisplayNameAttribute</code></p><p>The displayed name of a property can also be set via the <code>[DisplayName]</code> attribute.</p><h3 id="description" tabindex="-1">[Description] <a class="header-anchor" href="#description" aria-label="Permalink to &quot;[Description]&quot;">​</a></h3><p><code>System.ComponentModel.DescriptionAttribute</code></p><p>The description of a type or member, such as a class, property, method, or parameter.</p><h3 id="required" tabindex="-1">[Required] <a class="header-anchor" href="#required" aria-label="Permalink to &quot;[Required]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.RequiredAttribute</code></p><p>Properties with <code>[Required]</code> will generate <a href="/Coalesce/modeling/model-components/attributes/client-validation.html">client validation</a> and <a href="/Coalesce/topics/security.html#server-side-data-validation">server validation</a> rules.</p><h3 id="range" tabindex="-1">[Range] <a class="header-anchor" href="#range" aria-label="Permalink to &quot;[Range]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.RangeAttribute</code></p><p>Properties with <code>[Range]</code> will generate <a href="/Coalesce/modeling/model-components/attributes/client-validation.html">client validation</a> and <a href="/Coalesce/topics/security.html#server-side-data-validation">server validation</a> rules.</p><h3 id="minlength" tabindex="-1">[MinLength] <a class="header-anchor" href="#minlength" aria-label="Permalink to &quot;[MinLength]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.MinLengthAttribute</code></p><p>Properties with <code>[MinLength]</code> will generate <a href="/Coalesce/modeling/model-components/attributes/client-validation.html">client validation</a> and <a href="/Coalesce/topics/security.html#server-side-data-validation">server validation</a> rules.</p><h3 id="maxlength" tabindex="-1">[MaxLength] <a class="header-anchor" href="#maxlength" aria-label="Permalink to &quot;[MaxLength]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.MaxLengthAttribute</code></p><p>Properties with <code>[MaxLength]</code> will generate <a href="/Coalesce/modeling/model-components/attributes/client-validation.html">client validation</a> and <a href="/Coalesce/topics/security.html#server-side-data-validation">server validation</a> rules.</p><h3 id="datatype" tabindex="-1">[DataType] <a class="header-anchor" href="#datatype" aria-label="Permalink to &quot;[DataType]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.DataTypeAttribute</code></p><p>Some values of <code>DataType</code> when provided to <code>DataTypeAttribute</code> on a <code>string</code> property will alter the behavior of the <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/overview.html">Vue Components</a>. See <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-display.html">c-display</a> and <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-input.html">c-input</a> for details.</p><h3 id="foreignkey" tabindex="-1">[ForeignKey] <a class="header-anchor" href="#foreignkey" aria-label="Permalink to &quot;[ForeignKey]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute</code></p><p>Normally, Coalesce figures out which properties are foreign keys, but if you don&#39;t use standard EF naming conventions then you&#39;ll need to annotate with <code>[ForeignKey]</code> to help out both EF and Coalesce. See the <a href="https://docs.microsoft.com/en-us/ef/core/modeling/relationships" target="_blank" rel="noreferrer">Entity Framework Relationships</a> documentation for more.</p><h3 id="inverseproperty" tabindex="-1">[InverseProperty] <a class="header-anchor" href="#inverseproperty" aria-label="Permalink to &quot;[InverseProperty]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute</code></p><p>Sometimes, Coalesce (and EF, too) can have trouble figuring out what the foreign key is supposed to be for a collection navigation property. See the <a href="https://docs.microsoft.com/en-us/ef/core/modeling/relationships" target="_blank" rel="noreferrer">Entity Framework Relationships</a> documentation for details on how and why to use <code>[InverseProperty]</code>.</p><h3 id="databasegenerated" tabindex="-1">[DatabaseGenerated] <a class="header-anchor" href="#databasegenerated" aria-label="Permalink to &quot;[DatabaseGenerated]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute</code></p><p>Primary Keys with <code>[DatabaseGenerated(DatabaseGeneratedOption.None)]</code> will be settable on the client and will be appropriately handled by the <a href="/Coalesce/modeling/model-components/behaviors.html#standard-behaviors">Standard Behaviors</a> on the server.</p><h3 id="notmapped" tabindex="-1">[NotMapped] <a class="header-anchor" href="#notmapped" aria-label="Permalink to &quot;[NotMapped]&quot;">​</a></h3><p><code>System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute</code></p><p>Model properties that aren&#39;t mapped to the database should be marked with <code>[NotMapped]</code> so that Coalesce doesn&#39;t try to load them from the database when <a href="/Coalesce/modeling/model-components/attributes/search.html">searching</a> or carrying out the <a href="/Coalesce/modeling/model-components/data-sources.html#default-loading-behavior">Default Loading Behavior</a>.</p><h3 id="defaultvalue" tabindex="-1">[DefaultValue] <a class="header-anchor" href="#defaultvalue" aria-label="Permalink to &quot;[DefaultValue]&quot;">​</a></h3><p><code>System.ComponentModel.DefaultValueAttribute</code></p><p>Properties with <code>[DefaultValue]</code> will receive the specified value when a new ViewModel is instantiated on the client. This enables scenarios like pre-filling a required property with a suggested value.</p>',45),n=[i];function s(d,l,c,p,h,m){return t(),a("div",null,n)}const y=e(r,[["render",s]]);export{b as __pageData,y as default};
