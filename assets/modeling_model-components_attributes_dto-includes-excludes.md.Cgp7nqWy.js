import{_ as p,c,I as o,w as r,a as e,a7 as l,l as s,D as n,o as i}from"./chunks/framework.BkavzUpE.js";const A=JSON.parse('{"title":"[DtoIncludes] & [DtoExcludes]","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/attributes/dto-includes-excludes.md","filePath":"modeling/model-components/attributes/dto-includes-excludes.md"}'),D={name:"modeling/model-components/attributes/dto-includes-excludes.md"},d=l(`<h1 id="dtoincludes-dtoexcludes" tabindex="-1">[DtoIncludes] &amp; [DtoExcludes] <a class="header-anchor" href="#dtoincludes-dtoexcludes" aria-label="Permalink to &quot;[DtoIncludes] &amp; [DtoExcludes]&quot;">​</a></h1><p><code>IntelliTect.Coalesce.DataAnnotations.DtoIncludesAttribute</code><br><code>IntelliTect.Coalesce.DataAnnotations.DtoExcludesAttribute</code></p><p>Allows for easily controlling what data gets set to the client. When requesting data from the generated client-side list view models, you can specify an <code>includes</code> property on the ViewModel or ListViewModel.</p><p>For more information about the includes string, see <a href="/Coalesce/concepts/includes.html">Includes String</a>.</p><p>When the database entries are returned to the client they will be trimmed based on the requested includes string and the values in <code>DtoExcludes</code> and <code>DtoIncludes</code>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>These attributes are <strong>not security attributes</strong> - consumers of your application&#39;s API can set the includes string to any value when making a request.</p><p>Do not use them to keep certain data private - use the <a href="/Coalesce/modeling/model-components/attributes/security-attribute.html">Security Attributes</a> family of attributes for that.</p></div><p>It is important to note that the value of the includes string will match against these attributes on <em>any</em> of your models that appears in the object graph being mapped to DTOs - it is not limited only to the model type of the root object.</p><div class="tip custom-block"><p class="custom-block-title">Important</p><p><code>DtoIncludes</code> does not ensure that specific data will be loaded from the database. It only <em>permits</em> what is <em>already</em> loaded into the current EF DbContext to be returned from the API. See <a href="/Coalesce/modeling/model-components/data-sources.html">Data Sources</a> to learn how to control what data gets loaded from the database.</p></div><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><p>Server code:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Person</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;">    // Don&#39;t include CreatedBy when editing - will be included for all other views</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoExcludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Editor&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> AppUser</span><span style="color:#9CDCFE;"> CreatedBy</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // Only include the Person&#39;s Department when \`includes == &quot;details&quot;\` on the TypeScript ViewModel.</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoIncludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;details&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> Department</span><span style="color:#9CDCFE;"> Department</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // LastName will be included in all views</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> LastName</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Department</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DtoIncludes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;details&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> ICollection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Client code:</p>`,12),y=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki dark-plus vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," '@/viewmodels.g'")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"const"),s("span",{style:{color:"#4FC1FF"}}," personList"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"Editor"'),s("span",{style:{color:"#D4D4D4"}},";")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"await"),s("span",{style:{color:"#9CDCFE"}}," personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"$load"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Objects in personList.$items will not contain CreatedBy nor Department objects.")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"const"),s("span",{style:{color:"#4FC1FF"}}," personList2"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"new"),s("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"personList2"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"$includes"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#CE9178"}},'"details"'),s("span",{style:{color:"#D4D4D4"}},";")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"await"),s("span",{style:{color:"#9CDCFE"}}," personList"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"$load"),s("span",{style:{color:"#D4D4D4"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Objects in personList2.items will be allowed to contain both CreatedBy and Department objects. ")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// Department will be allowed to include its other Person objects.")])])])],-1),u=s("h2",{id:"properties",tabindex:"-1"},[e("Properties "),s("a",{class:"header-anchor",href:"#properties","aria-label":'Permalink to "Properties"'},"​")],-1),C=l('<p>A comma-delimited list of values of <a href="/Coalesce/concepts/includes.html"><code>includes</code></a> on which to operate.</p><p>For <code>DtoIncludes</code>, this will be the values of <code>includes</code> for which this property will be <strong>allowed</strong> to be serialized and sent to the client.</p><p>For <code>DtoExcludes</code>, this will be the values of <code>includes</code> for which this property will <strong>not</strong> be serialized and sent to the client.</p>',3);function h(m,b,_,g,w,E){const t=n("CodeTabs"),a=n("Prop");return i(),c("div",null,[d,o(t,null,{vue:r(()=>[y]),_:1}),u,o(a,{def:"public string ContentViews { get; set; }",ctor:"1"}),e(),C])}const x=p(D,[["render",h]]);export{A as __pageData,x as default};
