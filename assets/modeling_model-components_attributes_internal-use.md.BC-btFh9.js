import{_ as s,c as a,o as n,a7 as e}from"./chunks/framework.BkavzUpE.js";const u=JSON.parse('{"title":"[InternalUse]","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/attributes/internal-use.md","filePath":"modeling/model-components/attributes/internal-use.md"}'),l={name:"modeling/model-components/attributes/internal-use.md"},o=e(`<h1 id="internaluse" tabindex="-1">[InternalUse] <a class="header-anchor" href="#internaluse" aria-label="Permalink to &quot;[InternalUse]&quot;">​</a></h1><p><code>IntelliTect.Coalesce.DataAnnotations.InternalUseAttribute</code></p><p>Used to mark a type, property or method for internal use. Internal Use members are:</p><ul><li>Not exposed via the API.</li><li>Not present in the generated TypeScript view models.</li><li>Not present nor accounted for in the generated C# DTOs.</li><li>Not present in the generated editor or list views.</li></ul><p>Effectively, an Internal Use member is invisible to Coalesce. This attribute can be considered a <a href="/Coalesce/modeling/model-components/attributes/security-attribute.html">Security Attribute</a>.</p><p>Note that this only needs to be used on members that are public. Non-public members (including <code>internal</code>) are always invisible to Coalesce.</p><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><p>In this example, <code>Color</code> is the property exposed to the API, but <code>ColorHex</code> is the property that maps to the database that stores the value. A helper method also exists for the color generation, but needs no attribute to be hidden since methods must be explicitly exposed with <a href="/Coalesce/modeling/model-components/attributes/coalesce.html">[Coalesce]</a>.</p><p>If no color is saved in the database (the user hasn&#39;t picked a color), one is deterministically created.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> ApplicationUser</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> ApplicationUserId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">InternalUse</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> ColorHex</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">NotMapped</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Color</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        get</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">ColorHex</span><span style="color:#D4D4D4;"> ?? </span><span style="color:#DCDCAA;">GenerateColor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ApplicationUserId</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">ToRGBHexString</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">        set</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">ColorHex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> static</span><span style="color:#4EC9B0;"> HSLColor</span><span style="color:#DCDCAA;"> GenerateColor</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">seed</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> random</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">seed</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">HasValue</span><span style="color:#D4D4D4;"> ? </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Random</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">seed</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Value</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Random</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> HSLColor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">random</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">NextDouble</span><span style="color:#D4D4D4;">(), </span><span style="color:#9CDCFE;">random</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">40</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">) / </span><span style="color:#B5CEA8;">100d</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">random</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">25</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">65</span><span style="color:#D4D4D4;">) / </span><span style="color:#B5CEA8;">100d</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,10),p=[o];function t(r,c,D,i,y,C){return n(),a("div",null,p)}const m=s(l,[["render",t]]);export{u as __pageData,m as default};
