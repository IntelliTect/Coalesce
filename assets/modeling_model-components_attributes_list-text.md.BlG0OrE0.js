import{_ as s,c as a,o as n,a7 as e}from"./chunks/framework.BkavzUpE.js";const m=JSON.parse('{"title":"[ListText]","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/attributes/list-text.md","filePath":"modeling/model-components/attributes/list-text.md"}'),t={name:"modeling/model-components/attributes/list-text.md"},l=e(`<h1 id="listtext" tabindex="-1">[ListText] <a class="header-anchor" href="#listtext" aria-label="Permalink to &quot;[ListText]&quot;">​</a></h1><p><code>IntelliTect.Coalesce.DataAnnotations.ListTextAttribute</code></p><p>When a textual representation of an object needs to be displayed in the UI, this attribute controls which property will be used. Examples include dropdowns and cells in admin UI tables.</p><p>If this attribute is not used, and a property named <code>Name</code> exists on the model, that property will be used. Otherwise, the primary key will be used.</p><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Person</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> PersonId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> FirstName</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> LastName</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">ListText</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">NotMapped</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Name</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">FirstName</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">LastName</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,6),o=[l];function p(c,r,i,D,d,y){return n(),a("div",null,o)}const u=s(t,[["render",p]]);export{m as __pageData,u as default};
