import{_ as s,c as n,o as a,a7 as e}from"./chunks/framework.BkavzUpE.js";const m=JSON.parse('{"title":"[Restrict]","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/attributes/restrict.md","filePath":"modeling/model-components/attributes/restrict.md"}'),o={name:"modeling/model-components/attributes/restrict.md"},l=e(`<h1 id="restrict" tabindex="-1">[Restrict] <a class="header-anchor" href="#restrict" aria-label="Permalink to &quot;[Restrict]&quot;">â€‹</a></h1><p><code>IntelliTect.Coalesce.DataAnnotations.RestrictAttribute&lt;T&gt;</code></p><p>In addition to <a href="/Coalesce/modeling/model-components/attributes/security-attribute.html">role-based</a> property restrictions, you can also define property restrictions that can execute custom code for each model instance if your logic require more nuanced decisions than can be made with roles.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">using</span><span style="color:#4EC9B0;"> IntelliTect</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">DataAnnotations</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Employee</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> Id</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">Read</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> UserId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">Restrict</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">SalaryRestriction</span><span style="color:#D4D4D4;">&gt;]</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> decimal</span><span style="color:#9CDCFE;"> Salary</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> SalaryRestriction</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">MyUserService</span><span style="color:#9CDCFE;"> userService</span><span style="color:#D4D4D4;">) : </span><span style="color:#4EC9B0;">IPropertyRestriction</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Employee</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> bool</span><span style="color:#DCDCAA;"> UserCanRead</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IMappingContext</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> propertyName</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Employee</span><span style="color:#9CDCFE;"> model</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    =&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">GetUserId</span><span style="color:#D4D4D4;">() == </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">UserId</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">userService</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">IsPayroll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> bool</span><span style="color:#DCDCAA;"> UserCanWrite</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IMappingContext</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> propertyName</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Employee</span><span style="color:#9CDCFE;"> model</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">object</span><span style="color:#9CDCFE;"> incomingValue</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    =&gt; </span><span style="color:#9CDCFE;">userService</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">IsPayroll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#569CD6;"> bool</span><span style="color:#DCDCAA;"> UserCanFilter</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IMappingContext</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> propertyName</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    =&gt; </span><span style="color:#9CDCFE;">userService</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">IsPayroll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Restriction classes support dependency injection, so you can inject any supplemental services needed to make a determination.</p><p>The <code>UserCanRead</code> method controls whether values of the restricted property will be mapped from model instances to the generated DTO. Similarly, <code>UserCanWrite</code> controls whether the property can be mapped back to the model instance from the generated DTO.</p><p>The <code>UserCanFilter</code> method has a default implementation that returns <code>false</code>, but can be implemented if there is an appropriate, instance-agnostic way to determine if a user can sort, search, or filter values of that property.</p><p>Multiple different restrictions can be placed on a single property; all of them must succeed for the operation to be permitted. Restrictions also stack on top of role attribute restrictions (<code>[Read]</code> and <code>[Edit]</code>).</p><p>A non-generic variant of <code>IPropertyRestriction</code> also exists for restrictions that might be reused across multiple model types.</p>`,9),p=[l];function t(r,c,D,i,y,C){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{m as __pageData,u as default};
