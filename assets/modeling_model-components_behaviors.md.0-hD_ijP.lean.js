import{_ as o,c as l,I as a,a7 as n,l as e,a as t,D as r,o as p}from"./chunks/framework.BkavzUpE.js";const M=JSON.parse('{"title":"Behaviors","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/behaviors.md","filePath":"modeling/model-components/behaviors.md"}'),c={name:"modeling/model-components/behaviors.md"},i=n("",15),d=e("p",null,"The object passed to the constructor that contains the set of objects needed by the standard behaviors, and those that are most likely to be used in custom implementations.",-1),D=e("p",null,[t("An instance of the db context that contains a "),e("code",null,"DbSet<T>"),t(" for the entity handled by the behaviors")],-1),h=e("p",null,"The user making the current request.",-1),y=e("p",null,"A data source that, if set, will override the data source that is used to retrieve the target of an update operation from the database. The incoming values will then be set on this retrieved object. Null by default; override by setting a value in the constructor.",-1),u=e("p",null,"A data source that, if set, will override the data source that is used to retrieve a newly-created or just-updated object from the database after a save. The retrieved object will be returned to the client. Null by default; override by setting a value in the constructor.",-1),m=e("p",null,"A data source that, if set, will override the data source that is used to retrieve the target of an delete operation from the database. The retrieved object will then be deleted. Null by default; override by setting a value in the constructor.",-1),C=n("",7),v=e("p",null,[t("Save the given item. This is the main entry point for saving, and takes a DTO as a parameter. This method is responsible for performing mapping to your EF models and ultimately saving to your database. If it is required that you access properties from the incoming DTO in this method, a set of extension methods "),e("code",null,"GetValue"),t(" and "),e("code",null,"GetObject"),t(" are available on the DTO for accessing properties that are mapped 1:1 with your EF models.")],-1),f=e("p",null,"Given the incoming DTO on which Save has been called, examine its properties to determine if the operation is meant to be a create or an update operation. Return this distinction along with the key that was used to make the distinction.",-1),b=e("p",null,"This method is called outside of the standard data source by the base API controller to perform role-based security on saves at the controller level.",-1),T=e("p",null,[t("Returns a "),e("code",null,"DbSet<T>"),t(" that items can be added to (creates) or remove from (deletes).")],-1),g=e("p",null,[t("Provides a chance to validate the properties of the DTO object itself, as opposed to doing validation in "),e("code",null,"BeforeSave"),t(" of the properties of the model after the DTO has been mapped to the model. This also where "),e("a",{href:"/Coalesce/topics/security.html#attribute-validation"},"attribute-based validation"),t(" is performed.")],-1),_=e("p",null,[t("To perform custom validation in this method (uncommon), there are a number of extension methods on "),e("code",null,"IClassDto<T>"),t(" that can be used to access the value of the properties of "),e("a",{href:"/Coalesce/stacks/agnostic/dtos.html"},"Generated C# DTOs"),t(". For behaviors on "),e("a",{href:"/Coalesce/modeling/model-types/dtos.html"},"Custom DTOs"),t(" where the DTO type is known, simply cast to the correct type.")],-1),S=n("",1),I=e("p",null,"Extension point for derived classes to intercept a save attempt and either reject it by returning an unsuccessful result, or approve it by returning success. The incoming item can also be modified at will in this method to override changes that the client made as desired.",-1),A=n("",3),w=e("p",null,"Deletes the given item.",-1),E=e("p",null,"Provides an easy way to intercept a delete request and potentially reject it (by returning a non-success ItemResult).",-1),B=e("p",null,[t("Performs the delete action against the database. The implementation of this method removes the item from its corresponding "),e("code",null,"DbSet<T>"),t(", and then calls "),e("code",null,"Db.SaveChangesAsync()"),t(".")],-1),x=e("p",null,"Overriding this allows for changing this row-deletion implementation to something else, like setting of a soft delete flag, or copying the data into another archival table before deleting.",-1),k=n("",7);function F(P,q,O,R,j,V){const s=r("Prop");return p(),l("div",null,[i,a(s,{def:"CrudContext<TContext> Context"}),d,a(s,{def:"TContext Db"}),D,a(s,{def:"ClaimsPrincipal User"}),h,a(s,{def:"IDataSource<T> OverrideFetchForUpdateDataSource"}),y,a(s,{def:"IDataSource<T> OverridePostSaveResultDataSource"}),u,a(s,{def:"IDataSource<T> OverrideFetchForDeleteDataSource"}),m,a(s,{def:"IDataSource<T> OverridePostDeleteResultDataSource"}),C,a(s,{def:"Task<ItemResult<TDto?>> SaveAsync<TDto>(TDto incomingDto, IDataSource<T> dataSource, IDataSourceParameters parameters)"}),v,a(s,{def:"Task<(SaveKind Kind, object? IncomingKey)> DetermineSaveKindAsync<TDto>(TDto incomingDto, IDataSource<T> dataSource, IDataSourceParameters parameters)"}),f,b,a(s,{def:"DbSet<T> GetDbSet()"}),T,a(s,{def:"ItemResult ValidateDto(SaveKind kind, IClassDto<T> dto)"}),g,_,a(s,{def:"T MapIncomingDto<TDto>(SaveKind kind, T? item, TDto dto, IDataSourceParameters parameters)"}),S,a(s,{def:`Task<ItemResult> BeforeSaveAsync(SaveKind kind, T? oldItem, T item);
ItemResult BeforeSave(SaveKind kind, T? oldItem, T item)`}),I,a(s,{def:"ItemResult<T> AfterSaveAsync(SaveKind kind, T? oldItem, T item)"}),A,a(s,{def:"Task<ItemResult<TDto?>> DeleteAsync<TDto>(object id, IDataSource<T> dataSource, IDataSourceParameters parameters)"}),w,a(s,{def:`Task<ItemResult> BeforeDeleteAsync(T item);
ItemResult BeforeDelete(T item)`}),E,a(s,{def:"Task ExecuteDeleteAsync(T item)"}),B,x,a(s,{def:"void AfterDelete(ref T item, ref IncludeTree? includeTree)"}),k])}const K=o(c,[["render",F]]);export{M as __pageData,K as default};
