import{_ as p,c,I as a,w as l,a7 as n,l as e,a as s,D as r,o as i}from"./chunks/framework.BkavzUpE.js";const U=JSON.parse('{"title":"Data Sources","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-components/data-sources.md","filePath":"modeling/model-components/data-sources.md"}'),d={name:"modeling/model-components/data-sources.md"},D=n(`<h1 id="data-sources" tabindex="-1">Data Sources <a class="header-anchor" href="#data-sources" aria-label="Permalink to &quot;Data Sources&quot;">​</a></h1><p>In Coalesce, all data that is retrieved from your database through the generated controllers is done so by a data source. These data sources control what data gets loaded and how it gets loaded. By default, there is a single generic data source that serves all data for your models in a generic way that fits many of the most common use cases - the <a href="/Coalesce/modeling/model-components/data-sources.html#standard-data-source">Standard Data Source</a>.</p><p>In addition to this standard data source, Coalesce allows you to create custom data sources that provide complete control over the way data is loaded and serialized for transfer to a requesting client. These data sources are defined on a per-model basis, and you can have as many of them as you like for each model.</p><h2 id="defining-data-sources" tabindex="-1">Defining Data Sources <a class="header-anchor" href="#defining-data-sources" aria-label="Permalink to &quot;Defining Data Sources&quot;">​</a></h2><p>By default, each of your models that Coalesce exposes will expose the standard data source (<code>IntelliTect.Coalesce.StandardDataSource&lt;T, TContext&gt;</code>). This data source provides all the standard functionality one would expect - paging, sorting, searching, filtering, and so on. Each of these component pieces is implemented in one or more virtual methods, making the <code>StandardDataSource</code> a great place to start from when implementing your own data source. To suppress this behavior of always exposing the raw <code>StandardDataSource</code>, create your own custom data source and annotate it with <code>[DefaultDataSource]</code>.</p><p>To implement your own custom data source, you simply need to define a class that implements <code>IntelliTect.Coalesce.IDataSource&lt;T&gt;</code>. To expose your data source to Coalesce, either place it as a nested class of the type <code>T</code> that you data source serves, or annotate it with the <code>[Coalesce]</code> attribute. Of course, the easiest way to create a data source that doesn&#39;t require you to re-engineer a great deal of logic would be to inherit from <code>IntelliTect.Coalesce.StandardDataSource&lt;T, TContext&gt;</code>, and then override only the parts that you need.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Person</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DefaultDataSource</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> IncludeFamily</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#DCDCAA;"> IncludeFamily</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">base</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> IQueryable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IDataSourceParameters</span><span style="color:#9CDCFE;"> parameters</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">            =&gt; </span><span style="color:#9CDCFE;">Db</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">IsInRole</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Admin&quot;</span><span style="color:#D4D4D4;">) || </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">CreatedById</span><span style="color:#D4D4D4;"> == </span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">GetUserId</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Include</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Parents</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">ThenInclude</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Parents</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Include</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Cousins</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">ThenInclude</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Parents</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> NamesStartingWithA</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#DCDCAA;"> NamesStartingWithA</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">base</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> IQueryable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IDataSourceParameters</span><span style="color:#9CDCFE;"> parameters</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">        =&gt; </span><span style="color:#9CDCFE;">Db</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Include</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Siblings</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FirstName</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">StartsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;A&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>The structure of the <code>IQueryable</code> built by the various methods of <code>StandardDataSource</code> is used to shape and trim the structure of the DTO as it is serialized and sent out to the client. One may also override method <code>IncludeTree GetIncludeTree(IQueryable&lt;Person&gt; query, IDataSourceParameters parameters)</code> to control this explicitly. See <a href="/Coalesce/concepts/include-tree.html">Include Tree</a> for more information on how this works.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you create a custom data source that has custom logic for securing your data, be aware that the default implementation of <code>StandardDataSource</code> (or your custom default implementation - see below) is still exposed unless you annotate one of your custom data sources with <code>[DefaultDataSource]</code>. Doing so will replace the default data source with the annotated class for your type <code>T</code>.</p></div><h3 id="dependency-injection" tabindex="-1">Dependency Injection <a class="header-anchor" href="#dependency-injection" aria-label="Permalink to &quot;Dependency Injection&quot;">​</a></h3><p>All data sources are instantiated using dependency injection and your application&#39;s <code>IServiceProvider</code>. As a result, you can add whatever constructor parameters you desire to your data sources as long as a value for them can be resolved from your application&#39;s services. The single parameter to the <code>StandardDataSource</code> is resolved in this way - the <code>CrudContext&lt;TContext&gt;</code> contains the common set of objects most commonly used, including the <code>DbContext</code> and the <code>ClaimsPrincipal</code> representing the current user.</p><h2 id="consuming-data-sources" tabindex="-1">Consuming Data Sources <a class="header-anchor" href="#consuming-data-sources" aria-label="Permalink to &quot;Consuming Data Sources&quot;">​</a></h2>`,12),y=e("p",null,[s("The "),e("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html#viewmodels"},"ViewModels"),s(" and "),e("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html#listviewmodels"},"ListViewModels"),s(" each have a property called "),e("code",null,"$dataSource"),s(". This property accepts an instance of a "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html"},"DataSource"),s(" class generated in the "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html"},"Model Layer"),s(".")],-1),u=e("div",{class:"language-ts"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"ts"),e("pre",{class:"shiki dark-plus vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C586C0"}},"import"),e("span",{style:{color:"#D4D4D4"}}," { "),e("span",{style:{color:"#9CDCFE"}},"Person"),e("span",{style:{color:"#D4D4D4"}}," } "),e("span",{style:{color:"#C586C0"}},"from"),e("span",{style:{color:"#CE9178"}}," '@/models.g'")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C586C0"}},"import"),e("span",{style:{color:"#D4D4D4"}}," { "),e("span",{style:{color:"#9CDCFE"}},"PersonViewModel"),e("span",{style:{color:"#D4D4D4"}},", "),e("span",{style:{color:"#9CDCFE"}},"PersonListViewModel"),e("span",{style:{color:"#D4D4D4"}}," } "),e("span",{style:{color:"#C586C0"}},"from"),e("span",{style:{color:"#CE9178"}}," '@/viewmodels.g'")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#569CD6"}},"var"),e("span",{style:{color:"#9CDCFE"}}," viewModel"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#DCDCAA"}}," PersonViewModel"),e("span",{style:{color:"#D4D4D4"}},"();")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"viewModel"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"$dataSource"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#9CDCFE"}}," Person"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"DataSources"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#DCDCAA"}},"IncludeFamily"),e("span",{style:{color:"#D4D4D4"}},"();")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"viewModel"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#DCDCAA"}},"$load"),e("span",{style:{color:"#D4D4D4"}},"("),e("span",{style:{color:"#B5CEA8"}},"1"),e("span",{style:{color:"#D4D4D4"}},");")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#569CD6"}},"var"),e("span",{style:{color:"#9CDCFE"}}," list"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#DCDCAA"}}," PersonListViewModel"),e("span",{style:{color:"#D4D4D4"}},"();")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"list"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"$dataSource"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#9CDCFE"}}," Person"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"DataSources"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#DCDCAA"}},"NamesStartingWith"),e("span",{style:{color:"#D4D4D4"}},"();")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"list"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#DCDCAA"}},"$load"),e("span",{style:{color:"#D4D4D4"}},"("),e("span",{style:{color:"#B5CEA8"}},"1"),e("span",{style:{color:"#D4D4D4"}},");")])])])],-1),h=n(`<h2 id="standard-parameters" tabindex="-1">Standard Parameters <a class="header-anchor" href="#standard-parameters" aria-label="Permalink to &quot;Standard Parameters&quot;">​</a></h2><p>All methods on <code>IDataSource&lt;T&gt;</code> take a parameter that contains all the client-specified parameters for things paging, searching, sorting, and filtering information. Almost all virtual methods on <code>StandardDataSource</code> are also passed the relevant set of parameters. The parameters are contained in the <code>IDataSourceParameters</code> type or one of its derivatives, <code>IFilterParameters</code> (adds filtering and search parameters) or <code>IListParameters</code> (filters + pagination). These parameters can be set on the client through the <code>$params</code> member on <a href="/Coalesce/stacks/vue/layers/viewmodels.html#viewmodels">ViewModels</a> and <a href="/Coalesce/stacks/vue/layers/viewmodels.html#listviewmodels">ListViewModels</a>, or less commonly by passing them directly when using the <a href="/Coalesce/stacks/vue/layers/api-clients.html">API Clients</a> directly.</p><h3 id="ref-responses" tabindex="-1">Ref Responses <a class="header-anchor" href="#ref-responses" aria-label="Permalink to &quot;Ref Responses&quot;">​</a></h3><p>An additional parameter on <code>DataSourceParameters</code> is available on the client only - <code>refResponse</code>. If set to true - e.g. <code>listVm.$params.refResponse = true;</code>, Coalesce will pass a header value of <code>Accept: application/json+ref</code> with the API request. This will instruct the server to use <a href="https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/preserve-references#preserve-references-and-handle-circular-references" target="_blank" rel="noreferrer">System.Text.Json&#39;s PreserveReferences handling</a> when serializing the response. This allows identical objects that occur multiple times in the response to only have one copy sent across the wire. This also results in only a single, shared instance of this object on the client in the results from the API clients, cascading through to the ViewModels as well. This can significantly reduce response sizes by deduplicating multiple copies of the same data, as well as CPU and memory load on both the client and server.</p><h2 id="custom-parameters" tabindex="-1">Custom Parameters <a class="header-anchor" href="#custom-parameters" aria-label="Permalink to &quot;Custom Parameters&quot;">​</a></h2><p>On any data source that you create, you may add additional properties annotated with <code>[Coalesce]</code> that will then be exposed as parameters to the client. These property parameters can be any type supported by Coalesce, including primitives, dates, <a href="/Coalesce/modeling/model-types/entities.html">Entity Models</a>, <a href="/Coalesce/modeling/model-types/external-types.html">External Types</a>, or collections of these types.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> NamesStartingWith</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#DCDCAA;"> NamesStartingWith</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">base</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> StartsWith</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> IQueryable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IDataSourceParameters</span><span style="color:#9CDCFE;"> parameters</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">        =&gt; </span><span style="color:#9CDCFE;">Db</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Include</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Siblings</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">IsNullOrWhitespace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">StartsWith</span><span style="color:#D4D4D4;">) ? </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FirstName</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">StartsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">StartsWith</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="list-auto-loading" tabindex="-1">List Auto-loading <a class="header-anchor" href="#list-auto-loading" aria-label="Permalink to &quot;List Auto-loading&quot;">​</a></h3><p>You can setup <a href="/Coalesce/stacks/vue/layers/viewmodels.html">TypeScript List ViewModels</a> to automatically reload from the server when data source parameters change:</p>`,9),C=e("p",null,[s("To automatically reload a "),e("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html"},"ListViewModel"),s(" when data source parameters change, simply use the list's "),e("code",null,"$useAutoLoad"),s(" or "),e("code",null,"$startAutoLoad"),s(" function:")],-1),m=e("div",{class:"language-ts"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"ts"),e("pre",{class:"shiki dark-plus vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C586C0"}},"import"),e("span",{style:{color:"#D4D4D4"}}," { "),e("span",{style:{color:"#9CDCFE"}},"Person"),e("span",{style:{color:"#D4D4D4"}}," } "),e("span",{style:{color:"#C586C0"}},"from"),e("span",{style:{color:"#CE9178"}}," '@/models.g'"),e("span",{style:{color:"#D4D4D4"}},";")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C586C0"}},"import"),e("span",{style:{color:"#D4D4D4"}}," { "),e("span",{style:{color:"#9CDCFE"}},"PersonListViewModel"),e("span",{style:{color:"#D4D4D4"}}," } "),e("span",{style:{color:"#C586C0"}},"from"),e("span",{style:{color:"#CE9178"}}," '@/viewmodels.g'"),e("span",{style:{color:"#D4D4D4"}},";")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#569CD6"}},"const"),e("span",{style:{color:"#4FC1FF"}}," list"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#9CDCFE"}}," PersonListViewModel"),e("span",{style:{color:"#D4D4D4"}},";")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#569CD6"}},"const"),e("span",{style:{color:"#4FC1FF"}}," dataSource"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#9CDCFE"}},"list"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"$dataSource"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#569CD6"}},"new"),e("span",{style:{color:"#9CDCFE"}}," Person"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"DataSources"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"NamesStartingWith")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"list"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#DCDCAA"}},"$useAutoLoad"),e("span",{style:{color:"#D4D4D4"}},"(); "),e("span",{style:{color:"#6A9955"}},"// When using options API, use $startAutoLoad(this) instead.")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#6A9955"}},"// Trigger a reload:")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#9CDCFE"}},"dataSource"),e("span",{style:{color:"#D4D4D4"}},"."),e("span",{style:{color:"#9CDCFE"}},"startsWith"),e("span",{style:{color:"#D4D4D4"}}," = "),e("span",{style:{color:"#CE9178"}},'"Jo"'),e("span",{style:{color:"#D4D4D4"}},";")])])])],-1),f=n('<h2 id="standard-data-source" tabindex="-1">Standard Data Source <a class="header-anchor" href="#standard-data-source" aria-label="Permalink to &quot;Standard Data Source&quot;">​</a></h2><p>The standard data sources, <code>IntelliTect.Coalesce.StandardDataSource&lt;T&gt;</code> and its EntityFramework-supporting sibling <code>IntelliTect.Coalesce.StandardDataSource&lt;T, TContext&gt;</code>, contain a significant number of properties and methods that can be utilized and/or overridden at your leisure.</p><h3 id="default-loading-behavior" tabindex="-1">Default Loading Behavior <a class="header-anchor" href="#default-loading-behavior" aria-label="Permalink to &quot;Default Loading Behavior&quot;">​</a></h3><p>When an object or list of objects is requested, the default behavior of the the <code>StandardDataSource</code> is to load all of the immediate relationships of the object (parent objects and child collections), as well as the far side of <a href="./attributes/many-to-many.html">many-to-many</a> relationships. This is performed in <code>StandardDataSource.GetQuery()</code>, so in order to suppress this behavior in a custom data source, don&#39;t build you query off of <code>base.GetQuery()</code>, but instead start directly from the <code>DbSet</code> for your entity when building your custom query.</p><p>Clients can suppress this per-request by setting <code>.$includes = &quot;none&quot;</code> on your TypeScript <a href="/Coalesce/stacks/vue/layers/viewmodels.html#viewmodels">ViewModel</a> or <a href="/Coalesce/stacks/vue/layers/viewmodels.html#listviewmodels">ListViewModel</a>, but note this is not a security mechanism and should only be used to reduce payload size or improve response time.</p><p>On the server, you can suppress this behavior by placing <code>[Read(NoAutoInclude = true)]</code> on either an entire class (affecting all navigation properties of that type), or on specific navigation properties. When placed on a entity class that holds sensitive data, this can help ensure you don&#39;t accidentally leak records due to forgetting to customize the data sources of the types whose navigation properties reference your sensitive entity.</p><p>You can also suppress this for your entire application by placing <code>[assembly: CoalesceConfiguration(NoAutoInclude = true)]</code> on the assembly that holds your models.</p><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h3><p>The following properties are available for use on the <code>StandardDataSource</code> any any derived instances.</p>',9),g=e("p",null,"The object passed to the constructor that contains the set of objects needed by the standard data source, and those that are most likely to be used in custom implementations.",-1),b=e("p",null,[s("An instance of the DbContext that contains a "),e("code",null,"DbSet<T>"),s(" for the entity served by the data source.")],-1),v=e("p",null,"The user making the current request.",-1),T=e("p",null,"The max number of search terms to process when interpreting a search term word-by-word. Override by setting a value in the constructor.",-1),A=e("p",null,"The page size to use if none is specified by the client. Override by setting a value in the constructor.",-1),S=n(`<p>The maximum page size that will be served. By default, client-specified page sizes will be clamped to this value. Override by setting a value in the constructor.</p><h3 id="method-overview" tabindex="-1">Method Overview <a class="header-anchor" href="#method-overview" aria-label="Permalink to &quot;Method Overview&quot;">​</a></h3><p>The standard data source contains 19 different methods which can be overridden in your derived class to control its behavior.</p><p>These methods often call one another, so overriding one method may cause some other method to no longer be called. The hierarchy of method calls, ignoring any logic or conditions contained within, is as follows:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code"><code><span class="line"><span>GetMappedItemAsync</span></span>
<span class="line"><span>    GetItemAsync</span></span>
<span class="line"><span>        GetQueryAsync</span></span>
<span class="line"><span>            GetQuery</span></span>
<span class="line"><span>        GetIncludeTree</span></span>
<span class="line"><span>    TransformResults</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GetMappedListAsync</span></span>
<span class="line"><span>    GetListAsync</span></span>
<span class="line"><span>        GetQueryAsync</span></span>
<span class="line"><span>            GetQuery</span></span>
<span class="line"><span>        ApplyListFiltering</span></span>
<span class="line"><span>            ApplyListPropertyFilters</span></span>
<span class="line"><span>                ApplyListPropertyFilter</span></span>
<span class="line"><span>            ApplyListSearchTerm</span></span>
<span class="line"><span>        GetListTotalCountAsync</span></span>
<span class="line"><span>        ApplyListSorting</span></span>
<span class="line"><span>            ApplyListClientSpecifiedSorting</span></span>
<span class="line"><span>            ApplyListDefaultSorting</span></span>
<span class="line"><span>        ApplyListPaging</span></span>
<span class="line"><span>        GetIncludeTree</span></span>
<span class="line"><span>    TrimListFields</span></span>
<span class="line"><span>    TransformResults</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GetCountAsync</span></span>
<span class="line"><span>    GetQueryAsync</span></span>
<span class="line"><span>        GetQuery</span></span>
<span class="line"><span>    ApplyListFiltering</span></span>
<span class="line"><span>        ApplyListPropertyFilters</span></span>
<span class="line"><span>            ApplyListPropertyFilter</span></span>
<span class="line"><span>        ApplyListSearchTerm</span></span>
<span class="line"><span>    GetListTotalCountAsync</span></span></code></pre></div><h3 id="method-details" tabindex="-1">Method Details <a class="header-anchor" href="#method-details" aria-label="Permalink to &quot;Method Details&quot;">​</a></h3><p>All of the methods outlined above can be overridden. A description of each of the non-interface inner methods is as follows:</p>`,7),_=n('<p>The method is the one that you will most commonly be override in order to implement custom query logic. The default implementation of GetQueryAsync simply calls GetQuery - be aware of this in cases of complex overrides/inheritance. From this method, you could:</p><ul><li>Specify additional query filtering such as row-level security or soft-delete logic. Or, restrict the data source entirely for users or whole roles by returning an empty query.</li><li>Include additional data using EF&#39;s <code>.Include()</code> and <code>.ThenInclude()</code>.</li><li>Add additional edges to the serialized object graph using Coalesce&#39;s <code>.IncludedSeparately()</code> and <code>.ThenIncluded()</code>.</li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When <code>GetQuery</code> is overridden, the <a href="/Coalesce/modeling/model-components/data-sources.html#default-loading-behavior">Default Loading Behavior</a> is overridden as well. To restore this behavior, use the <code>IQueryable&lt;T&gt;.IncludeChildren()</code> extension method to build your query.</p></div>',3),E=e("p",null,[s("Allows for explicitly specifying the "),e("a",{href:"/Coalesce/concepts/include-tree.html"},"Include Tree"),s(" that will be used when serializing results obtained from this data source into DTOs. By default, the query that is build up through all the other methods in the data source will be used to build the include tree.")],-1),w=e("p",null,[s("Called by other methods in the standard data source to determine whether or not EF Core async methods will be used to evaluate queries. This may be globally disabled when bugs like "),e("a",{href:"https://github.com/dotnet/SqlClient/issues/593",target:"_blank",rel:"noreferrer"},"https://github.com/dotnet/SqlClient/issues/593"),s(" are present in EF Core.")],-1),I=e("p",null,[s("A simple wrapper that calls "),e("code",null,"ApplyListPropertyFilters"),s(" and "),e("code",null,"ApplyListSearchTerm"),s(".")],-1),F=e("p",null,[s("For each value in "),e("code",null,"parameters.Filter"),s(" that the user is allowed to read and filter by, invoke "),e("code",null,"ApplyListPropertyFilter"),s(" to apply a filter to the query.")],-1),P=n("<p>Given a property and a client-provided string value, perform some filtering on that property.</p><ul><li>Dates with a time component will be matched exactly.</li><li>Dates with no time component will match any dates that fell on that day.</li><li>Strings will match exactly unless an asterisk is found in the filter, in which case they will be matched with <code>string.StartsWith</code> with the asterisk stripped out.</li><li>Enums will match by string or numeric value. Multiple comma-delimited values will create a filter that will match on any of the provided values.</li><li>Numeric values will match exactly. Multiple comma-delimited values will create a filter that will match on any of the provided values.</li><li>The values <code>null</code> and <code>&quot;null&quot;</code> match a <code>null</code> property value (except string properties).</li></ul>",2),x=e("p",null,[s("Applies predicates to the query based on the search term in "),e("code",null,"parameters.Search"),s(". See "),e("a",{href:"/Coalesce/modeling/model-components/attributes/search.html"},"[Search]"),s(" for a detailed look at how searching works in Coalesce.")],-1),k=e("p",null,[s("If any client-specified sort orders are present, invokes "),e("code",null,"ApplyListClientSpecifiedSorting"),s(". Otherwise, invokes "),e("code",null,"ApplyListDefaultSorting"),s(".")],-1),q=e("p",null,[s("Applies sorting to the query based on sort orders specified by the client. If the client specified "),e("code",null,'"none"'),s(" as the sort field, no sorting will take place.")],-1),B=e("p",null,[s("Applies default sorting behavior to the query, including behavior defined with use of "),e("code",null,"[DefaultOrderBy]"),s(" in C# POCOs, as well as fallback sorting to "),e("code",null,'"Name"'),s(" or primary key properties.")],-1),L=e("p",null,"Applies paging to the query based on incoming parameters. Provides the actual page and pageSize that were used as out parameters.",-1),Q=e("p",null,[s("Simple wrapper around invoking "),e("code",null,".Count()"),s(" on a query.")],-1),V=n('<p>Allows for transformation of a result set after the query has been evaluated. This will be called for both lists of items and for single items. This can be used for populating non-mapped properties on a model, or conditionally loading navigation properties using logic that depends upon the contents of each loaded record.</p><p>This method is only called immediately before mapping to a DTO; it does not affect operations that don&#39;t involve mapping to a DTO - e.g. when loading the target of a <code>/save</code> operation or when loading the invocation target of an <a href="/Coalesce/modeling/model-components/methods.html#instance-methods">instance method</a>.</p><p>See the <a href="/Coalesce/topics/security.html#transform-results">Security</a> page for an example on how to use TransformResults to <a href="/Coalesce/topics/security.html#transform-results">apply filtered includes</a>.</p><p>Do not use <code>TransformResults</code> to modify any database-mapped scalar properties, since such changes could be inadvertently persisted to the database.</p>',4),M=n(`<p>Performs trimming of the fields of the result set based on the parameters given to the data source. Can be overridden to forcibly disable this, override the behavior to always trim specific fields, or any other functionality desired.</p><h2 id="globally-replacing-the-standard-data-source" tabindex="-1">Globally Replacing the Standard Data Source <a class="header-anchor" href="#globally-replacing-the-standard-data-source" aria-label="Permalink to &quot;Globally Replacing the Standard Data Source&quot;">​</a></h2><p>You can, of course, create a custom base data source that all your custom implementations inherit from. But, what if you want to override the standard data source across your entire application, so that <code>StandardDataSource&lt;,&gt;</code> will never be instantiated? You can do that too!</p><p>Simply create a class that implements <code>IEntityFrameworkDataSource&lt;,&gt;</code> (the <code>StandardDataSource&lt;,&gt;</code> already does - feel free to inherit from it), then register it at application startup like so:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">TContext</span><span style="color:#D4D4D4;">&gt; : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">TContext</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">    where</span><span style="color:#4EC9B0;"> T</span><span style="color:#D4D4D4;"> : </span><span style="color:#569CD6;">class</span></span>
<span class="line"><span style="color:#569CD6;">    where</span><span style="color:#4EC9B0;"> TContext</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">DbContext</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#DCDCAA;"> MyDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">base</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> void</span><span style="color:#DCDCAA;"> ConfigureServices</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#9CDCFE;"> services</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">    services</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddCoalesce</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> =&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#9CDCFE;">        b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#9CDCFE;">        b</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">UseDefaultDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">MyDataSource</span><span style="color:#D4D4D4;">&lt;,&gt;));</span></span>
<span class="line"><span style="color:#D4D4D4;">    });</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Your custom data source must have the same generic type parameters - <code>&lt;T, TContext&gt;</code>. Otherwise, the Microsoft.Extensions.DependencyInjection service provider won&#39;t know how to inject it.</p>`,7);function G(N,R,O,W,j,z){const t=r("CodeTabs"),o=r("Prop");return i(),c("div",null,[D,a(t,null,{vue:l(()=>[y,u]),_:1}),h,a(t,null,{vue:l(()=>[C,m]),_:1}),f,a(o,{def:"CrudContext<TContext> Context"}),g,a(o,{def:"TContext Db"}),b,a(o,{def:"ClaimsPrincipal User"}),v,a(o,{def:"int MaxSearchTerms"}),T,a(o,{def:"int DefaultPageSize"}),A,a(o,{def:"int MaxPageSize"}),S,a(o,{def:`IQueryable<T> GetQuery(IDataSourceParameters parameters);
Task<IQueryable<T>> GetQueryAsync(IDataSourceParameters parameters);`}),_,a(o,{def:"IncludeTree? GetIncludeTree(IQueryable<T> query, IDataSourceParameters parameters)"}),E,a(o,{def:"bool CanEvalQueryAsynchronously(IQueryable<T> query)"}),w,a(o,{def:"IQueryable<T> ApplyListFiltering(IQueryable<T> query, IFilterParameters parameters)"}),I,a(o,{def:"IQueryable<T> ApplyListPropertyFilters(IQueryable<T> query, IFilterParameters parameters)"}),F,a(o,{def:"IQueryable<T> ApplyListPropertyFilter(IQueryable<T> query, PropertyViewModel prop, string value)"}),P,a(o,{def:"IQueryable<T> ApplyListSearchTerm(IQueryable<T> query, IFilterParameters parameters)"}),x,a(o,{def:"IQueryable<T> ApplyListSorting(IQueryable<T> query, IListParameters parameters)"}),k,a(o,{def:"IQueryable<T> ApplyListClientSpecifiedSorting(IQueryable<T> query, IListParameters parameters)"}),q,a(o,{def:"IQueryable<T> ApplyListDefaultSorting(IQueryable<T> query)"}),B,a(o,{def:"IQueryable<T> ApplyListPaging(IQueryable<T> query, IListParameters parameters, int? totalCount, out int page, out int pageSize)"}),L,a(o,{def:"Task<int> GetListTotalCountAsync(IQueryable<T> query, IFilterParameters parameters)"}),Q,a(o,{def:`void TransformResults(IReadOnlyList<T> results, IDataSourceParameters parameters);
Task TransformResultsAsync(IReadOnlyList<T> results, IDataSourceParameters parameters);`}),V,a(o,{def:"IList<TDto> TrimListFields<TDto>(IList<TDto> mappedResult, IListParameters parameters)"}),M])}const Y=p(d,[["render",G]]);export{U as __pageData,Y as default};
