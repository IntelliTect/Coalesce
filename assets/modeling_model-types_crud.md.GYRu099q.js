import{_ as e,c as t,o as a,a7 as o}from"./chunks/framework.BkavzUpE.js";const f=JSON.parse('{"title":"CRUD Models","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-types/crud.md","filePath":"modeling/model-types/crud.md"}'),s={name:"modeling/model-types/crud.md"},l=o('<h1 id="crud-models" tabindex="-1">CRUD Models <a class="header-anchor" href="#crud-models" aria-label="Permalink to &quot;CRUD Models&quot;">​</a></h1><p>The primary function of Coalesce, above all else, is to provide Create, Read, Update, and Delete (CRUD) API endpoints around your application&#39;s data model that you can easily call from your front-end code without having to wade through the tedium of building these API endpoints by hand.</p><p>To this end, there are three different methods of defining models that support CRUD operations:</p><ul><li><a href="#ef-entity-models">EF Entity Models</a></li><li><a href="#standalone-entities">Standalone Entities</a></li><li><a href="#custom-dtos">Custom DTOs</a></li></ul><p>All of these support the following:</p><ul><li>Generated API Controllers with <code>/get</code>, <code>/list</code>, <code>/count</code>, <code>/save</code> endpoints (<code>/bulkSave</code> unavailable for Standalone Entities).</li><li><a href="/Coalesce/modeling/model-components/methods.html">Custom Methods</a></li><li><a href="/Coalesce/stacks/vue/layers/viewmodels.html#viewmodels">TypeScript ViewModels</a> and <a href="/Coalesce/stacks/vue/layers/viewmodels.html#listviewmodels">TypeScript ListViewModels</a></li><li><a href="/Coalesce/modeling/model-components/data-sources.html">Data Sources</a> and <a href="/Coalesce/modeling/model-components/behaviors.html">Behaviors</a></li><li>Admin pages</li></ul><h2 id="ef-entity-models" tabindex="-1">EF Entity Models <a class="header-anchor" href="#ef-entity-models" aria-label="Permalink to &quot;EF Entity Models&quot;">​</a></h2><p>In Coalesce applications, most, if not all, of your data models will be <a href="https://docs.microsoft.com/en-us/ef/core/" target="_blank" rel="noreferrer">Entity Framework Core</a> entity models. These are built with standard EF conventions, but their interactions with Coalesce can be greatly customized.</p><p>Read more about <a href="/Coalesce/modeling/model-types/entities.html">EF Entity Models</a>.</p><h2 id="standalone-entities" tabindex="-1">Standalone Entities <a class="header-anchor" href="#standalone-entities" aria-label="Permalink to &quot;Standalone Entities&quot;">​</a></h2><p>Standalone Entities are CRUD model types that support all the standard features of <a href="/Coalesce/modeling/model-types/crud.html">CRUD Models</a>, but are not required to be based on Entity Framework. Instead, you the developer must define a data source that produces instances of the model. This <strong>can</strong> be an Entity Framework query, but could also be any other mechanism that you can imagine and write in C#.</p><p>Read more about <a href="/Coalesce/modeling/model-types/standalone-entities.html">Standalone Entities</a>.</p><h2 id="custom-dtos" tabindex="-1">Custom DTOs <a class="header-anchor" href="#custom-dtos" aria-label="Permalink to &quot;Custom DTOs&quot;">​</a></h2><p>In addition to the generated <a href="/Coalesce/stacks/agnostic/dtos.html">Generated C# DTOs</a> that Coalesce will create for you for <a href="/Coalesce/modeling/model-types/entities.html">EF Entity Models</a> and <a href="/Coalesce/modeling/model-types/standalone-entities.html">Standalone Entities</a>, you may also create your own implementation of an <code>IClassDto</code> with customized properties and expose it as if it was a first-class CRUD Model type. These are known as Custom DTOs and support all the standard features of <a href="/Coalesce/modeling/model-types/crud.html">CRUD Models</a>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Custom DTOs are an advanced feature of Coalesce and are not needed by most applications. In almost all cases, <a href="/Coalesce/modeling/model-types/entities.html">EF Entity Models</a> can be customized to handle any needs that you might want to use a Custom DTO for, or <a href="/Coalesce/modeling/model-types/standalone-entities.html">Standalone Entities</a> can be used to serve an alternate projection of an EF Entity Model.</p></div><p>Read more about <a href="/Coalesce/modeling/model-types/dtos.html">Custom DTOs</a>.</p>',16),n=[l];function d(i,r,c,m,h,u){return a(),t("div",null,n)}const y=e(s,[["render",d]]);export{f as __pageData,y as default};
