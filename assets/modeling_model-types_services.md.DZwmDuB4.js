import{_ as s,c as e,o as a,a7 as n}from"./chunks/framework.BkavzUpE.js";const h=JSON.parse('{"title":"Services","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-types/services.md","filePath":"modeling/model-types/services.md"}'),o={name:"modeling/model-types/services.md"},l=n(`<h1 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-label="Permalink to &quot;Services&quot;">​</a></h1><p>In a Coalesce application, you are likely to end up with a need for some API endpoints that aren&#39;t closely tied with your regular data model. While you could stick <a href="/Coalesce/modeling/model-components/methods.html#static-methods">Static Methods</a> on one of your entities, doing so can be detrimental to the organization of your code.</p><p>Instead, Coalesce allows you to generate API Controllers and a TypeScript client from a service. A service, in this case, is nothing more than a C# class or an interface with methods on it, annotated with <code>[Coalesce, Service]</code>. An implementation of this class or interface must be injectable from your application&#39;s service container, so a registration in Program.cs is needed.</p><p>The instance methods of these services work just like other custom <a href="/Coalesce/modeling/model-components/methods.html">Methods</a> in Coalesce, with one notable distinction: Instance methods don&#39;t operate on an instance of a model, but instead on a dependency injected instance of the service.</p><h2 id="generated-code" tabindex="-1">Generated Code <a class="header-anchor" href="#generated-code" aria-label="Permalink to &quot;Generated Code&quot;">​</a></h2><p>For each external type found in your application&#39;s model, Coalesce will generate:</p><ul><li>An API controller with endpoints that correspond to the service&#39;s instance methods.</li><li>A TypeScript client containing the members outlined in <a href="/Coalesce/modeling/model-components/methods.html">Methods</a> for invoking these endpoints.</li></ul><h2 id="example-service" tabindex="-1">Example Service <a class="header-anchor" href="#example-service" aria-label="Permalink to &quot;Example Service&quot;">​</a></h2><p>An example of a service might look something like this:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Service</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> interface</span><span style="color:#4EC9B0;"> IWeatherService</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#4EC9B0;">    WeatherData</span><span style="color:#DCDCAA;"> GetWeather</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> zipCode</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>With an implementation:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> WeatherService</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">IWeatherService</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#DCDCAA;"> WeatherService</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#9CDCFE;"> db</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> WeatherData</span><span style="color:#DCDCAA;"> GetWeather</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> zipCode</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#6A9955;">        // Assuming some magic HttpGet method that works as follows...</span></span>
<span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">HttpGet</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;http://www.example.com/api/weather/&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">zipCode</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SerializeTo</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">WeatherData</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // This method is not exposed because it is not defined on the interface</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> void</span><span style="color:#DCDCAA;"> MethodThatIsNotExposed</span><span style="color:#D4D4D4;">() {  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>And a registration:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// In Program.cs</span></span>
<span class="line"><span style="color:#9CDCFE;">builder</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Services</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddCoalesce</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#9CDCFE;">builder</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Services</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddScoped</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">IWeatherService</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">WeatherService</span><span style="color:#D4D4D4;">&gt;();</span></span></code></pre></div><h2 id="using-interfaces-with-services" tabindex="-1">Using Interfaces With Services <a class="header-anchor" href="#using-interfaces-with-services" aria-label="Permalink to &quot;Using Interfaces With Services&quot;">​</a></h2><p>Interfaces annotated with <code>[Coalesce, Service]</code> will automatically expose all methods on that interface. Your interfaces should precisely define the service you intend to expose through Coalesce. Any members you do not want to expose should not be included in the interface.</p><p>Although it is not required to use an interface (you can generate endpoints directly from the implementation), it is highly recommended. Interfaces improve testability and reduce the risk of inadvertently changing the signature of a published API.</p><p>If you choose to generate directly from the implementation, annotate the class itself with <code>[Coalesce, Service]</code> rather than the interface. Unlike interfaces, each method you want to expose on the class must be explicitly annotated with the <code>[Coalesce]</code> attribute.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Service</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> WeatherService</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#DCDCAA;"> WeatherService</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#9CDCFE;"> db</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> WeatherData</span><span style="color:#DCDCAA;"> GetWeather</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#9CDCFE;"> zipCode</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#6A9955;">        // Assuming some magic HttpGet method that works as follows...</span></span>
<span class="line"><span style="color:#569CD6;">        var</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">HttpGet</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;http://www.example.com/api/weather/&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">zipCode</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SerializeTo</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">WeatherData</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // This method is not exposed because it lacks the [Coalesce] attribute</span></span>
<span class="line"><span style="color:#569CD6;">    private</span><span style="color:#569CD6;"> void</span><span style="color:#DCDCAA;"> MethodThatIsNotExposed</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,19),p=[l];function t(c,r,i,D,y,d){return a(),e("div",null,p)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};
