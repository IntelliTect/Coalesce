import{_ as s,c as a,o as n,a7 as l}from"./chunks/framework.BkavzUpE.js";const E=JSON.parse('{"title":"Standalone Entities","description":"","frontmatter":{},"headers":[],"relativePath":"modeling/model-types/standalone-entities.md","filePath":"modeling/model-types/standalone-entities.md"}'),p={name:"modeling/model-types/standalone-entities.md"},o=l(`<h1 id="standalone-entities" tabindex="-1">Standalone Entities <a class="header-anchor" href="#standalone-entities" aria-label="Permalink to &quot;Standalone Entities&quot;">​</a></h1><p>Standalone Entities are CRUD model types that support all the standard features of <a href="/Coalesce/modeling/model-types/crud.html">CRUD Models</a>, but are not required to be based on Entity Framework. Instead, you the developer must define a data source that produces instances of the model. This <strong>can</strong> be an Entity Framework query, but could also be any other mechanism that you can imagine and write in C#.</p><p>To define a Standalone Entity:</p><ol><li>Make a class and annotate it with <code>[Coalesce, StandaloneEntity]</code>.</li><li>Define a default <a href="/Coalesce/modeling/model-components/data-sources.html">Data Source</a> for the type, usually inheriting from <code>StandardDataSource&lt;T&gt;</code></li><li>Optionally, define a <a href="/Coalesce/modeling/model-components/behaviors.html">Behaviors</a> class as well to give the model create/edit/delete capabilities. If no behaviors are defined, the model is read-only.</li></ol><h2 id="read-only-with-ef-backing-store" tabindex="-1">Read-only with EF backing store <a class="header-anchor" href="#read-only-with-ef-backing-store" aria-label="Permalink to &quot;Read-only with EF backing store&quot;">​</a></h2><p>In the below example, the standalone entity <code>PageListing</code> is used as a lightweight, read-only representation of a <code>Page</code> EF entity, with some properties omitted for performance (<code>Content</code>) and other properties simplified (<code>Author</code>).</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneEntity</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> PageListing</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> Id</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">Search</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SearchMethod</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">SearchAttribute</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">SearchMethods</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Contains</span><span style="color:#D4D4D4;">), </span><span style="color:#4EC9B0;">ListText</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Title</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; } = </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DefaultOrderBy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">OrderByDirections</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Descending</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> DateTimeOffset</span><span style="color:#9CDCFE;"> Date</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Author</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> DefaultSource</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">        : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#4EC9B0;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">IQueryable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">GetQueryAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IDataSourceParameters</span><span style="color:#9CDCFE;"> parameters</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        =&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Pages</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">IsPublished</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Select</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> PageListing</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#9CDCFE;">                Id</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">                Title</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Title</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">                DateModified</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">                Author</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">CreatedBy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FullName</span></span>
<span class="line"><span style="color:#D4D4D4;">            });</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// EF entity model</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Page</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> Id</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Title</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> DateTimeOffset</span><span style="color:#9CDCFE;"> DateModified</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Content</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> bool</span><span style="color:#9CDCFE;"> IsPublished</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> CreatedById</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> User</span><span style="color:#9CDCFE;"> CreatedBy</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="read-write-with-ef-backing-store" tabindex="-1">Read/write with EF backing store <a class="header-anchor" href="#read-write-with-ef-backing-store" aria-label="Permalink to &quot;Read/write with EF backing store&quot;">​</a></h2><p>Building on the previous example, we can make the <code>Title</code> of a <code>PageListing</code> editable as follows:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneEntity</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">DenyAll</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Delete</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">DenyAll</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> PageListing</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;">    // properties and data source same as previous example.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Behaviors</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#4EC9B0;">StandardBehaviors</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#4EC9B0;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteSaveAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">SaveKind</span><span style="color:#9CDCFE;"> kind</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">oldItem</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PageListing</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        {</span></span>
<span class="line"><span style="color:#6A9955;">            // Note: \`page\` is guaranteed to exist here because the \`PageListing item\` instance</span></span>
<span class="line"><span style="color:#6A9955;">            // is a projection from the Page table and was loaded from the type&#39;s data source </span></span>
<span class="line"><span style="color:#6A9955;">            // immediately before ExecuteSaveAsync was called.</span></span>
<span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> page</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Pages</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">FindAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">)!;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">            // Perform mapping of properties that should be savable, from \`item\` to the backing entity.</span></span>
<span class="line"><span style="color:#9CDCFE;">            page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Title</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Title</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">            await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SaveChangesAsync</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteDeleteAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">) =&gt; </span><span style="color:#C586C0;">throw</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> NotSupportedException</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>To add support for creates or deletes, implement the additional necessary actions in the overridden methods on the behaviors, and remove the DenyAll attributes.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneEntity</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">DenyAll</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Delete</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">DenyAll</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> PageListing</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;">    // properties and data source same as previous example.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Behaviors</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">) : </span><span style="color:#4EC9B0;">StandardBehaviors</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#4EC9B0;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#569CD6;"> async</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteSaveAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">SaveKind</span><span style="color:#9CDCFE;"> kind</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PageListing</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">oldItem</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PageListing</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        {</span></span>
<span class="line"><span style="color:#4EC9B0;">            Page</span><span style="color:#9CDCFE;"> page</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">kind</span><span style="color:#D4D4D4;"> == </span><span style="color:#9CDCFE;">SaveKind</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Create</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#9CDCFE;">                context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> Page</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CreatedById</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">GetUserId</span><span style="color:#D4D4D4;">() });</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;">            else</span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#9CDCFE;">                page</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Pages</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">FindAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">)!;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">            page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Title</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Title</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">            await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SaveChangesAsync</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">            // Propagate the new primary key back to the standalone entity instance </span></span>
<span class="line"><span style="color:#6A9955;">            // (in case this was a Create action instead of an Update).</span></span>
<span class="line"><span style="color:#9CDCFE;">            item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#569CD6;"> async</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteDeleteAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">PageListing</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        {</span></span>
<span class="line"><span style="color:#569CD6;">            var</span><span style="color:#9CDCFE;"> page</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Pages</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">FindAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">)!;</span></span>
<span class="line"><span style="color:#9CDCFE;">            context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Remove</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">            await</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DbContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SaveChangesAsync</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="read-only-without-ef" tabindex="-1">Read-only without EF <a class="header-anchor" href="#read-only-without-ef" aria-label="Permalink to &quot;Read-only without EF&quot;">​</a></h2><p>Standalone entities can be created with <em>any</em> kind of backing store you can imagine - an in-memory store, a Redis instance, or an external REST API, for example.</p><p>The below example is admittedly contrived, as it is unlikely that you would be using an in-memory collection as a data persistence mechanism. A more likely real-world scenario would be to dependency inject an interface to some other data store.</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneEntity</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> StandaloneExample</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> Id</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">Search</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SearchMethod</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">SearchAttribute</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">SearchMethods</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Contains</span><span style="color:#D4D4D4;">), </span><span style="color:#4EC9B0;">ListText</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Name</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; } = </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">DefaultOrderBy</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#4EC9B0;"> DateTimeOffset</span><span style="color:#9CDCFE;"> Date</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    private</span><span style="color:#569CD6;"> static</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> nextId</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">    private</span><span style="color:#569CD6;"> static</span><span style="color:#4EC9B0;"> ConcurrentDictionary</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">backingStore</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#4EC9B0;"> ConcurrentDictionary</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> DefaultSource</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">) : </span><span style="color:#4EC9B0;">StandardDataSource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#4EC9B0;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">IQueryable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">GetQueryAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IDataSourceParameters</span><span style="color:#9CDCFE;"> parameters</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            =&gt; </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">FromResult</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">backingStore</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Values</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AsQueryable</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="read-write-without-ef" tabindex="-1">Read/write without EF <a class="header-anchor" href="#read-write-without-ef" aria-label="Permalink to &quot;Read/write without EF&quot;">​</a></h2><p>Building on the previous example, we can add support for saves and deletes by adding a Behaviors implementation:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneEntity</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> StandaloneExample</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;">    // properties and data source same as previous example.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Behaviors</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">CrudContext</span><span style="color:#9CDCFE;"> context</span><span style="color:#D4D4D4;">) : </span><span style="color:#4EC9B0;">StandardBehaviors</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#4EC9B0;">context</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteDeleteAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        {</span></span>
<span class="line"><span style="color:#9CDCFE;">            backingStore</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">TryRemove</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">out</span><span style="color:#9CDCFE;"> _</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> Task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">CompletedTask</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> override</span><span style="color:#4EC9B0;"> Task</span><span style="color:#DCDCAA;"> ExecuteSaveAsync</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">SaveKind</span><span style="color:#9CDCFE;"> kind</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">oldItem</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">StandaloneExample</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        {</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">kind</span><span style="color:#D4D4D4;"> == </span><span style="color:#9CDCFE;">SaveKind</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Create</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#9CDCFE;">                item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Interlocked</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Increment</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">ref</span><span style="color:#9CDCFE;"> nextId</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">                backingStore</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">TryAdd</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;">            else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">backingStore</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">TryGetValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Id</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">out</span><span style="color:#569CD6;"> var</span><span style="color:#9CDCFE;"> storeItem</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">            {</span></span>
<span class="line"><span style="color:#9CDCFE;">                storeItem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Name</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">                storeItem</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> Task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">CompletedTask</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,19),e=[o];function t(D,c,r,y,C,i){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{E as __pageData,u as default};
