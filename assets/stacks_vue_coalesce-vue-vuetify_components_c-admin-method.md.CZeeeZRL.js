import{_ as s,c as l,I as t,a7 as n,l as e,a,D as c,o as r}from"./chunks/framework.BkavzUpE.js";const w=JSON.parse('{"title":"c-admin-method","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/coalesce-vue-vuetify/components/c-admin-method.md","filePath":"stacks/vue/coalesce-vue-vuetify/components/c-admin-method.md"}'),d={name:"stacks/vue/coalesce-vue-vuetify/components/c-admin-method.md"},i=n('<h1 id="c-admin-method" tabindex="-1">c-admin-method <a class="header-anchor" href="#c-admin-method" aria-label="Permalink to &quot;c-admin-method&quot;">​</a></h1><p>Provides an interface for invoking a <a href="/Coalesce/modeling/model-components/methods.html">method</a> and rendering its result, designed to be use in an admin page.</p><p>For each parameter of a method, a <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-input.html">c-input</a> will be rendered to accept the input of that parameter. A button is provided to trigger an invocation of the method, progress and errors are rendered with a <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-loader-status.html">c-loader-status</a>, and results are rendered with <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-display.html">c-display</a>.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-admin-method</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;setTitle&quot;</span><span style="color:#9CDCFE;"> auto-reload-model</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2>',6),p=e("p",null,"A metadata specifier for the method. One of:",-1),m=e("ul",null,[e("li",null,[a("A string with the name of the method belonging to "),e("code",null,"model"),a(".")]),e("li",null,"A direct reference to a method's metadata object."),e("li",null,"A string in dot-notation that starts with a type name and ending with a method name.")],-1),h=e("p",null,[a("An "),e("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html"},"ViewModel"),a(" or "),e("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html"},"ListViewModel"),a(" or "),e("a",{href:"/Coalesce/modeling/model-types/services.html#generated-code"},"ServiceViewModel"),a(" owning the method and "),e("a",{href:"/Coalesce/stacks/vue/layers/api-clients.html#api-callers"},"API Caller"),a(" that was specified by the "),e("code",null,"for"),a(" prop.")],-1),u=e("p",null,[a("True if the "),e("code",null,"model"),a(" should have its "),e("code",null,"$load"),a(" invoked after a successful invocation of the method.")],-1);function f(v,_,y,D,g,C){const o=c("Prop");return r(),l("div",null,[i,t(o,{def:"for: string | Method",lang:"ts"}),p,m,t(o,{def:"model: ViewModel | ListViewModel | ServiceViewModel",lang:"ts"}),h,t(o,{def:"autoReloadModel?: boolean = false",lang:"ts"}),u])}const b=s(d,[["render",f]]);export{w as __pageData,b as default};
