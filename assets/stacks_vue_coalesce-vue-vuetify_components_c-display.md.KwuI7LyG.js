import{_ as l,c as n,I as o,a7 as t,l as e,a,D as p,o as r}from"./chunks/framework.BkavzUpE.js";const E=JSON.parse('{"title":"c-display","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/coalesce-vue-vuetify/components/c-display.md","filePath":"stacks/vue/coalesce-vue-vuetify/components/c-display.md"}'),c={name:"stacks/vue/coalesce-vue-vuetify/components/c-display.md"},i=t(`<h1 id="c-display" tabindex="-1">c-display <a class="header-anchor" href="#c-display" aria-label="Permalink to &quot;c-display&quot;">​</a></h1><p>A general-purpose component for displaying any <a href="/Coalesce/stacks/vue/layers/metadata.html#value">Value</a> by rendering the value to a string with the <a href="/Coalesce/stacks/vue/layers/models.html#VueModelDisplayFunctions">display functions from the Models Layer</a>. For plain string and number <a href="/Coalesce/stacks/vue/layers/metadata.html">values</a>, usage of this component is largely superfluous. For all other value types including dates, booleans, enums, objects, and collections, it is very handy.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>Typical usage, providing an object and a property on that object:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;gender&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>Customizing date formatting (<a href="https://date-fns.org/v2.29.3/docs/format" target="_blank" rel="noreferrer">view format patterns</a>):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;birthDate&quot;</span><span style="color:#9CDCFE;"> format</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;M/d/yyyy&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>A contrived example of using c-display to render the result of an <a href="/Coalesce/stacks/vue/layers/api-clients.html#api-callers">API Caller</a>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    :</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">setFirstName</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    :</span><span style="color:#9CDCFE;">for</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">methods</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">setFirstName</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">return</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#9CDCFE;">    element</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;div&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">/</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>Displaying a standalone date value without a model or other source of metadata:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">dateProp</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> format</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;M/d/yyyy&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2>`,12),d=e("p",null,[a("A metadata specifier for the value being bound. Either a direct reference to the metadata object, or a string with the name of the value belonging to "),e("code",null,"model"),a(", or a string in dot-notation that starts with a type name.")],-1),D=e("p",null,[a("An object owning the value that was specified by the "),e("code",null,"for"),a(" prop.")],-1),y=e("p",null,[a("Shorthand for "),e("code",null,':options="{ format: format }"'),a(", allowing for specification of the format to be used when displaying dates.")],-1),u=e("p",null,[a("See "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html#displayoptions"},"DisplayOptions"),a(" for details on the options available for "),e("code",null,"format"),a(".")],-1),h=e("p",null,[a("Specify options for formatting some kinds of values, including dates. See "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html#displayoptions"},"DisplayOptions"),a(" for details.")],-1),m=t('<p>Can be provided the value to be displayed in conjunction with the <code>for</code> prop, as an alternative to the <code>model</code> prop.</p><p>This is an uncommon scenario - it is generally easier to use the <code>for</code>/<code>model</code> props together.</p><h2 id="slots" tabindex="-1">Slots <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;Slots&quot;">​</a></h2><p><code>default</code> - Used to display fallback content if the value being displayed is either <code>null</code> or <code>&quot;&quot;</code> (empty string).</p><h2 id="datatypeattribute" tabindex="-1">[DataTypeAttribute] <a class="header-anchor" href="#datatypeattribute" aria-label="Permalink to &quot;[DataTypeAttribute]&quot;">​</a></h2><p>For properties and other values annotated with [DataTypeAttribute], the following special handling occurs based on the data type:</p><ul><li><code>DataType.MultilineText</code>: Renders with <code>white-space: pre-wrap</code>.</li><li><code>DataType.Password</code>: Renders with a show/hide toggle (hidden by default), showing a fixed number of dot characters when hidden.</li><li><code>DataType.Url</code>: Renders as a clickable link.</li><li><code>DataType.EmailAddress</code>: Renders as a clickable <code>mailto</code> link.</li><li><code>DataType.PhoneNumber</code>: Renders as a clickable <code>tel</code> link.</li><li><code>DataType.ImageUrl</code>: Renders as an <code>img</code> element.</li><li><code>&quot;Color&quot;</code>: Renders a colored dot next to the value, interpreting the field value as a 7-character HTML hex color code.</li></ul>',7);function f(C,g,v,_,b,q){const s=p("Prop");return r(),n("div",null,[i,o(s,{def:"for: string | Property | Value",lang:"ts"}),d,o(s,{def:"model?: Model | DataSource",lang:"ts"}),D,o(s,{def:'format: DisplayOptions["format"]',lang:"ts"}),y,u,o(s,{def:"options: DisplayOptions",lang:"ts"}),h,o(s,{def:`value: any // Vue 2
modelValue: any // Vue 3`,lang:"ts"}),m])}const F=l(c,[["render",f]]);export{E as __pageData,F as default};
