import{_ as o,c as l,I as a,a7 as n,l as e,a as s,D as p,o as r}from"./chunks/framework.BkavzUpE.js";const E=JSON.parse('{"title":"c-input","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/coalesce-vue-vuetify/components/c-input.md","filePath":"stacks/vue/coalesce-vue-vuetify/components/c-input.md"}'),c={name:"stacks/vue/coalesce-vue-vuetify/components/c-input.md"},i=n('<h1 id="c-input" tabindex="-1">c-input <a class="header-anchor" href="#c-input" aria-label="Permalink to &quot;c-input&quot;">​</a></h1><p>A general-purpose input component for <a href="/Coalesce/modeling/model-components/properties.html">Properties</a>, <a href="/Coalesce/modeling/model-components/methods.html#parameters">Method Parameters</a>, and <a href="/Coalesce/modeling/model-components/data-sources.html#custom-parameters">Data Source Parameters</a>. c-input delegates to other components based on the type of value it is bound to. This includes both other <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/overview.html">Coalesce Vuetify Components</a> as well as direct usages of some <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a> components.</p><p>A summary of the components delegated to, by type:</p><table><thead><tr><th>Property/Parameter Type</th><th>Target Component</th></tr></thead><tr><td><p>String</p></td><td><ul><li>Single: <ul><li><a href="https://vuetifyjs.com/en/components/textarea/" target="_blank" rel="noreferrer">v-textarea</a> if attribute <code>textarea</code> is provided to <code>c-input</code> or if <code>[DataType(DataType.MultilineText)]</code> is present in C#.</li><li><a href="https://vuetifyjs.com/en/components/text-fields/" target="_blank" rel="noreferrer">v-text-field</a> otherwise. Additionally, <code>[DataTypeAttribute]</code> values of <code>DataType.EmailAddress</code>, <code>DataType.PhoneNumber</code>, <code>DataType.Password</code>, or <code>&quot;Color&quot;</code> on the field will apply appropriate adjustments to the field.</li></ul></li><li>Multiple: <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-select-values.html">c-select-values</a></li></ul></td></tr><tr><td><p>Number</p></td><td><ul><li>Single: <a href="https://vuetifyjs.com/en/components/text-fields/" target="_blank" rel="noreferrer">v-text-field</a></li><li>Multiple: <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-select-values.html">c-select-values</a></li></ul></td></tr><tr><td><p>Boolean</p></td><td><p><a href="https://vuetifyjs.com/en/components/selection-controls/" target="_blank" rel="noreferrer">v-switch</a>, or <a href="https://vuetifyjs.com/en/components/selection-controls/" target="_blank" rel="noreferrer">v-checkbox</a> if flag attribute <code>checkbox</code> is provided to <code>c-input</code></p></td></tr><tr><td><p>Enum(s)</p></td><td><p><a href="https://vuetifyjs.com/en/components/selects/" target="_blank" rel="noreferrer">v-select</a></p></td></tr><tr><td><p>File(s)</p></td><td><p><a href="https://vuetifyjs.com/en/components/file-inputs/" target="_blank" rel="noreferrer">v-file-input</a></p></td></tr><tr><td><p>Date and/or Time</p></td><td><p><a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-datetime-picker.html">c-datetime-picker</a></p></td></tr><tr><td><p><a href="/Coalesce/modeling/model-types/crud.html">CRUD Model(s)</a></p></td><td><ul><li>Single: <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-select.html">c-select</a></li><li>Multiple: <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-select.html">c-select</a></li><li><a href="/Coalesce/modeling/model-components/attributes/many-to-many.html">[ManyToMany]</a>: <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-select-many-to-many.html">c-select-many-to-many</a></li></ul></td></tr></table><p>Any other unsupported type will simply be displayed with <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-display.html">c-display</a>, unless a <a href="https://vuejs.org/guide/components/slots.html" target="_blank" rel="noreferrer">default slot</a> is provided - in that case, the default slot will be rendered instead.</p><p>When bound to a <a href="/Coalesce/stacks/vue/layers/viewmodels.html">ViewModel</a>, the <a href="/Coalesce/stacks/vue/layers/viewmodels.html#rules-validation">validation rules</a> for the bound property will be obtained from the <a href="/Coalesce/stacks/vue/layers/viewmodels.html#rules-validation">ViewModel</a> and passed to <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a>&#39;s <code>rules</code> prop.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="model-properties" tabindex="-1">Model properties <a class="header-anchor" href="#model-properties" aria-label="Permalink to &quot;Model properties&quot;">​</a></h3><p>Typical usage, providing an object and a property on that object:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;firstName&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>Customizing the <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a> component used:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">comment</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;content&quot;</span><span style="color:#9CDCFE;"> textarea</span><span style="color:#9CDCFE;"> variant</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;solo&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><h3 id="method-parameters" tabindex="-1">Method Parameters <a class="header-anchor" href="#method-parameters" aria-label="Permalink to &quot;Method Parameters&quot;">​</a></h3><p>Binding to <a href="/Coalesce/modeling/model-components/methods.html#parameters">Method Parameters</a> on an <a href="/Coalesce/stacks/vue/layers/api-clients.html#api-callers">API Caller</a> args object:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">setFirstName</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;newName&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>Or, without using an API Caller args object:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">newName</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Person.methods.setFirstName.newName&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> newName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;();</span></span></code></pre></div><h3 id="data-source-parameters" tabindex="-1">Data Source Parameters <a class="header-anchor" href="#data-source-parameters" aria-label="Permalink to &quot;Data Source Parameters&quot;">​</a></h3><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">nameStartsWithSource</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;startsWith&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> nameStartsWithSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#9CDCFE;"> PersonListViewModel</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">NameStartsWith</span><span style="color:#D4D4D4;">();</span></span></code></pre></div><h3 id="other-usages" tabindex="-1">Other usages <a class="header-anchor" href="#other-usages" aria-label="Permalink to &quot;Other usages&quot;">​</a></h3><p>Usage with <code>v-model</code> (this scenario is atypical - the model/for pair of props are used in almost all scenarios):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-input</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Person.firstName&quot;</span><span style="color:#D4D4D4;"> /</span><span style="color:#808080;">&gt;</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><p>In addition to the props below, all other attributes are passed through to the delegated-to component, allowing for full customization of the underlying <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a> component.</p>',26),d=e("p",null,"A metadata specifier for the value being bound. One of:",-1),u=e("ul",null,[e("li",null,[s("A string with the name of the value belonging to "),e("code",null,"model"),s(".")]),e("li",null,"A direct reference to a metadata object."),e("li",null,"A string in dot-notation that starts with a type name.")],-1),h=e("p",null,[s("An object owning the value that was specified by the "),e("code",null,"for"),s(" prop. If provided, the input will be bound to the corresponding property on the "),e("code",null,"model"),s(" object.")],-1),y=e("p",null,[s("If binding the component with "),e("code",null,"v-model"),s(", accepts the "),e("code",null,"value"),s(" part of "),e("code",null,"v-model"),s(".")],-1),m=e("h2",{id:"slots",tabindex:"-1"},[s("Slots "),e("a",{class:"header-anchor",href:"#slots","aria-label":'Permalink to "Slots"'},"​")],-1),D=e("p",null,[e("code",null,"default"),s(" - Used to display fallback content if c-input does not support the type of the value being bound. Generally this does not need to be used, as you should avoid creating c-input components for unsupported types in the first place.")],-1);function f(C,v,g,b,k,_){const t=p("Prop");return r(),l("div",null,[i,a(t,{def:"for?: string | Property | Value",lang:"ts"}),d,u,a(t,{def:"model?: Model | DataSource",lang:"ts"}),h,a(t,{def:`value?: any // Vue 2
modelValue?: any // Vue 3`,lang:"ts"}),y,m,D])}const P=o(c,[["render",f]]);export{E as __pageData,P as default};
