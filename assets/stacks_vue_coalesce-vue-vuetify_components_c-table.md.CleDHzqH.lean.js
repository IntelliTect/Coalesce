import{_ as o,c as t,I as l,a7 as n,l as s,a as e,D as p,o as c}from"./chunks/framework.BkavzUpE.js";const k=JSON.parse('{"title":"c-table","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/coalesce-vue-vuetify/components/c-table.md","filePath":"stacks/vue/coalesce-vue-vuetify/components/c-table.md"}'),r={name:"stacks/vue/coalesce-vue-vuetify/components/c-table.md"},i=n("",8),d=s("p",null,[e("The "),s("a",{href:"/Coalesce/stacks/vue/layers/viewmodels.html"},"ListViewModel"),e(" to display pagination information for.")],-1),D=s("p",null,"If provided, specifies which properties, and their ordering, should be given a column in the table.",-1),y=s("p",null,[e("If not provided, all non-key columns that aren't annotated with "),s("a",{href:"/Coalesce/modeling/model-components/attributes/hidden.html"},"[Hidden(HiddenAttribute.Areas.List)]"),e(" are given a column.")],-1),h=s("p",null,[e("The text contents of one or more extra "),s("code",null,"th"),e(" elements to render in the table. Each header can be defined as either fixed (sticky) or scrollable. Should be used in conjunction with the "),s("code",null,"item-append"),e(" slot.")],-1),u=s("p",null,[e("If true, properties in each table cell will be rendered with "),s("a",{href:"/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-input.html"},"c-input"),e(". Non-editable properties will be rendered in accordance with the value of the "),s("code",null,"admin"),e(" prop.")],-1),m=n("",3);function C(f,b,_,v,g,E){const a=p("Prop");return c(),t("div",null,[i,l(a,{def:"list: ListViewModel",lang:"ts"}),d,l(a,{def:"props?: string[]",lang:"ts"}),D,y,l(a,{def:"extraHeaders?: string[] | {header: string; isFixed: boolean }[]",lang:"ts"}),h,l(a,{def:"editable: boolean = false",lang:"ts"}),u,l(a,{def:"admin: boolean = false",lang:"ts"}),m])}const x=o(r,[["render",C]]);export{k as __pageData,x as default};
