import{d as w,a9 as f,g as A,j as D,x as k,o as p,c as d,l as e,F as E,E as x,m as T,a5 as C,aa as S,P as b,ab as I,t as l,a as o,e as v,h as _,I as P,a7 as g}from"./chunks/framework.BkavzUpE.js";const N="http://json.schemastore.org/template",q="IntelliTect",F=["Web","MVC","Vue"],j="IntelliTect.Coalesce.Vue.Template",M="IntelliTect Coalesce Web App Vue Template",V="coalescevue",$={language:"C#",type:"project"},R="Coalesce.Starter.Vue",L=!0,z={KestrelPortGenerated:{type:"generated",generator:"port",parameters:{fallback:5001},replaces:"5001"},VitePortGenerated:{type:"generated",generator:"port",parameters:{fallback:5002},replaces:"5002"},Identity:{type:"parameter",datatype:"bool",displayName:"ASP.NET Core Identity",description:"Adds ASP.NET Core Identity, providing user storage, authentication, and authorization mechanisms. Also includes a permission-based security model. If you don't include Identity, you'll have to build your auth stack from scratch.",$coalesceLink:"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity"},MicrosoftAuth:{type:"parameter",datatype:"bool",displayName:"Sign-in with Microsoft",description:"Adds Microsoft as an external authentication and account provider for Identity.",$coalesceRequires:["and","Identity"],$coalesceLink:"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins"},GoogleAuth:{type:"parameter",datatype:"bool",displayName:"Sign-in with Google",description:"Adds Google as an external authentication and account provider for Identity.",$coalesceRequires:["and","Identity"],$coalesceLink:"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins"},LocalAuth:{type:"parameter",datatype:"bool",displayName:"Sign-in with Username/Password",description:"Adds infrastructure for supporting individual user accounts with first-party usernames and passwords.",$coalesceRequires:["and","Identity"],$coalesceLink:"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/individual"},UserPictures:{type:"parameter",datatype:"bool",displayName:"User Profile Pictures",description:"Adds infrastructure for acquiring, saving, and displaying user profile pictures.",$coalesceRequires:["and","Identity"]},TrackingBase:{type:"parameter",datatype:"bool",displayName:"Tracking Base",description:"Include a base entity class for tracking created/modified by and date stamps on each entity, and infrastructure for automatically setting those fields."},AuditLogs:{type:"parameter",datatype:"bool",displayName:"Audit Logging",description:"Adds Coalesce audit logging infrastructure, logging each change made to the database through Entity Framework.",$coalesceLink:"/topics/audit-logging.html"},DarkMode:{type:"parameter",datatype:"bool",displayName:"Dark Mode Toggle",description:"Adds features for user-togglable dark mode. Don't use if you're developing a light-only or dark-only application."},ExampleModel:{type:"parameter",datatype:"bool",displayName:"Sample Page",description:"Includes a 'Widget' example model with a basic Vue page, frontend tests, and backend tests."},OpenAPI:{type:"parameter",datatype:"bool",displayName:"OpenAPI",description:"Include configuration to expose an OpenAPI document, and interactive UI with Scalar."},Tenancy:{type:"parameter",datatype:"bool",displayName:"Tenancy: Core",description:"Includes core infrastructure for supporting multiple tenants within one shared database, with shared user accounts.",$coalesceRequires:["and","Identity"]},TenantCreateSelf:{type:"parameter",datatype:"bool",displayName:"Tenancy: Creation by Self-service",description:"Allows any signed in user to create additional tenants.",$coalesceRequires:["and","Tenancy"]},TenantCreateAdmin:{type:"parameter",datatype:"bool",displayName:"Tenancy: Creation by Global Admin",description:"Allows global admins to create new tenants.",$coalesceRequires:["and","Tenancy"]},TenantCreateExternal:{type:"parameter",datatype:"bool",displayName:"Tenancy: Creation/Membership by OIDC",description:"Automatically creates a new tenant for external organizations (Microsoft Entra, Google GSuite), and grants automatic tenant membership to other users within those organizations.",$coalesceRequires:["and","Tenancy",["or","MicrosoftAuth","GoogleAuth"]]},TenantMemberInvites:{type:"parameter",datatype:"bool",displayName:"Tenancy: Membership by Invitation",description:"Allows administrators within a tenant to create invitation links to grant membership to their tenant.",$coalesceRequires:["and","Tenancy"]},AppInsights:{type:"parameter",datatype:"bool",displayName:"Azure Application Insights",description:"Include configuration and integrations for Application Insights, both front-end and back-end.",$coalesceLink:"https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"},EmailAzure:{type:"parameter",datatype:"bool",displayName:"Email: Azure Communication Services",description:"Include basic code for sending email with Azure Communication Services. See instructions in appsettings.json - the official ACS documentation is very confusing.",$coalesceLink:"https://learn.microsoft.com/en-us/azure/communication-services/concepts/email/prepare-email-communication-resource"},EmailSendGrid:{type:"parameter",datatype:"bool",displayName:"Email: Twilio SendGrid",description:"Include basic code for sending email with Twilio SendGrid.",$coalesceLink:"https://www.twilio.com/docs/sendgrid/for-developers/sending-email/email-api-quickstart-for-c"},AzurePipelines:{type:"parameter",datatype:"bool",displayName:"CI: Azure Pipelines",description:"Include an azure-pipelines.yml build template. For deployments, a release pipeline is recommended (which don't support YAML config files).",$coalesceLink:"https://learn.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=net%2Cbrowser"},GithubActions:{type:"parameter",datatype:"bool",displayName:"CI: Github Actions",description:"Include an build-test-and-deploy.yml github action file template.",$coalesceLink:"https://docs.github.com/actions/use-cases-and-examples/deploying/deploying-net-to-azure-app-service"}},G=[{modifiers:[{exclude:["**/[Bb]in/**","**/[Oo]bj/**","**/node_modules/**",".template.config/**/*","**/*.filelist","**/*.user","**/*.g.cs","**/*.g.ts","**/*.lock.json"]},{condition:"!Identity",exclude:["**/ProgramAuthConfiguration.cs","**/Forbidden.vue","**/UserAvatar.vue","**/UserProfile.vue","**/SignIn.*","**/SignOut.*","**/AppClaimTypes.cs","**/ClaimsPrincipalFactory.cs","**/Permission.cs","**/User.cs","**/UserRole.cs","**/Role.cs"]},{condition:"!MicrosoftAuth && !GoogleAuth",exclude:["**/ExternalLogin.*"]},{condition:"!LocalAuth",exclude:["**/ResetPassword.*","**/Register.*","**/ForgotPassword.*","**/ConfirmEmail.*","**/UserManagementService.cs"]},{condition:"!Tenancy",exclude:["**/Tenant.cs","**/DbContextFactoryExtensions.cs","**/TenantMembership.cs","**/ITenanted.cs","**/TenantedBase.cs","**/SelectTenant.*"]},{condition:"!TenantCreateSelf",exclude:["**/CreateTenant.*"]},{condition:"!(TenantMemberInvites || TenantCreateAdmin)",exclude:["**/Invitation.*","**/InvitationService.*","**/UserInvitation.*"]},{condition:"!(UserPictures && Identity)",exclude:["Coalesce.Starter.Vue.Data/Models/UserPhoto.cs"]},{condition:"!AuditLogs",exclude:["**/AuditOperationContext.cs","**/AuditLog.cs"]},{condition:"!TrackingBase",exclude:["**/TrackingBase.cs"]},{condition:"!AppInsights",exclude:["**/AppInsightsTelemetryEnricher.cs"]},{condition:"!GoogleAuth",exclude:["**/google-logo.svg"]},{condition:"!MicrosoftAuth",exclude:["**/microsoft-logo.svg"]},{condition:"!EmailAzure",exclude:["**/AzureEmailOptions.cs","**/AzureEmailService.cs"]},{condition:"!EmailSendGrid",exclude:["**/SendGridEmailOptions.cs","**/SendGridEmailService.cs"]},{condition:"!ExampleModel",exclude:["**/WidgetEdit.vue","**/WidgetEdit.spec.ts","**/Widget.cs"]},{condition:"!OpenAPI",exclude:["**/OpenAPI.vue"]},{condition:"!AzurePipelines",exclude:["**/azure-pipelines.yml"]},{condition:"!GithubActions",exclude:["**/.github"]}]}],B={"**.vue":{operations:[{type:"conditional",configuration:{if:["//#if"],else:["//#else"],elseif:["//#elseif"],endif:["//#endif"],actionableIf:["////#if"],actionableElse:["////#else"],actionableElseif:["////#elseif"],actions:["cStyleUncomment","cStyleReduceComment"],trim:!0,wholeLine:!0,evaluator:"C++"}},{type:"conditional",configuration:{endif:["#endif","<!--#endif"],actionableIf:["<!--#if"],actionableElse:["#else","<!--#else"],actionableElseif:["#elseif","<!--#elseif","#elif","<!--#elif"],trim:!0,wholeLine:!0,evaluator:"C++"}},{type:"replacement",configuration:{original:"//",replacement:"",id:"cStyleUncomment"}},{type:"replacement",configuration:{original:"////",replacement:"//",id:"cStyleReduceComment"}}]}},O={$schema:N,author:q,classifications:F,identity:j,name:M,shortName:V,tags:$,sourceName:R,preferNameDirectory:L,symbols:z,sources:G,SpecialCustomOperations:B},W={class:"template-builder"},U={class:"border",style:{padding:"4px"}},Y=["disabled","value"],J={style:{"flex-grow":"1"}},H={style:{"font-weight":"bold"}},K={style:{"font-size":"18px"}},Q={style:{float:"right"}},X={style:{"font-size":"small"}},Z={style:{"font-size":"12px","line-height":"1.3","margin-top":"4px"}},ee={style:{"white-space":"pre-wrap"}},se=["href"],te=e("hr",null,null,-1),ae={style:{padding:"0 12px 14px",display:"flex","align-items":"center"}},oe=e("span",{style:{"font-weight":"bold","font-size":"18px","padding-right":"8px"}}," Root Namespace: ",-1),ne=w({__name:"TemplateBuilder",props:{options:{},optionsModifiers:{},namespace:{},namespaceModifiers:{}},emits:["update:options","update:namespace"],setup(h){const u=f(h,"options"),r=f(h,"namespace"),c=Object.entries(O.symbols).map(([t,s])=>({...s,key:t,get meetsReqs(){return!("$coalesceRequires"in s)||y(s.$coalesceRequires)},get requires(){return"$coalesceRequires"in s?i(s.$coalesceRequires):null},link:"$coalesceLink"in s?s.$coalesceLink.startsWith("/")?A(s.$coalesceLink):s.$coalesceLink:void 0})).filter(t=>t.type=="parameter"),n=D(["Identity","TrackingBase","DarkMode","AuditLogs","UserPictures","LocalAuth"]);k(n,t=>{u.value=t.map(s=>"--"+s).join(" ")},{immediate:!0});function y(t){if(t[0]=="and")return t.slice(1).every(s=>typeof s=="string"?n.value.includes(s):y(s));if(t[0]=="or")return t.slice(1).some(s=>typeof s=="string"?n.value.includes(s):y(s))}function i(t){if(t[0]=="and")return t.slice(1).map(s=>{var a;return typeof s=="string"?(a=c.find(m=>m.key==s))==null?void 0:a.displayName:"("+i(s)+")"}).join(" and ");if(t[0]=="or")return t.slice(1).map(s=>{var a;return typeof s=="string"?(a=c.find(m=>m.key==s))==null?void 0:a.displayName:"("+i(s)+")"}).join(" or ")}return(t,s)=>(p(),d("div",W,[e("div",U,[(p(!0),d(E,null,x(T(c),a=>(p(),d("label",{key:a.key,style:b({opacity:a.meetsReqs?1:.5}),class:"template-builder-option"},[C(e("input",{type:"checkbox",disabled:!a.meetsReqs,"onUpdate:modelValue":s[0]||(s[0]=m=>n.value=m),value:a.key},null,8,Y),[[I,n.value]]),e("div",J,[e("div",H,[e("span",K,l(a.displayName),1),e("div",Q,[e("code",X,"--"+l(a.key),1)])]),e("div",Z,[e("div",ee,[o(l(a.description)+" ",1),a.link?(p(),d("a",{key:0,href:a.link,target:"_blank"}," Read More",8,se)):v("",!0)]),a.requires?(p(),d("div",{key:0,style:b([{"font-style":"italic","margin-top":"0px",transition:"max-height 0.25s",overflow:"hidden"},{maxHeight:a.meetsReqs?"0px":"30px"}])}," Requires "+l(a.requires),5)):v("",!0)])])],4))),128)),te,e("label",ae,[oe,C(e("input",{type:"text","onUpdate:modelValue":s[1]||(s[1]=a=>r.value=a),placeholder:"MyCompany.MyProject",class:"border",style:{padding:"6px 12px","font-family":"monospace","font-size":"16px","margin-top":"4px","border-color":"var(--v-c-text-2)","background-color":"field","flex-grow":"1"}},null,512),[[S,r.value]])])])]))}}),le=g('<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h2 id="environment-setup" tabindex="-1">Environment Setup <a class="header-anchor" href="#environment-setup" aria-label="Permalink to &quot;Environment Setup&quot;">​</a></h2><p>Before you begin, ensure that you have all the requisite tools installed</p><ul><li>Recent version of the <a href="https://dotnet.microsoft.com/en-us/download" target="_blank" rel="noreferrer">.NET SDK</a>. If you have Visual Studio, you already have this.</li><li>A recent version of <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> (an LTS version is recommended).</li><li>A compatible IDE <ul><li>Recommended: <ul><li>Visual Studio for backend (C#) development</li><li>VS Code for frontend (Vue, TypeScript) development (with <a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar" target="_blank" rel="noreferrer">Vue - Official</a>)</li></ul></li><li>Alternatively, you could use any of these: <ul><li>VS Code for full stack development</li><li>JetBrains Rider</li></ul></li></ul></li></ul><h2 id="creating-a-project" tabindex="-1">Creating a Project <a class="header-anchor" href="#creating-a-project" aria-label="Permalink to &quot;Creating a Project&quot;">​</a></h2><p>The quickest and easiest way to create a new Coalesce Vue application is to use the <code>dotnet new</code> template.</p><p>First, select the features that you would like included in your project, and choose the root .NET namespace of your project:</p>',7),ie=e("code",null,"sources",-1),re=e("code",null,"repos",-1),ce={class:"template-code"},pe={class:"language-sh"},de=e("button",{title:"Copy Code",class:"copy"},null,-1),ue=e("span",{class:"lang"},"sh",-1),ye={class:"shiki dark-plus vp-code"},me=g('<span class="line"><span style="color:#DCDCAA;">dotnet</span><span style="color:#CE9178;"> new</span><span style="color:#CE9178;"> install</span><span style="color:#CE9178;"> IntelliTect.Coalesce.Vue.Template</span></span>',1),he={class:"line"},De=e("span",{style:{color:"#DCDCAA"}},"dotnet",-1),ge=e("span",{style:{color:"#CE9178"}}," new",-1),fe=e("span",{style:{color:"#CE9178"}}," coalescevue",-1),Ce=e("span",{style:{color:"#569CD6"}}," -n",-1),be={style:{color:"#CE9178"}},ve=e("span",{style:{color:"#569CD6"}}," -o",-1),_e={style:{color:"#CE9178"}},we={style:{color:"#CE9178"}},Ae={class:"line"},ke=e("span",{style:{color:"#DCDCAA"}},"cd",-1),Ee={style:{color:"#CE9178"}},xe=e("span",{style:{color:"#569CD6"}},"*",-1),Te=e("span",{style:{color:"#CE9178"}},".Web",-1),Se=e("span",{class:"line"},[e("span",{style:{color:"#DCDCAA"}},"npm"),e("span",{style:{color:"#CE9178"}}," ci")],-1),Ie=e("span",{class:"line"},[e("span",{style:{color:"#DCDCAA"}},"npm"),e("span",{style:{color:"#CE9178"}}," run"),e("span",{style:{color:"#CE9178"}}," lint:fix")],-1),Pe=e("span",{class:"line"},[e("span",{style:{color:"#DCDCAA"}},"dotnet"),e("span",{style:{color:"#CE9178"}}," restore")],-1),Ne=e("span",{class:"line"},[e("span",{style:{color:"#DCDCAA"}},"dotnet"),e("span",{style:{color:"#CE9178"}}," coalesce")],-1),qe=g(`<p>You now have a new Coalesce project! For the recommended development experience, open the <code>.Web</code> project in VS Code and open the root <code>.sln</code> file in Visual Studio.</p><p>If any of the options you chose above require external integrations, you&#39;ll need to configure those - follow the instructions for each section that have been placed into <code>appsettings.json</code>.</p><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><h3 id="data-project" tabindex="-1">Data Project <a class="header-anchor" href="#data-project" aria-label="Permalink to &quot;Data Project&quot;">​</a></h3><p>The data project contains all your <a href="/Coalesce/modeling/model-types/entities.html">entity models</a>, <a href="/Coalesce/modeling/model-types/services.html">services</a>, and most other custom backend code that you&#39;ll write while building your application. The code within it acts as the inputs to Coalesce&#39;s code generation, which outputs generated files into the Web project.</p><h3 id="web-project" tabindex="-1">Web Project <a class="header-anchor" href="#web-project" aria-label="Permalink to &quot;Web Project&quot;">​</a></h3><p>The Web project is an ASP.NET Core application where the generated outputs from Coalesce are placed. It&#39;s also where you&#39;ll build your rich front-end pages that users will use to interact with your application.</p><p>The structure of the Web project follows the conventions of both ASP.NET Core and Vite. The frontend-specific folders are as follows:</p><ul><li><code>/src</code> - Files that should be compiled into your frontend application. CSS/SCSS, TypeScript, Vue SFCs, and so on.</li><li><code>/public</code> - Static assets that should be served directly as files.</li><li><code>/wwwroot</code> - Target for Vite&#39;s compiled output. This directory is excluded from git.</li><li><code>/Api/Generated</code> - Output target for Coalesce&#39;s generated API Controllers.</li><li><code>/Models/Generated</code> - Output target for Coalesce&#39;s <a href="/Coalesce/stacks/agnostic/dtos.html">generated DTOs</a>.</li><li><code>/Controllers/HomeController.cs</code> - Controller that serves the root page of your Vue SPA, both in development and production. Some customizations can be added here.</li></ul><div class="tip custom-block"><p class="custom-block-title">Important</p><p>The frontend build system uses <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>. You are strongly encouraged to read through at least the first few pages of the <a href="https://vitejs.dev/guide/" target="_blank" rel="noreferrer">Vite Documentation</a> before getting started on any development.</p></div><p>During development, no special effort is required to build your frontend code. Coalesce&#39;s <code>UseViteDevelopmentServer</code> in ASP.NET Core will take care of that automatically when the application starts. Just make sure NPM packages have been installed (<code>npm ci</code>).</p><h2 id="data-modeling" tabindex="-1">Data Modeling <a class="header-anchor" href="#data-modeling" aria-label="Permalink to &quot;Data Modeling&quot;">​</a></h2><p>At this point, you can open up the newly-created solution in Visual Studio and run your application. However, your application won&#39;t do much without a data model, so you will probably want to do the following:</p><ul><li><p>Create an initial <a href="/Coalesce/modeling/model-types/entities.html">Data Model</a> by adding EF entity classes to the data project and the corresponding <code>DbSet&lt;&gt;</code> properties to <code>AppDbContext</code>. You will notice that the starter project includes a single model, <code>Widget</code>, to start with. Feel free to change this model or remove it entirely. Read <a href="/Coalesce/modeling/model-types/entities.html">Entity Models</a> for more information about creating a data model.</p></li><li><p>Run <code>dotnet ef migrations add Init</code> (Init can be any name) in the data project to create an initial database migration.</p></li><li><p>Run Coalesce&#39;s code generation by either:</p><ul><li>Running <code>dotnet coalesce</code> in the web project&#39;s root directory (<code>dotnet restore</code> first if you get an error about &quot;command or file was not found&quot;).</li><li>Running the <code>coalesce</code> npm script in the Task Runner Explorer, or in a terminal with <code>npm run coalesce</code>.</li></ul></li></ul><p>You&#39;re now at a point where you can start creating your own pages!</p><h2 id="building-pages-features" tabindex="-1">Building Pages &amp; Features <a class="header-anchor" href="#building-pages-features" aria-label="Permalink to &quot;Building Pages &amp; Features&quot;">​</a></h2><p>Lets say we&#39;ve created a <a href="/Coalesce/modeling/model-types/entities.html">model</a> called <code>Person</code> as follows, and we&#39;ve ran code generation with <code>dotnet coalesce</code>:</p><div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">namespace</span><span style="color:#4EC9B0;"> MyApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Data</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Models</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;">    public</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Person</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> int</span><span style="color:#9CDCFE;"> PersonId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#569CD6;"> string</span><span style="color:#9CDCFE;"> Name</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#569CD6;">        public</span><span style="color:#4EC9B0;"> DateTimeOffset</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">BirthDate</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>We can create a details page for a Person by creating a <a href="https://vuejs.org/guide/scaling-up/sfc.html" target="_blank" rel="noreferrer">Single File Component</a> in <code>MyApplication.Web/src/views/person-details.vue</code>:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">dl</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Name</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Date of Birth</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">c-display</span><span style="color:#D4D4D4;"> :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;birthDate&quot;</span><span style="color:#9CDCFE;"> format</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;M/d/yyyy&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">dl</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt;();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In the code above, <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-display.html">c-display</a> is a component that comes from the <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/overview.html">Vuetify Components</a> for Coalesce.</p><p>For simple property types like <code>string</code> and <code>number</code> you can always use simple template interpolation syntax, but for more complex properties like dates, <a href="/Coalesce/stacks/vue/coalesce-vue-vuetify/components/c-display.html">c-display</a> is handy to use because it includes features like built-in date formatting.</p></div><p>We then need to add route to this new view. In <code>MyApplication.Web/src/router.ts</code>, add a new item to the <code>routes</code> array:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// In the \`routes\` array, add the following item:</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#C8C8C8;">  path</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;/person/:id&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#C8C8C8;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;person-details&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#C8C8C8;">  component</span><span style="color:#D4D4D4;">: () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@/views/person-details.vue&#39;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#C8C8C8;">  props</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">route</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">id:</span><span style="color:#D4D4D4;"> +</span><span style="color:#9CDCFE;">route</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#D4D4D4;">},</span></span></code></pre></div><p>With these pieces in place, we now have a functioning page that will display details about a person. We can start up the application (or, if it was already running, refresh the page) and navigate to <code>/person/1</code> (assuming a person with ID 1 exists - if not, navigate to <code>/admin/Person</code> and create one).</p><p>From this point, you can start adding more fields, more features, and more flair to the page. Check out all the other documentation in the sidebar to see what else Coalesce has to offer, including the <a href="/Coalesce/stacks/vue/overview.html">Vue Overview</a>.</p>`,25),Me=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/getting-started.md","filePath":"stacks/vue/getting-started.md"}'),Fe={name:"stacks/vue/getting-started.md"},Ve=Object.assign(Fe,{setup(h){const u=D(""),r=D(""),c=_(()=>{var i;return((i=r.value)==null?void 0:i.replace(/\.+$/,""))||"MyCompany.MyProject"}),n=_(()=>c.value.split(".").at(-1));function y(){document.querySelector(".template-code .copy").click()}return(i,t)=>(p(),d("div",null,[le,P(ne,{options:u.value,"onUpdate:options":t[0]||(t[0]=s=>u.value=s),namespace:r.value,"onUpdate:namespace":t[1]||(t[1]=s=>r.value=s)},null,8,["options","namespace"]),e("p",null,[o("Next, click the button or manually copy the commands below into your favorite terminal, and execute them! This will create a root folder named "),e("code",null,l(n.value),1),o(" - execute the script in your "),ie,o("/"),re,o("/etc folder.")]),e("p",null,[e("button",{onClick:t[2]||(t[2]=s=>y()),style:{color:"var(--vp-button-brand-text)","background-color":"var(--vp-button-brand-bg)","border-radius":"20px",padding:"0 20px","line-height":"38px","font-size":"14px",display:"block",margin:"auto","font-weight":"600"}},"Copy CLI Commands")]),e("div",ce,[e("div",pe,[de,ue,e("pre",ye,[e("code",null,[me,o(`
`),e("span",he,[De,ge,fe,Ce,e("span",be," "+l(c.value),1),ve,e("span",_e," "+l(n.value),1),e("span",we," "+l(u.value),1)]),o(`
`),e("span",Ae,[ke,e("span",Ee," "+l(n.value)+"/",1),xe,Te]),o(`
`),Se,o(`
`),Ie,o(`
`),Pe,o(`
`),Ne])])])]),qe]))}});export{Me as __pageData,Ve as default};
