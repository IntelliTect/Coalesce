import{_ as o,c as r,I as t,a7 as e,D as s,o as d}from"./chunks/framework.BkavzUpE.js";const v=JSON.parse('{"title":"Vue Metadata Layer","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/layers/metadata.md","filePath":"stacks/vue/layers/metadata.md"}'),n={name:"stacks/vue/layers/metadata.md"},c=e('<h1 id="vue-metadata-layer" tabindex="-1">Vue Metadata Layer <a class="header-anchor" href="#vue-metadata-layer" aria-label="Permalink to &quot;Vue Metadata Layer&quot;">​</a></h1><p>The metadata layer, generated as <code>metadata.g.ts</code>, contains information about the types, properties, methods, and other components of your data model. Because Vue applications are typically compiled into a set of static assets, it is necessary for the frontend code to have a representation of your data model as an analog to the <code>ReflectionRepository</code> that is available at runtime in your .NET app.</p><h2 id="concepts" tabindex="-1">Concepts <a class="header-anchor" href="#concepts" aria-label="Permalink to &quot;Concepts&quot;">​</a></h2><p>The following is a non-exhaustive list of the general concepts used by the metadata layer. The <a href="https://github.com/IntelliTect/Coalesce/blob/dev/src/coalesce-vue/src/metadata.ts" target="_blank" rel="noreferrer">source code of coalesce-vue</a> provides the most exhaustive set of documentation about the metadata layer:</p><h3 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h3><p>All objects in the metadata layer that represent any kind of metadata have, at the very least, a <code>name</code>, the name of the metadata element in code (type names, property names, parameter names, etc). and a <code>displayName</code>, the human-readable form of the name that is suitable for presentation when needed. Names follow the casing convention of their corresponding language elements - types are PascalCased, while other things like properties, methods, and parameters are camelCased.</p><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h3><p>All custom types exposed by your application&#39;s data model will have a Type metadata object generated. This includes both C# classes, and C# enums. Class types include <code>model</code> (for <a href="/Coalesce/modeling/model-types/crud.html">CRUD Models</a>) and <code>object</code> (for <a href="/Coalesce/modeling/model-types/external-types.html">External Types</a>).</p><h3 id="value" tabindex="-1">Value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;Value&quot;">​</a></h3><p>In the metadata layer, a Value is the usage of a type. This could be any type - strings, numbers, enums, classes, or even void. Values can be found in the collection of an object&#39;s properties, a method&#39;s parameters or return value, or as a data source&#39;s parameters.</p><p>All values have the following properties:</p>',11),l=e("<p>Type could be a language primitive like <code>string</code> or <code>number</code>, a non-primitive JavaScript type (<code>date</code>, <code>file</code>), or in the case of a custom Type, the type kind of that type (<code>model</code>, <code>enum</code>, <code>object</code>). For custom types, an additional property <code>typeDef</code> will refer to the Type metadata for that type.</p>",1),i=e('<p>Role represents what purpose the value serves in a relational model. Either <code>value</code> (the default - no relational role), <code>primaryKey</code>, <code>foreignKey</code>, <code>referenceNavigation</code>, or <code>collectionNavigation</code>.</p><h3 id="property" tabindex="-1">Property <a class="header-anchor" href="#property" aria-label="Permalink to &quot;Property&quot;">​</a></h3><p>A Property is a more refined Value that contains a number of additional fields based on the <code>role</code> of the property.</p><h3 id="domain" tabindex="-1">Domain <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;Domain&quot;">​</a></h3><p>The type of the default export of the generated metadata. Serves as a single root from which all other metadata can be accessed. Contains fields <code>types</code>, <code>enums</code>, and <code>services</code> as organizing structures for the different kinds of custom types.</p>',5);function p(h,m,u,y,f,_){const a=s("Prop");return d(),r("div",null,[c,t(a,{def:"type: TypeDiscriminator",lang:"ts"}),l,t(a,{def:"role: ValueRole",lang:"ts"}),i])}const T=o(n,[["render",p]]);export{v as __pageData,T as default};
