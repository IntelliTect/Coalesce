import{_ as n,c as l,I as s,a7 as o,l as e,a,D as r,o as i}from"./chunks/framework.BkavzUpE.js";const Oe=JSON.parse('{"title":"Vue ViewModel Layer","description":"","frontmatter":{},"headers":[],"relativePath":"stacks/vue/layers/viewmodels.md","filePath":"stacks/vue/layers/viewmodels.md"}'),d={name:"stacks/vue/layers/viewmodels.md"},c=o("",23),p=e("p",null,[a("The metadata object from the "),e("a",{href:"/Coalesce/stacks/vue/layers/metadata.html"},"Metadata Layer"),a(" layer for the type represented by the ViewModel.")],-1),h=e("p",null,"An immutable number that is unique among all ViewModel instances, regardless of type.",-1),u=e("p",null,[a("Useful for uniquely identifying instances with "),e("code",null,':key="vm.$stableId"'),a(" in a Vue component, especially for instances that lack a primary key.")],-1),m=e("p",null,"A getter/setter property that wraps the primary key of the model. Used to interact with the primary key of any ViewModel in a polymorphic way.",-1),f=e("p",null,"Returns a string representation of the object, or one of its properties if specified, suitable for display.",-1),y=e("p",null,"This is especially useful for displaying enum properties, navigation properties, date properties, and other complex values.",-1),g=e("p",null,[a("Creates a new instance of an item for the specified child model collection, adds it to that collection, and returns the item. If "),e("code",null,"initialDirtyData"),a(" is provided, it will be loaded into the new instance with "),e("code",null,"$loadDirtyData()"),a(".")],-1),v=e("h3",{id:"loading-parameters",tabindex:"-1"},[a("Loading & Parameters "),e("a",{class:"header-anchor",href:"#loading-parameters","aria-label":'Permalink to "Loading & Parameters"'},"​")],-1),b=o("",1),_=e("p",null,[a("An object containing the "),e("a",{href:"/Coalesce/modeling/model-components/data-sources.html#standard-parameters"},"Standard Parameters"),a(" to be used for the "),e("code",null,"$load"),a(", "),e("code",null,"$save"),a(", "),e("code",null,"$bulkSave"),a(", and "),e("code",null,"$delete"),a(" API callers.")],-1),w=e("p",null,[a("Getter/setter wrapper around "),e("code",null,"$params.dataSource"),a(". Takes an instance of a "),e("a",{href:"/Coalesce/modeling/model-components/data-sources.html"},"Data Source"),a(" class "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html"},"generated in the Model Layer"),a(".")],-1),D=e("p",null,[a("Getter/setter wrapper around "),e("code",null,"$params.includes"),a(". See "),e("a",{href:"/Coalesce/concepts/includes.html"},"Includes String"),a(" for more information.")],-1),C=e("p",null,"Loads data from the provided model into the current ViewModel, and then clears all dirty flags.",-1),A=e("p",null,"Data is loaded recursively into all related ViewModel instances, preserving existing instances whose primary keys match the incoming data.",-1),P=e("p",null,[a("If auto-save is enabled, only non-dirty properties are updated. This prevents user input that is pending a save from being overwritten by the response from an auto-save "),e("code",null,"/save"),a(" request.")],-1),k=e("p",null,[a("If "),e("code",null,"purgeUnsaved"),a(" is true, items without a primary key will be dropped from collection navigation properties. This is used by the "),e("code",null,"$load"),a(" caller in order to fully reset the object graph with the state from the server.")],-1),T=e("p",null,[a("Same as "),e("code",null,"$loadCleanData"),a(", but does not clear any existing dirty flags, nor does it clear any dirty flags that will be set while mutating the data properties of any ViewModel instance that gets loaded.")],-1),$=e("p",null,[a("Create a new instance of the ViewModel, loading the given initial data with "),e("code",null,"$loadDirtyData()"),a(" if provided.")],-1),S=e("h3",{id:"saving-and-deleting",tabindex:"-1"},[a("Saving and Deleting "),e("a",{class:"header-anchor",href:"#saving-and-deleting","aria-label":'Permalink to "Saving and Deleting"'},"​")],-1),M=o("",6),V=e("p",null,[a("An "),e("a",{href:"/Coalesce/stacks/vue/layers/api-clients.html#api-callers"},"API Caller"),a(" for the "),e("code",null,"/delete"),a(" endpoint. Uses the instance's "),e("code",null,"$params"),a(" object for the "),e("a",{href:"/Coalesce/modeling/model-components/data-sources.html#standard-parameters"},"Standard Parameters"),a(".")],-1),I=e("p",null,"If the object was loaded as a child of a collection, it will be removed from that collection upon being deleted. Note that ViewModels currently only support tracking of a single parent collection, so if an object is programmatically added to additional collections, it will only be removed from one of them upon delete.",-1),x=e("p",null,[a("Default "),e("code",null,"true"),a(" - controls if a ViewModel will be loaded with the data from the model returned by the "),e("code",null,"/save"),a(" endpoint when saved with the "),e("code",null,"$save"),a(" API caller. There is seldom any reason to disable this.")],-1),E=e("p",null,[a("When "),e("code",null,"$save.isLoading == true"),a(", contains the properties of the model currently being saved by "),e("code",null,"$save"),a(" (including auto-saves). Does not include non-dirty properties even if "),e("code",null,"$saveMode == 'whole'"),a(".")],-1),R=e("p",null,"This can be used to make per-property UI state changes during saves - for example, displaying progress indicators on/near individual inputs, or disabling input controls.",-1),q=o("",2),j=e("p",null,"Returns true if the given property is flagged as dirty.",-1),B=e("p",null,"Manually set the dirty flag of the given property to the desired state. This seldom needs to be done explicitly, as mutating a property will automatically flag it as dirty.",-1),L=e("p",null,[a("If "),e("code",null,"dirty"),a(" is true and "),e("code",null,"triggerAutoSave"),a(" is false, auto-save (if enabled) will not be immediately triggered for this specific flag change. Note that a future change to any other property's dirty flag will still trigger a save of all dirty properties.")],-1),O=e("p",null,"Getter/setter that summarizes the model's property-level dirty flags. Returns true if any properties are dirty.",-1),F=e("p",null,"When set to false, all property dirty flags are cleared. When set to true, all properties are marked as dirty.",-1),N=e("h3",{id:"auto-save",tabindex:"-1"},[a("Auto-save "),e("a",{class:"header-anchor",href:"#auto-save","aria-label":'Permalink to "Auto-save"'},"​")],-1),G=o("",2),U=e("p",null,[a("Turns off auto-saving of the instance. Does not recursively disable auto-saves on related instances if "),e("code",null,"deep"),a(" was used when auto-save was enabled.")],-1),W=e("p",null,"Returns true if auto-save is currently active on the instance.",-1),z=e("h3",{id:"bulk-saves",tabindex:"-1"},[a("Bulk saves "),e("a",{class:"header-anchor",href:"#bulk-saves","aria-label":'Permalink to "Bulk saves"'},"​")],-1),K=o("",7),X=e("p",null,[a("Returns the payload that will be used for the "),e("code",null,"$bulkSave"),a(" operation.")],-1),J=e("p",null,[a("Useful for driving UI state, like preemptively showing errors, or determining if there are any objects with pending modifications. If you are using this to drive UI state, it is strongly recommended to wrap this call in a "),e("code",null,"computed"),a(" in your component to reduce excessive invocations.")],-1),Y=e("p",null,"Removes the item from its parent collection (if it is in a collection), and marks the item for deletion in the next bulk save.",-1),H=e("p",null,[a("Returns true if the instance was previously removed by calling "),e("code",null,"$remove()"),a(".")],-1),Q=e("h3",{id:"rules-validation",tabindex:"-1"},[a("Rules/Validation "),e("a",{class:"header-anchor",href:"#rules-validation","aria-label":'Permalink to "Rules/Validation"'},"​")],-1),Z=e("p",null,[a("Add a custom validation rule to the ViewModel for the specified property. "),e("code",null,"identifier"),a(" should be a short, unique slug that describes the rule; it is not displayed in the UI, but is used if you wish to later remove the rule with "),e("code",null,"$removeRule()"),a(".")],-1),ee=e("p",null,[a("The function you provide should take a single argument that contains the current value of the property, and should either return "),e("code",null,"true"),a(" to indicate that the validation rule has succeeded, or a string that will be displayed as an error message to the user.")],-1),ae=e("p",null,[a("Any failing validation rules on a ViewModel will prevent that ViewModel's "),e("code",null,"$save"),a(" caller from being invoked.")],-1),te=e("p",null,"Remove a validation rule from the ViewModel for the specified property and rule identifier.",-1),se=e("p",null,[a("This can be used to remove either a rule that was provided by the generated "),e("a",{href:"/Coalesce/stacks/vue/layers/metadata.html"},"Metadata Layer"),a(", or a custom rule that was added by "),e("code",null,"$addRule"),a(". Reference your generated metadata file "),e("code",null,"metadata.g.ts"),a(" to see any generated rules and the identifiers they use.")],-1),oe=e("p",null,[a("Returns an array of active rule functions for the specified property, or "),e("code",null,"undefined"),a(" if the property has no active validation rules.")],-1),ne=e("p",null,[a("Returns a "),e("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noreferrer"},"generator"),a(" that provides all error messages for either a specific property (if provided) or the entire model (if no prop argument is provided).")],-1),le=e("div",{class:"tip custom-block"},[e("p",{class:"custom-block-title"},"TIP"),e("p",null,[a("You can obtain an array from a generator with "),e("code",null,"Array.from(vm.$getErrors())"),a(" or "),e("code",null,"[...vm.$getErrors()]")])],-1),re=e("p",null,"Indicates if any properties have validation errors.",-1),ie=e("h2",{id:"listviewmodels",tabindex:"-1"},[a("ListViewModels "),e("a",{class:"header-anchor",href:"#listviewmodels","aria-label":'Permalink to "ListViewModels"'},"​")],-1),de=e("p",null,[a("The following members can be found on the generated ListViewModels, exported from "),e("code",null,"viewmodels.g.ts"),a(" as "),e("code",null,"*TypeName*ListViewModel"),a(".")],-1),ce=e("h3",{id:"data-properties",tabindex:"-1"},[a("Data Properties "),e("a",{class:"header-anchor",href:"#data-properties","aria-label":'Permalink to "Data Properties"'},"​")],-1),pe=e("p",null,[a("Collection holding the ViewModel instances from the last successful invocation of the "),e("code",null,"$load"),a(),e("a",{href:"/Coalesce/stacks/vue/layers/api-clients.html#api-callers"},"API Caller"),a(".")],-1),he=e("p",null,[a("Collection holding plain Model instances from the last successful invocation of the "),e("code",null,"$load"),a(),e("a",{href:"/Coalesce/stacks/vue/layers/api-clients.html#api-callers"},"API Caller"),a(".")],-1),ue=e("p",null,[a("When model-only mode is enabled, "),e("code",null,"$items"),a(" will not be populated with ViewModel instances. Result can instead be read from "),e("code",null,"$modelItems"),a(". This mode allows much better performance when loading large quantities of data, especially in read-only contexts where the features of ViewModel instances aren't needed.")],-1),me=e("h3",{id:"parameters-api-callers",tabindex:"-1"},[a("Parameters & API Callers "),e("a",{class:"header-anchor",href:"#parameters-api-callers","aria-label":'Permalink to "Parameters & API Callers"'},"​")],-1),fe=e("p",null,[a("An object containing the "),e("a",{href:"/Coalesce/modeling/model-components/data-sources.html#standard-parameters"},"Standard Parameters"),a(" to be used for the "),e("code",null,"$load"),a(" and "),e("code",null,"$count"),a(" API callers.")],-1),ye=e("p",null,[a("Getter/setter wrapper around "),e("code",null,"$params.dataSource"),a(". Takes an instance of a "),e("a",{href:"/Coalesce/modeling/model-components/data-sources.html"},"Data Source"),a(" class "),e("a",{href:"/Coalesce/stacks/vue/layers/models.html"},"generated in the Model Layer"),a(".")],-1),ge=e("p",null,[a("Getter/setter wrapper around "),e("code",null,"$params.includes"),a(". See "),e("a",{href:"/Coalesce/concepts/includes.html"},"Includes String"),a(" for more information.")],-1),ve=o("",2),be=o("",2),_e=e("p",null,[a("Properties which indicate if "),e("code",null,"$page"),a(" can be decremented or incremented, respectively. "),e("code",null,"$pageCount"),a(" and "),e("code",null,"$page"),a(" are used to make this determination.")],-1),we=e("p",null,[a("Methods that will decrement or increment "),e("code",null,"$page"),a(", respectively. Each does nothing if there is no previous or next page as returned by "),e("code",null,"$hasPreviousPage"),a(" and "),e("code",null,"$hasNextPage"),a(".")],-1),De=e("p",null,[a("Getter/setter wrapper for "),e("code",null,"$params.page"),a(". Controls the page that will be requested on the next invocation of "),e("code",null,"$load"),a(".")],-1),Ce=e("p",null,[a("Getter/setter wrapper for "),e("code",null,"$params.pageSize"),a(". Controls the page that will be requested on the next invocation of "),e("code",null,"$load"),a(".")],-1),Ae=e("p",null,[a("Shorthand for "),e("code",null,"$load.pageCount"),a(" - returns the page count reported by the last successful invocation of "),e("code",null,"$load"),a(".")],-1),Pe=e("h3",{id:"auto-load",tabindex:"-1"},[a("Auto-Load "),e("a",{class:"header-anchor",href:"#auto-load","aria-label":'Permalink to "Auto-Load"'},"​")],-1),ke=o("",2),Te=e("p",null,"Manually turns off auto-loading of the instance.",-1),$e=e("h3",{id:"auto-save-1",tabindex:"-1"},[a("Auto-save "),e("a",{class:"header-anchor",href:"#auto-save-1","aria-label":'Permalink to "Auto-save"'},"​")],-1),Se=e("p",null,[a("Enables auto-save for the items in the list, propagating to new items as they're added or loaded. See "),e("a",{href:"#member-item-autosave"},"ViewModel auto-save documentation"),a(" for more details.")],-1),Me=e("p",null,[a("Turns off auto-saving of the items in the list, and turns of propagation of auto-save to any future items if auto-save was previously turned on for the list. Only affects items that are currently in the list's "),e("code",null,"$items"),a(".")],-1),Ve=o("",9);function Ie(xe,Ee,Re,qe,je,Be){const t=r("Prop");return i(),l("div",null,[c,s(t,{def:"readonly $metadata: ModelType",lang:"ts"}),p,s(t,{def:"readonly $stableId: number",lang:"ts"}),h,u,s(t,{def:"$primaryKey: string | number",lang:"ts"}),m,s(t,{def:"$display(prop?: string | Property): string",lang:"ts"}),f,y,s(t,{def:"$addChild(prop: string | ModelCollectionNavigationProperty, initialDirtyData?: {})",lang:"ts"}),g,v,s(t,{def:`$load: ItemApiState;
$load(id?: TKey) => ItemResultPromise<TModel>;`,lang:"ts",idPrefix:"member-item"}),b,s(t,{def:"$params: DataSourceParameters",lang:"ts",idPrefix:"member-item"}),_,s(t,{def:"$dataSource: DataSource",lang:"ts",idPrefix:"member-item"}),w,s(t,{def:"$includes: string | null",lang:"ts",idPrefix:"member-item"}),D,s(t,{def:"$loadCleanData(source: {} | TModel, purgeUnsaved = false)",lang:"ts"}),C,A,P,k,s(t,{def:"$loadDirtyData(source: {} | TModel)",lang:"ts"}),T,s(t,{def:"constructor(initialDirtyData?: {} | TModel | null)",lang:"ts"}),$,S,s(t,{def:`$save: ItemApiState;
$save(overrideProps?: Partial<TModel>) => ItemResultPromise<TModel>;`,lang:"ts",idPrefix:"member-item"}),M,s(t,{def:`$delete: ItemApiState;
$delete() => ItemResultPromise<TModel>;`,lang:"ts",idPrefix:"member-item"}),V,I,s(t,{def:"$loadResponseFromSaves: boolean",lang:"ts"}),x,s(t,{def:"$savingProps: ReadonlySet<string>",lang:"ts"}),E,R,s(t,{def:"$saveMode: 'surgical' | 'whole'",lang:"ts"}),q,s(t,{def:"$getPropDirty(propName: string): boolean",lang:"ts"}),j,s(t,{def:"$setPropDirty(propName: string, dirty: boolean = true, triggerAutoSave = true)",lang:"ts"}),B,L,s(t,{def:"$isDirty: boolean",lang:"ts"}),O,F,N,s(t,{def:`// Vue Options API
$startAutoSave(vue: Vue, options: AutoSaveOptions<this> = {})
 
// Vue Composition API
$useAutoSave(options: AutoSaveOptions<this> = {})`,lang:"ts",id:"member-item-autosave"}),G,s(t,{def:"$stopAutoSave(): void",lang:"ts"}),U,s(t,{def:"readonly $isAutoSaveEnabled: boolean",lang:"ts"}),W,z,s(t,{def:`$bulkSave: ItemApiState;
$bulkSave(options: BulkSaveOptions) => ItemResultPromise<TModel>;`,lang:"ts"}),K,s(t,{def:`$bulkSavePreview(options?: BulkSaveOptions) => {
  isDirty: boolean;
  errors: string[];
  items: BulkSaveRequestItem[];
  rawItems: BulkSaveRequestRawItem[];
}`,lang:"ts"}),X,J,s(t,{def:"$remove(): void",lang:"ts"}),Y,s(t,{def:"readonly $isRemoved: boolean",lang:"ts"}),H,Q,s(t,{def:"$addRule(prop: string | Property, identifier: string, rule: (val: any) => true | string)",lang:"ts"}),Z,ee,ae,s(t,{def:"$removeRule(prop: string | Property, identifier: string)",lang:"ts"}),te,se,s(t,{def:"$getRules(prop: string | Property): ((val: any) => string | true)[]",lang:"ts"}),oe,s(t,{def:"$getErrors(prop?: string | Property): Generator<string>",lang:"ts"}),ne,le,s(t,{def:"readonly $hasError: boolean",lang:"ts"}),re,ie,de,ce,s(t,{def:"readonly $items: T[]",lang:"ts"}),pe,s(t,{def:"readonly $modelItems: T[]",lang:"ts"}),he,s(t,{def:"$modelOnlyMode: boolean",lang:"ts"}),ue,me,s(t,{def:"$params: ListParameters",lang:"ts",idPrefix:"member-list"}),fe,s(t,{def:"$dataSource: DataSource",lang:"ts",idPrefix:"member-list"}),ye,s(t,{def:"$includes: string | null",lang:"ts",idPrefix:"member-list"}),ge,s(t,{def:`$load: ListApiState;
$load() => ListResultPromise<TModel>`,lang:"ts",idPrefix:"member-list"}),ve,s(t,{def:`$count: ItemApiState;
$count() => ItemResultPromise<number>`,lang:"ts"}),be,s(t,{def:`readonly $hasPreviousPage: boolean 
readonly $hasNextPage: boolean`,lang:"ts"}),_e,s(t,{def:`$previousPage(): void 
$nextPage(): void`,lang:"ts"}),we,s(t,{def:"$page: number",lang:"ts"}),De,s(t,{def:"$pageSize: number",lang:"ts"}),Ce,s(t,{def:"readonly $pageCount: number",lang:"ts"}),Ae,Pe,s(t,{def:`// Vue Options API
$startAutoLoad(vue: Vue, options: AutoLoadOptions<this> = {})
 
// Vue Composition API
$useAutoLoad(options: AutoLoadOptions<this> = {})`,lang:"ts",id:"member-list-autoLoad"}),ke,s(t,{def:"$stopAutoLoad()",lang:"ts"}),Te,$e,s(t,{def:`// Vue Options API
$startAutoSave(vue: Vue, options: AutoSaveOptions<this> = {})
 
// Vue Composition API
$useAutoSave(options: AutoSaveOptions<this> = {})`,lang:"ts",id:"member-list-autosave"}),Se,s(t,{def:"$stopAutoSave(): void",lang:"ts"}),Me,s(t,{def:"readonly $isAutoSaveEnabled: boolean",lang:"ts"}),Ve])}const Fe=n(d,[["render",Ie]]);export{Oe as __pageData,Fe as default};
