import{_ as s,c as n,o as a,a7 as l}from"./chunks/framework.BkavzUpE.js";const d=JSON.parse('{"title":"Vue 2 to Vue 3","description":"","frontmatter":{"pageClass":"wide-page"},"headers":[],"relativePath":"stacks/vue/vue2-to-vue3.md","filePath":"stacks/vue/vue2-to-vue3.md"}'),p={name:"stacks/vue/vue2-to-vue3.md"},o=l(`<h1 id="vue-2-to-vue-3" tabindex="-1">Vue 2 to Vue 3 <a class="header-anchor" href="#vue-2-to-vue-3" aria-label="Permalink to &quot;Vue 2 to Vue 3&quot;">​</a></h1><p>If you&#39;re already experienced with Vue 2 but are new to Vue 3, or if you&#39;re migrating an existing Vue 2 app to Vue 3, you should first read through the <a href="https://v3-migration.vuejs.org/" target="_blank" rel="noreferrer">official migration guide</a>.</p><p>Vuetify also offers a <a href="https://vuetifyjs.com/en/getting-started/upgrade-guide/" target="_blank" rel="noreferrer">migration guide</a> to upgrade from Vuetify 2 to Vuetify 3.</p><p>If you&#39;re new to Vue entirely, check out the rest of Vue docs and <a href="https://vuejs.org/guide/introduction.html#pick-your-learning-path" target="_blank" rel="noreferrer">pick your learning path</a>.</p><h2 id="coalesce-upgrade-steps" tabindex="-1">Coalesce Upgrade Steps <a class="header-anchor" href="#coalesce-upgrade-steps" aria-label="Permalink to &quot;Coalesce Upgrade Steps&quot;">​</a></h2><p>The changes specific to Coalesce when migrating from Vue2 to Vue3 are pretty minimal. Most of your work will be in following the <a href="https://v3-migration.vuejs.org/" target="_blank" rel="noreferrer">Vue 3 Migration Guide</a> and the <a href="https://vuetifyjs.com/en/getting-started/upgrade-guide/" target="_blank" rel="noreferrer">Vuetify 3 Migration Guide</a>.</p><p>The table below contains the Coalesce-specific changes when migrating to Vue 3. However, the easiest migration path may be to disregard the table below and instead, <a href="/Coalesce/stacks/vue/getting-started.html#creating-a-project">instantiate the Coalesce Vue template</a> or <a href="https://github.com/IntelliTect/Coalesce.Vue.Template/tree/master/content/Coalesce.Starter.Vue.Web" target="_blank" rel="noreferrer">look at it on GitHub</a> and compare individual files between your project and the template side by side and ingest the changes that you observe.</p><table><thead><tr><th width="150px">Location</th><th>Old (Vue 2)</th><th>New (Vue 3)</th></tr></thead><tr><td><p>package.json</p></td><td style="vertical-align:top;"><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;dependencies&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;coalesce-vue-vuetify2&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;x&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;dependencies&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;coalesce-vue-vuetify3&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;x&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></td></tr><tr><td><p>vite.config.ts</p></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CoalesceVuetifyResolver</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify2/lib/build&quot;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CoalesceVuetifyResolver</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify3/build&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Custom SASS options and \`optimizeDeps\` configuration can be removed</span></span>
<span class="line"><span style="color:#6A9955;">// since Vuetify3 no longer uses deprecated sass features,</span></span>
<span class="line"><span style="color:#6A9955;">// and pre-bundling styles no longer has appreciable benefit.</span></span></code></pre></div></td></tr><tr><td><p>main.ts</p></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify2/dist/coalesce-vue-vuetify.css&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Either of these:</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> CoalesceVuetify</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;coalesce-vue-vuetify2/lib&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> CoalesceVuetify</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;coalesce-vue-vuetify2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">CoalesceVuetify</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  metadata:</span><span style="color:#9CDCFE;"> $metadata</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify3/styles.css&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createCoalesceVuetify</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify3&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> coalesceVuetify</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createCoalesceVuetify</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  metadata:</span><span style="color:#9CDCFE;"> $metadata</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">coalesceVuetify</span><span style="color:#D4D4D4;">);</span></span></code></pre></div></td></tr><tr><td><p>router.ts</p></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// Either of these:</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CAdminTablePage</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">CAdminEditorPage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;coalesce-vue-vuetify2/lib&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CAdminTablePage</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">CAdminEditorPage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;coalesce-vue-vuetify2&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">CAdminEditorPage</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">CAdminTablePage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;coalesce-vue-vuetify3&quot;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></td></tr><tr><td><p>Vitest/Jest tests</p></td><td style="vertical-align:top;"><p>If you had a global test setup file performing Vue configuration, you can likely remove it entirely, or at least remove the parts that configure Vue. Vue3 does not operate on global configuration like Vue2 did.</p></td><td style="vertical-align:top;"><p>See <a href="https://github.com/IntelliTect/Coalesce.Vue.Template/blob/master/content/Coalesce.Starter.Vue.Web/src/test-utils.ts" target="_blank" rel="noreferrer">test-utils.ts</a> and <a href="https://github.com/IntelliTect/Coalesce.Vue.Template/blob/master/content/Coalesce.Starter.Vue.Web/src/components/HelloWorld.spec.ts" target="_blank" rel="noreferrer">HelloWorld.spec.ts</a> in the template for examples of Vue3 component testing.</p></td></tr></table><h2 id="from-class-components-to-script-setup" tabindex="-1">From Class Components to <code>&lt;script setup&gt;</code> <a class="header-anchor" href="#from-class-components-to-script-setup" aria-label="Permalink to &quot;From Class Components to \`&lt;script setup&gt;\`&quot;">​</a></h2><p>The components in the Coalesce template for Vue 3 have switched from <code>vue-class-component</code> to Vue Composition API with <code>&lt;script setup&gt;</code>, the <a href="https://vuejs.org/guide/introduction.html#which-to-choose" target="_blank" rel="noreferrer">official recommendation</a> for building full Vue 3 applications.</p><p>If you&#39;re used to writing components in Vue 2 with <code>vue-class-component</code> and <code>vue-property-decorator</code>, you can use this table of comparisons as a quick reference of what the equivalent features are using <a href="https://vuejs.org/api/sfc-script-setup.html" target="_blank" rel="noreferrer"><code>&lt;script setup&gt;</code></a> and <a href="https://vuejs.org/guide/extras/composition-api-faq.html" target="_blank" rel="noreferrer">Vue Composition API</a>. That said, this is not a replacement for learning and understanding the composition API. You should read the <a href="https://vuejs.org/guide/extras/composition-api-faq.html" target="_blank" rel="noreferrer">Composition API FAQ</a> as well as the <a href="https://vuejs.org/guide/essentials/reactivity-fundamentals.html" target="_blank" rel="noreferrer">Reactivity Fundamentals</a> documentation (make sure to set the API preference in the top left to Composition!).</p><p>If you&#39;d like to continue using class components with Vue 3 (e.g. upgrading an existing project where rewriting all components is not feasible), you can try switching to <a href="https://www.npmjs.com/package/vue-facing-decorator" target="_blank" rel="noreferrer"><code>vue-facing-decorator</code></a>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The examples below assume that <code>unplugin-auto-import</code> is being used (included in the Coalesce Vue3 template), eliminating the need to manually import common Vue Composition API functions.</p></div><table><thead><tr><th width="150px">Feature</th><th>Class Component</th><th>Script Setup</th></tr></thead><tr><td><p>Coalesce <code>ViewModel</code> and <code>ListViewModel</code> usage</p></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;vue-property-decorator&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">PersonListViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Vue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> list</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonListViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  async</span><span style="color:#DCDCAA;"> created</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">    person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$startAutoSave</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">    list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$startAutoLoad</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">PersonListViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> list</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonListViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$useAutoSave</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$useAutoLoad</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// If you need to await an async operation during component creation, </span></span>
<span class="line"><span style="color:#6A9955;">// use an IIFE so that the component mount is not delayed.</span></span>
<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> created</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">})();</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td></tr><tr><td><p>@Prop, @Watch</p></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Prop</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Watch</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;vue-property-decorator&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Vue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">Prop</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">default:</span><span style="color:#CE9178;"> &quot;Student&quot;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">  label</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">Prop</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">required:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">  student</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">ApplicationUserViewModel</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">Watch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;label&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">  labelChanged</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newVal</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldVal</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`label changed. new:</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">newVal</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, old:</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">oldVal</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">withDefaults</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">&lt;{</span></span>
<span class="line"><span style="color:#9CDCFE;">  label</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  student</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">ApplicationUserViewModel</span></span>
<span class="line"><span style="color:#D4D4D4;">}&gt;(), { </span><span style="color:#9CDCFE;">label:</span><span style="color:#CE9178;"> &#39;Student&#39;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">newVal</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">oldVal</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`label changed. new:</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">newVal</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, old:</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">oldVal</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td></tr><tr><td><p>Reactive data</p></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;vue-property-decorator&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Vue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> checked</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> items</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Foo&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">checked:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">, },</span></span>
<span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Bar&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">checked:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">, }</span></span>
<span class="line"><span style="color:#D4D4D4;">  ]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Properties on coalesce-generated ViewModels have built in reactivity </span></span>
<span class="line"><span style="color:#6A9955;">// and don&#39;t need to be wrapped ref/reactive unless you&#39;re going to replace </span></span>
<span class="line"><span style="color:#6A9955;">// the entire top level object with a different instance.</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> checked</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> items</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">reactive</span><span style="color:#D4D4D4;">([</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Foo&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">checked:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">, },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Bar&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">checked:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">, }</span></span>
<span class="line"><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td></tr><tr><td><p>Computed values</p></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;vue-property-decorator&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Vue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  public</span><span style="color:#9CDCFE;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  get</span><span style="color:#DCDCAA;"> fullName</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#CE9178;"> \`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#569CD6;">}</span><span style="color:#569CD6;"> \${</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PersonViewModel</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@/viewmodels.g&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PersonViewModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fullName</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> \`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">firstName</span><span style="color:#569CD6;">}</span><span style="color:#569CD6;"> \${</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lastName</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td></tr><tr><td><p>$emit, methods</p></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#D4D4D4;">    :</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#DCDCAA;">inputChanged</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">$event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#D4D4D4;">&quot;</span></span>
<span class="line"><span style="color:#808080;">  /&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;vue-property-decorator&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#D4D4D4;">({})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> MyComponent</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Vue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">Prop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  value</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  inputChanged</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;update:input&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td><td style="vertical-align:top;"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#D4D4D4;">    :</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">modelValue</span><span style="color:#D4D4D4;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#DCDCAA;">inputChanged</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">$event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> HTMLInputElement</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#D4D4D4;">&quot;</span></span>
<span class="line"><span style="color:#808080;">  /&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#9CDCFE;"> setup</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">modelValue</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;"> }&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// This may seem tedious, but it enables full Typescript intellisense!</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> emit</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineEmits</span><span style="color:#D4D4D4;">&lt;{</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;update:modelValue&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> inputChanged</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">  emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;update:modelValue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></td></tr></table>`,14),e=[o];function t(c,r,D,y,i,C){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
