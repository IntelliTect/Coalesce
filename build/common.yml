jobs:
  meta:
    runs-on: ubuntu-latest

    steps:
    - run: Write-Host "##vso[build.addbuildtag]$(BuildTag)" # TODO
      shell: pwsh
      displayName: "Add Build Tag"

    - run: >
        $path = "$(Build.Repository.LocalPath)/build/version.txt";
        Write-Host "Grabbing version from: $path";

        if(![System.IO.File]::Exists($path)){
            Write-Error "File not found!";
            exit 1
        }

        $version = (Get-Content $path).Trim() + "$(VersionSuffix)";
        Write-Host "Version found: $version";

        try
        {
            [System.Management.Automation.SemanticVersion]::Parse($version);
        }
        catch
        {
            Write-Error "'$version' is an invalid SemVer version"
            exit 1
        }

        Write-Host "::set-output name=COALESCE_VERSION::$version";

        Write-Host "##vso[build.addbuildtag]$version" # TODO
      id: version
      shell: pwsh
      displayName: "Verify and set COALESCE_VERSION variable"
    outputs:
      COALESCE_VERSION: ${{ steps.version.outputs.COALESCE_VERSION }}


  build-dotnet: 
    displayName: IntelliTect.Coalesce.*
    needs: Meta
    runs-on: ubuntu-latest

    variables:
      COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
      
    steps:
    # https://github.com/nodejs/build/issues/2263
    # this might not even be needed anymore
    #- task: NodeTool@0
    #  displayName: 'Use Node 10.x'
    #  inputs:
    #    versionSpec: 10.x

    # Install both 2.2 (for the cli, last version that supports DotnetCliToolReference) and 3.1 (everything else)
    
    - uses: actions/download-artifact@v1
      with:
        name: coalesce-version
    - run: COALESCE_VERSION=`cat coalesce-version.txt`
        
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: | 
          2.2.x
          3.1.x
          5.0.x
          6.0.x

    - run: dotnet restore src/IntelliTect.Coalesce*/*.csproj
    - run: dotnet build src/IntelliTect.Coalesce*/*.csproj --configuration Release
    - run: dotnet test src/IntelliTect.Coalesce*Test*/*.csproj --no-build
    - run: dotnet pack src/IntelliTect.Coalesce*/*.csproj --no-build -o ${{Build.ArtifactStagingDirectory}}/packages --version $(cat coalesce-version.txt)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NuGet Packages'
      inputs:
        PathtoPublish: '${{Build.ArtifactStagingDirectory}}/packages'
        ArtifactName: packages



  validate-ko-demo: 
    displayName: Coalesce.Web (Knockout Demo)
    needs: Meta
    runs-on: ubuntu-latest

    variables:
      COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
      dir: src/Coalesce.Web
      csproj: src/Coalesce.Web/Coalesce.Web.csproj
      
    steps:
    # https://github.com/nodejs/build/issues/2263
    # this might not even be needed anymore
    #- task: NodeTool@0
    #  displayName: 'Use Node 10.x'
    #  inputs:
    #    versionSpec: 10.x

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '5.0.x'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        verbosityRestore: normal
        projects: |
          '$(csproj)'
          src/IntelliTect.Coalesce.DotnetTool/*.csproj

    - script: npm ci
      displayName: 'Coalesce.Web: npm ci'
      workingDirectory: $(dir)

    - script: npx gulp coalesceKo
      displayName: 'Coalesce.Web: npx gulp coalesceKo'
      workingDirectory: $(dir)

    - script: npx gulp copyAll
      displayName: 'Coalesce.Web: npx gulp copyAll'
      workingDirectory: $(dir)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: '$(csproj)'
        arguments: '--configuration $(BuildConfiguration)'



  build-coalesce-vue:
    needs: Meta
    runs-on: ubuntu-latest

    variables:
      COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
      PACKAGE_NAME: coalesce-vue
      PACKAGE_DIR: src/$(PACKAGE_NAME)

    steps:
    # https://github.com/nodejs/build/issues/2263
    # this might not even be needed anymore
    #- task: NodeTool@0
    #  displayName: 'Use Node 10.x'
    #  inputs:
    #    versionSpec: 10.x

    - script: npm ci
      displayName: npm ci
      workingDirectory: $(PACKAGE_DIR)

    - script: npm version $(COALESCE_VERSION) --no-git-tag-version
      displayName: npm version $(COALESCE_VERSION) --no-git-tag-version
      workingDirectory: $(PACKAGE_DIR)

    - script: npm run test -- --coverage --reporters=default --reporters=jest-junit
      displayName: npm run test
      workingDirectory: $(PACKAGE_DIR)

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/junit.xml'
      inputs:
        testResultsFiles: '**/junit.xml'
        testRunTitle: 'coalesce-vue'

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
      displayName: 'Yarn pack'
      inputs:
        ProjectDirectory: '$(PACKAGE_DIR)'
        Arguments: 'pack -f ${{Build.ArtifactStagingDirectory}}/coalesce-vue.tgz'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(PACKAGE_NAME)'
      inputs:
        ArtifactName: '$(PACKAGE_NAME)'



  build-coalesce-vue-vuetify:
    needs: Meta
    runs-on: ubuntu-latest

    variables:
      COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
      PACKAGE_NAME: coalesce-vue-vuetify
      PACKAGE_DIR: src/$(PACKAGE_NAME)

    steps:
    # https://github.com/nodejs/build/issues/2263
    # this might not even be needed anymore
    #- task: NodeTool@0
    #  displayName: 'Use Node 10.x'
    #  inputs:
    #    versionSpec: 10.x

    # build coalesce-vue
    - script: npm run build-local-deps
      displayName: npm run build-local-deps
      workingDirectory: $(PACKAGE_DIR)

    - script: npm ci
      displayName: npm ci
      workingDirectory: $(PACKAGE_DIR)

    # coalesce-vue-vuetify currently has no tests. Uncomment when the first ones are added:

    # - script: npm run test -- --coverage --reporters=default --reporters=jest-junit
    #   displayName: npm run test
    #   workingDirectory: $(PACKAGE_DIR)

    # - task: PublishTestResults@2
    #   displayName: 'Publish Test Results **/junit.xml'
    #   inputs:
    #     testResultsFiles: '**/junit.xml'
    #     testRunTitle: '$(PACKAGE_NAME)'

    - script: npm run build
      displayName: npm run build
      workingDirectory: $(PACKAGE_DIR)

    # now we'll setup the real versions of things.
    # Change the package.json with the correct version of coalesce-vue, 
    # but do not use any npm commands to do so as they'll freak out that the version isn't published.
    - script: cat <<< "$(cat package.json | jq '.peerDependencies["coalesce-vue"] = "$(COALESCE_VERSION)" | .devDependencies["coalesce-vue"] = "$(COALESCE_VERSION)" ')" > package.json
      displayName: update *dependencies["coalesce-vue"] version
      workingDirectory: $(PACKAGE_DIR)

    - script: npm version $(COALESCE_VERSION) --no-git-tag-version
      displayName: npm version $(COALESCE_VERSION) --no-git-tag-version
      workingDirectory: $(PACKAGE_DIR)

    # yarn pack is used because it allows specifying an output location. npm pack doesn't.
    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
      displayName: 'Yarn pack'
      inputs:
        ProjectDirectory: '$(PACKAGE_DIR)'
        Arguments: 'pack -f ${{Build.ArtifactStagingDirectory}}/$(PACKAGE_NAME).tgz'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(PACKAGE_NAME)'
      inputs:
        ArtifactName: '$(PACKAGE_NAME)'