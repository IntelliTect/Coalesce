
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class ObjectChange extends Coalesce.BaseViewModel {
        public readonly modelName = "ObjectChange";
        public readonly primaryKeyName = "id";
        public readonly modelDisplayName = "Object Change";
        public readonly apiController = "/ObjectChange";
        public readonly viewController = "/ObjectChange";
        
        /** Configuration for all instances of ObjectChange. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<ObjectChange>
            = new Coalesce.ViewModelConfiguration<ObjectChange>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current ObjectChange instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<ObjectChange>(ObjectChange.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.ObjectChangeDataSources = ListViewModels.ObjectChangeDataSources;
        
        
        public message: KnockoutObservable<string | null> = ko.observable(null);
        public userId: KnockoutObservable<number | null> = ko.observable(null);
        public user: KnockoutObservable<ViewModels.Person | null> = ko.observable(null);
        public id: KnockoutObservable<number | null> = ko.observable(null);
        public type: KnockoutObservable<string | null> = ko.observable(null);
        public keyValue: KnockoutObservable<string | null> = ko.observable(null);
        public state: KnockoutObservable<number | null> = ko.observable(null);
        
        /** Text value for enumeration State */
        public stateText: KnockoutComputed<string | null> = ko.pureComputed(() => {
            for (var i = 0; i < this.stateValues.length; i++) {
                if (this.stateValues[i].id == this.state()) {
                    return this.stateValues[i].value;
                }
            }
            return null;
        });
        public date: KnockoutObservable<moment.Moment | null> = ko.observable(moment());
        public properties: KnockoutObservableArray<ViewModels.ObjectChangeProperty> = ko.observableArray([]);
        public clientIp: KnockoutObservable<string | null> = ko.observable(null);
        public referrer: KnockoutObservable<string | null> = ko.observable(null);
        public endpoint: KnockoutObservable<string | null> = ko.observable(null);
        
        
        /** Display text for User */
        public userText: KnockoutComputed<string>;
        
        
        /** Add object to properties */
        public addToProperties = (autoSave?: boolean | null): ObjectChangeProperty => {
            var newItem = new ObjectChangeProperty();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.properties;
            newItem.isExpanded(true);
            newItem.id(this.id());
            this.properties.push(newItem);
            return newItem;
        };
        
        /** ListViewModel for Properties. Allows for loading subsets of data. */
        public propertiesList: (loadImmediate?: boolean) => ListViewModels.ObjectChangePropertyList;
        
        
        /** Url for a table view of all members of collection Properties for the current object. */
        public propertiesListUrl: KnockoutComputed<string> = ko.computed(
            () => "Inverse property not set on ObjectChange for property Properties",
            null, { deferEvaluation: true }
        );
        
        
        /** Pops up a stock editor for object user */
        public showUserEditor: (callback?: any) => void;
        
        
        /** Array of all possible names & values of enum state */
        public stateValues: Coalesce.EnumValue[] = [ 
            { id: 0, value: 'Entity Added' },
            { id: 1, value: 'Entity Deleted' },
            { id: 2, value: 'Entity Modified' },
        ];
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.id;
            this.id(data.id);
            // Load the lists of other objects
            if (data.properties != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.properties, data.properties, 'id', ObjectChangeProperty, this, allowCollectionDeletes);
            }
            if (!data.user) { 
                if (data.userId != this.userId()) {
                    this.user(null);
                }
            } else {
                if (!this.user()){
                    this.user(new Person(data.user, this));
                } else {
                    this.user()!.loadFromDto(data.user);
                }
                if (this.parent instanceof Person && this.parent !== this.user() && this.parent.personId() == this.user()!.personId())
                {
                    this.parent.loadFromDto(data.user, undefined, false);
                }
            }
            
            // The rest of the objects are loaded now.
            this.message(data.message);
            this.userId(data.userId);
            this.type(data.type);
            this.keyValue(data.keyValue);
            this.state(data.state);
            if (data.date == null) this.date(null);
            else if (this.date() == null || this.date()!.valueOf() != new Date(data.date).getTime()){
                this.date(moment(new Date(data.date)));
            }
            this.clientIp(data.clientIp);
            this.referrer(data.referrer);
            this.endpoint(data.endpoint);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.id = this.id();
            
            dto.message = this.message();
            dto.userId = this.userId();
            if (!dto.userId && this.user()) {
                dto.userId = this.user()!.personId();
            }
            dto.type = this.type();
            dto.keyValue = this.keyValue();
            dto.state = this.state();
            if (!this.date()) dto.date = null;
            else dto.date = this.date()!.format('YYYY-MM-DDTHH:mm:ss.SSSZZ');
            dto.clientIp = this.clientIp();
            dto.referrer = this.referrer();
            dto.endpoint = this.endpoint();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            // See if this.user needs to be loaded.
            if (this.user() == null && this.userId() != null) {
                loadingCount++;
                var userObj = new Person();
                userObj.load(this.userId(), () => {
                    loadingCount--;
                    this.user(userObj);
                    if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
                });
            }
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.type.extend({ required: {params: true, message: "Type is required."}, maxLength: 100 }),
                this.date.extend({ moment: { unix: true } }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.ObjectChangeList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            this.userText = ko.pureComputed(function() {
                if (self.user() && self.user()!.name()) {
                    return self.user()!.name()!.toString();
                } else {
                    return "None";
                }
            });
            
            
            // List Object model for Properties. Allows for loading subsets of data.
            var _propertiesList: ListViewModels.ObjectChangePropertyList;
            this.propertiesList = function(loadImmediate = true) {
                if (!_propertiesList) {
                    _propertiesList = new ListViewModels.ObjectChangePropertyList();
                    if (loadImmediate) loadPropertiesList();
                    self.id.subscribe(loadPropertiesList)
                }
                return _propertiesList;
            }
            function loadPropertiesList() {
                if (self.id()) {
                    _propertiesList.queryString = "filter.Id=" + self.id();
                    _propertiesList.load();
                }
            }
            
            
            this.showUserEditor = function(callback: any) {
                if (!self.user()) {
                    self.user(new Person());
                }
                self.user()!.showEditor(callback)
            };
            
            self.message.subscribe(self.autoSave);
            self.userId.subscribe(self.autoSave);
            self.user.subscribe(self.autoSave);
            self.type.subscribe(self.autoSave);
            self.keyValue.subscribe(self.autoSave);
            self.state.subscribe(self.autoSave);
            self.date.subscribe(self.autoSave);
            self.clientIp.subscribe(self.autoSave);
            self.referrer.subscribe(self.autoSave);
            self.endpoint.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace ObjectChange {
        export enum StateEnum {
            EntityAdded = 0,
            EntityDeleted = 1,
            EntityModified = 2,
        }
    }
}
