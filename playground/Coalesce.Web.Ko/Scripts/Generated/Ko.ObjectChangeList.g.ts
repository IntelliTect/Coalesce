
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ListViewModels {
    
    export namespace ObjectChangeDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.ObjectChange> { }
    }
    
    export class ObjectChangeList extends Coalesce.BaseListViewModel<ViewModels.ObjectChange> {
        public readonly modelName: string = "ObjectChange";
        public readonly apiController: string = "/ObjectChange";
        public modelKeyName: string = "id";
        public itemClass: new () => ViewModels.ObjectChange = ViewModels.ObjectChange;
        
        public filter: {
            message?: string;
            userId?: string;
            id?: string;
            type?: string;
            keyValue?: string;
            state?: string;
            date?: string;
            clientIp?: string;
            referrer?: string;
            endpoint?: string;
        } | null = null;
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ObjectChangeDataSources = ObjectChangeDataSources;
        
        /** The data source on the server to use when retrieving objects. Valid values are in this.dataSources. */
        public dataSource: Coalesce.DataSource<ViewModels.ObjectChange> = new this.dataSources.Default();
        
        /** Configuration for all instances of ObjectChangeList. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<ObjectChangeList, ViewModels.ObjectChange>(Coalesce.GlobalConfiguration.listViewModel);
        
        /** Configuration for this ObjectChangeList instance. */
        public coalesceConfig: Coalesce.ListViewModelConfiguration<ObjectChangeList, ViewModels.ObjectChange>
            = new Coalesce.ListViewModelConfiguration<ObjectChangeList, ViewModels.ObjectChange>(ObjectChangeList.coalesceConfig);
        
        
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.ObjectChange(newItem, parent);
        
        constructor() {
            super();
        }
    }
}
