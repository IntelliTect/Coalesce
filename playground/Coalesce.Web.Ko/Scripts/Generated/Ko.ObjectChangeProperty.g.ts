
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class ObjectChangeProperty extends Coalesce.BaseViewModel {
        public readonly modelName = "ObjectChangeProperty";
        public readonly primaryKeyName = "id";
        public readonly modelDisplayName = "Object Change Property";
        public readonly apiController = "/ObjectChangeProperty";
        public readonly viewController = "/ObjectChangeProperty";
        
        /** Configuration for all instances of ObjectChangeProperty. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<ObjectChangeProperty>
            = new Coalesce.ViewModelConfiguration<ObjectChangeProperty>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current ObjectChangeProperty instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<ObjectChangeProperty>(ObjectChangeProperty.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.ObjectChangePropertyDataSources = ListViewModels.ObjectChangePropertyDataSources;
        
        
        public id: KnockoutObservable<number | null> = ko.observable(null);
        public parentId: KnockoutObservable<number | null> = ko.observable(null);
        public propertyName: KnockoutObservable<string | null> = ko.observable(null);
        public oldValue: KnockoutObservable<string | null> = ko.observable(null);
        public newValue: KnockoutObservable<string | null> = ko.observable(null);
        
        
        
        
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.id;
            this.id(data.id);
            // Load the lists of other objects
            
            // The rest of the objects are loaded now.
            this.parentId(data.parentId);
            this.propertyName(data.propertyName);
            this.oldValue(data.oldValue);
            this.newValue(data.newValue);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.id = this.id();
            
            dto.parentId = this.parentId();
            dto.propertyName = this.propertyName();
            dto.oldValue = this.oldValue();
            dto.newValue = this.newValue();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.parentId.extend({ required: {params: true, message: "Parent Id is required."} }),
                this.propertyName.extend({ required: {params: true, message: "Property Name is required."}, maxLength: 100 }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.ObjectChangePropertyList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            
            
            
            self.parentId.subscribe(self.autoSave);
            self.propertyName.subscribe(self.autoSave);
            self.oldValue.subscribe(self.autoSave);
            self.newValue.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace ObjectChangeProperty {
    }
}
