@using IntelliTect.Coalesce.Knockout.Helpers

@{ ViewBag.Fluid = true; }

<style>
    td div a {
        display: block;
    }
    th.sortable-header {
        cursor: pointer;
    }
    th.sortable-header:hover {
        background-color: #e6e6e6
    }
    .table-view-header {
        padding: 10px 15px;
    }
    img.form-control-static {
        max-width: 100px;
        max-height: 100px;
    }
    .coalesce-upload-icon {
        cursor: pointer;
    }
    .fa-sort {
        color: lightgray;
    }
</style>
<div class="table-view obj-objectChange">
    <div class="table-view-header">
        <div class="clearfix">
            <h1 style="display: inline-block">
                Object Change List
            </h1>
        </div>
        <div class="clearfix">
            <div style="display: inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled() && !isLoading(), click: previousPage"></i>
                Page
                <input data-bind="value: page" style="width: 35px">
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled() && !isLoading(), click: nextPage"></i>
            </div>
            <select class="form-control" style="width: 100px; display: inline-block;" data-bind="value: pageSize">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
            </select>
            <input class="form-control pull-right" style="width: 250px; margin-left: 20px" data-bind="textInput: search" placeholder="Search" />
            <div class="btn-group pull-right">
                <button data-bind="click:load" class="btn btn-sm btn-default "><i class="fa fa-refresh"></i> Refresh</button>
                @if (ViewBag.Editable)
                {
                    <a href="~/ObjectChange/Table?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-lock"></i> Make Read-only</a>
                }
            </div>
        </div>
    </div>
    <hr />
    <div class="card table-view-body">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table @(ViewBag.Editable ? "editable" : "" )">
                    <thead>
                        <tr>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Message')}">
                                Message
                                <i class="fa" data-bind="css: orderBy() == 'Message' ? 'fa-caret-up' : orderByDescending() == 'Message' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('User')}">
                                User
                                <i class="fa" data-bind="css: orderBy() == 'User' ? 'fa-caret-up' : orderByDescending() == 'User' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Type')}">
                                Type
                                <i class="fa" data-bind="css: orderBy() == 'Type' ? 'fa-caret-up' : orderByDescending() == 'Type' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('KeyValue')}">
                                Key Value
                                <i class="fa" data-bind="css: orderBy() == 'KeyValue' ? 'fa-caret-up' : orderByDescending() == 'KeyValue' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('State')}">
                                Change Type
                                <i class="fa" data-bind="css: orderBy() == 'State' ? 'fa-caret-up' : orderByDescending() == 'State' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Date')}">
                                Date
                                <i class="fa" data-bind="css: orderBy() == 'Date' ? 'fa-caret-up' : orderByDescending() == 'Date' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th>Properties</th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('ClientIp')}">
                                Client IP
                                <i class="fa" data-bind="css: orderBy() == 'ClientIp' ? 'fa-caret-up' : orderByDescending() == 'ClientIp' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Referrer')}">
                                Referrer
                                <i class="fa" data-bind="css: orderBy() == 'Referrer' ? 'fa-caret-up' : orderByDescending() == 'Referrer' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Endpoint')}">
                                Endpoint
                                <i class="fa" data-bind="css: orderBy() == 'Endpoint' ? 'fa-caret-up' : orderByDescending() == 'Endpoint' ? 'fa-caret-down' : 'fa-sort'" style="float: right; padding: .3em 0 0 0 "></i>
                            </th>
                            <th style="width: 1%">
                            </th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: items">
                        <tr data-bind="css: {'btn-warning': errorMessage()}, attr: {id: id}">
                            @if (@ViewBag.Editable)
                            {
                                <td class="prop-message">@(Knockout.InputFor<Coalesce.Domain.ObjectChange>(p => p.Message))</td>
                                <td class="prop-user">@(Knockout.SelectForObject<Coalesce.Domain.ObjectChange>(p => p.User))</td>
                                <td class="prop-type">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Type))</td>
                                <td class="prop-keyValue">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.KeyValue))</td>
                                <td class="prop-state">@(Knockout.SelectFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.State))</td>
                                <td class="prop-date">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Date))</td>
                                <td class="prop-properties"><a data-bind='attr: {href: propertiesListUrl}, text: properties().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                                <td class="prop-clientIp">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.ClientIp))</td>
                                <td class="prop-referrer">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Referrer))</td>
                                <td class="prop-endpoint">@(Knockout.InputFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Endpoint))</td>
                            }
                            else
                            {
                                <td class="prop-message">@(Knockout.DisplayFor<Coalesce.Domain.ObjectChange>(p => p.Message, true))</td>
                                <td class="prop-user">@(Knockout.DisplayFor<Coalesce.Domain.ObjectChange>(p => p.User, true))</td>
                                <td class="prop-type">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Type, true))</td>
                                <td class="prop-keyValue">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.KeyValue, true))</td>
                                <td class="prop-state">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.State, true))</td>
                                <td class="prop-date">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Date, true))</td>
                                <td class="prop-properties"><a data-bind='attr: {href: propertiesListUrl}, text: properties().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                                <td class="prop-clientIp">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.ClientIp, true))</td>
                                <td class="prop-referrer">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Referrer, true))</td>
                                <td class="prop-endpoint">@(Knockout.DisplayFor<IntelliTect.Coalesce.AuditLogging.DefaultObjectChange>(p => p.Endpoint, true))</td>
                            }
                            <td>
                                <!-- Editor buttons -->
                                <div class="btn-group pull-right" role="group" style="display: inline-flex">
                                </div>
                                <div class="form-control-static" data-bind="text: errorMessage"></div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <script>
        @if (!ViewBag.Editable)
        {
            @:Coalesce.GlobalConfiguration.viewModel.setupValidationAutomatically(false);
        }
        var objectChangeList = new ListViewModels.ObjectChangeList();
        
        // Set up parent info based on the URL.
        @if (ViewBag.Query != null)
        {
            @:objectChangeList.queryString = "@(ViewBag.Query)";
        }
        
        // Save and restore values from the URL:
        var urlVariables = ['page', 'pageSize', 'search', 'orderBy', 'orderByDescending'];
        $.each(urlVariables, function(){
            var param = Coalesce.Utilities.GetUrlParameter(this);
            if (param) {objectChangeList[this](param);}
        })
        objectChangeList.isLoading.subscribe(function(){
            var newUrl = window.location.href;
        
            $.each(urlVariables, function(){
                var param = objectChangeList[this]();
                newUrl = Coalesce.Utilities.SetUrlParameter(newUrl, this, param);
            })
            history.replaceState(null, document.title, newUrl);
        });
        
        objectChangeList.isSavingAutomatically = false;
        ko.applyBindings(objectChangeList, document.body);
        objectChangeList.isSavingAutomatically = true;
        
        objectChangeList.includes = "ObjectChangeListGen";
        objectChangeList.load();
    </script>
}
