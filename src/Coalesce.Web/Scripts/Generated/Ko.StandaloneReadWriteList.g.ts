
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ListViewModels {
    
    export namespace StandaloneReadWriteDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.StandaloneReadWrite> { }
        export class DefaultSource extends Coalesce.DataSource<ViewModels.StandaloneReadWrite> {
        }
    }
    
    export class StandaloneReadWriteList extends Coalesce.BaseListViewModel<ViewModels.StandaloneReadWrite> {
        public readonly modelName: string = "StandaloneReadWrite";
        public readonly apiController: string = "/StandaloneReadWrite";
        public modelKeyName: string = "id";
        public itemClass: new () => ViewModels.StandaloneReadWrite = ViewModels.StandaloneReadWrite;
        
        public filter: {
            id?: string;
            name?: string;
            date?: string;
        } | null = null;
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof StandaloneReadWriteDataSources = StandaloneReadWriteDataSources;
        
        /** The data source on the server to use when retrieving objects. Valid values are in this.dataSources. */
        public dataSource: Coalesce.DataSource<ViewModels.StandaloneReadWrite> = new this.dataSources.Default();
        
        /** Configuration for all instances of StandaloneReadWriteList. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<StandaloneReadWriteList, ViewModels.StandaloneReadWrite>(Coalesce.GlobalConfiguration.listViewModel);
        
        /** Configuration for this StandaloneReadWriteList instance. */
        public coalesceConfig: Coalesce.ListViewModelConfiguration<StandaloneReadWriteList, ViewModels.StandaloneReadWrite>
            = new Coalesce.ListViewModelConfiguration<StandaloneReadWriteList, ViewModels.StandaloneReadWrite>(StandaloneReadWriteList.coalesceConfig);
        
        
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.StandaloneReadWrite(newItem, parent);
        
        constructor() {
            super();
        }
    }
}
