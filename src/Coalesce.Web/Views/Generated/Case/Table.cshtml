@using IntelliTect.Coalesce.Knockout.Helpers

@{ ViewBag.Fluid = true; }

<style>
    td div a {
        display: block;
    }
    th.sortable-header {
        cursor: pointer;
    }
    th.sortable-header:hover {
        background-color: #e6e6e6
    }
    .table-view-header {
        padding: 10px 15px;
    }
    img.form-control-static {
        max-width: 100px;
        max-height: 100px;
    }
    .coalesce-upload-icon {
        cursor: pointer;
    }
</style>
<div class="table-view obj-case">
    <div class="table-view-header">
        <div class="clearfix">
            <h1 style="display: inline-block">
                Case List
                <span style="font-size: .5em; padding-left: 20px;"><a href="~/Case/Docs">API Docs</a></span>
            </h1>
        </div>
        <div class="clearfix">
            <div style="display: inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled() && !isLoading(), click: previousPage"></i>
                Page
                <input data-bind="value: page" style="width: 35px">
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled() && !isLoading(), click: nextPage"></i>
            </div>
            <select class="form-control" style="width: 100px; display: inline-block;" data-bind="value: pageSize">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
            </select>
            <input class="form-control pull-right" style="width: 250px; margin-left: 20px" data-bind="textInput: search" placeholder="Search" />
            <div class="btn-group pull-right">
                <a href="~/Case/CreateEdit?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-plus"></i> Create</a>
                <button data-bind="click:load" class="btn btn-sm btn-default "><i class="fa fa-refresh"></i> Refresh</button>
                @if (ViewBag.Editable)
                {
                    <a href="~/Case/Table?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-lock"></i> Make Read-only</a>
                }
                else
                {
                    <a href="~/Case/TableEdit?@ViewBag.Query" role="button" class="btn btn-sm btn-default "><i class="fa fa-pencil"></i> Make Editable</a>
                }
                <a href="#" role="button" class="btn btn-sm btn-default " data-bind="attr:{href: downloadAllCsvUrl}"><i class="fa fa-download"></i> CSV</a>
                <button role="button" class="btn btn-sm btn-default " data-bind="click: csvUploadUi"><i class="fa fa-upload"></i> CSV</button>
            </div>
        </div>
    </div>
    <hr />
    <div class="card table-view-body">
        <div class="card-body">
            <table class="table @(ViewBag.Editable ? "editable" : "" )">
                <thead>
                    <tr>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Title')}">
                            Title
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Title', 'fa-caret-down': orderByDescending() == 'Title'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Description')}">
                            Description
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Description', 'fa-caret-down': orderByDescending() == 'Description'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('OpenedAt')}">
                            Opened At
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'OpenedAt', 'fa-caret-down': orderByDescending() == 'OpenedAt'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('AssignedTo')}">
                            Assigned To
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'AssignedTo', 'fa-caret-down': orderByDescending() == 'AssignedTo'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('ReportedBy')}">
                            Reported By
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'ReportedBy', 'fa-caret-down': orderByDescending() == 'ReportedBy'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Image')}">
                            Image
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Image', 'fa-caret-down': orderByDescending() == 'Image'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('ImageName')}">
                            Image Name
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'ImageName', 'fa-caret-down': orderByDescending() == 'ImageName'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('ImageSize')}">
                            Image Size
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'ImageSize', 'fa-caret-down': orderByDescending() == 'ImageSize'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('ImageHash')}">
                            Image Hash
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'ImageHash', 'fa-caret-down': orderByDescending() == 'ImageHash'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Attachment')}">
                            Attachment
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Attachment', 'fa-caret-down': orderByDescending() == 'Attachment'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('AttachmentName')}">
                            Attachment Name
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'AttachmentName', 'fa-caret-down': orderByDescending() == 'AttachmentName'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('PlainAttachment')}">
                            Plain Attachment
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'PlainAttachment', 'fa-caret-down': orderByDescending() == 'PlainAttachment'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('RestrictedUploadAttachment')}">
                            Restricted Upload Attachment
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'RestrictedUploadAttachment', 'fa-caret-down': orderByDescending() == 'RestrictedUploadAttachment'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('RestrictedDownloadAttachment')}">
                            Restricted Download Attachment
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'RestrictedDownloadAttachment', 'fa-caret-down': orderByDescending() == 'RestrictedDownloadAttachment'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('RestrictedMetaAttachment')}">
                            Restricted Meta Attachment
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'RestrictedMetaAttachment', 'fa-caret-down': orderByDescending() == 'RestrictedMetaAttachment'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('InternalUseFileSize')}">
                            Internal Use File Size
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'InternalUseFileSize', 'fa-caret-down': orderByDescending() == 'InternalUseFileSize'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Severity')}">
                            Severity
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Severity', 'fa-caret-down': orderByDescending() == 'Severity'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Status')}">
                            Status
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Status', 'fa-caret-down': orderByDescending() == 'Status'}"></i>
                        </th>
                        <th>Case Products</th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('DevTeamAssignedId')}">
                            Dev Team Assigned Id
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'DevTeamAssignedId', 'fa-caret-down': orderByDescending() == 'DevTeamAssignedId'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('DevTeamAssigned')}">
                            Dev Team Assigned
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'DevTeamAssigned', 'fa-caret-down': orderByDescending() == 'DevTeamAssigned'}"></i>
                        </th>
                        <th class="sortable-header" data-bind="click: function(){orderByToggle('Duration')}">
                            Duration
                            <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Duration', 'fa-caret-down': orderByDescending() == 'Duration'}"></i>
                        </th>
                        <th style="width: 1%">
                        </th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: items">
                    <tr data-bind="css: {'btn-warning': errorMessage()}, attr: {id: caseKey}">
                        @if (@ViewBag.Editable)
                        {
                            <td class="prop-title">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Title))</td>
                            <td class="prop-description">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Description))</td>
                            <td class="prop-openedAt">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.OpenedAt))</td>
                            <td class="prop-assignedTo">@(Knockout.SelectForObject<Coalesce.Domain.Case>(p => p.AssignedTo))</td>
                            <td class="prop-reportedBy">@(Knockout.SelectForObject<Coalesce.Domain.Case>(p => p.ReportedBy))</td>
                            <td class="prop-image">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Image))</td>
                            <td class="prop-imageName">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.ImageName, true))</td>
                            <td class="prop-imageSize">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.ImageSize))</td>
                            <td class="prop-imageHash">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.ImageHash))</td>
                            <td class="prop-attachment">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Attachment))</td>
                            <td class="prop-attachmentName">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.AttachmentName))</td>
                            <td class="prop-plainAttachment">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.PlainAttachment))</td>
                            <td class="prop-restrictedUploadAttachment">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.RestrictedUploadAttachment))</td>
                            <td class="prop-restrictedDownloadAttachment">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.RestrictedDownloadAttachment))</td>
                            <td class="prop-restrictedMetaAttachment">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.RestrictedMetaAttachment))</td>
                            <td class="prop-internalUseFileSize">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.InternalUseFileSize))</td>
                            <td class="prop-severity">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Severity))</td>
                            <td class="prop-status">@(Knockout.SelectFor<Coalesce.Domain.Case>(p => p.Status))</td>
                            <td class="prop-caseProducts">@(Knockout.SelectForManyToMany<Coalesce.Domain.Case>(p => p.CaseProducts))</td>
                            <td class="prop-devTeamAssignedId">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.DevTeamAssignedId))</td>
                            <td class="prop-devTeamAssigned">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.DevTeamAssigned, true))</td>
                            <td class="prop-duration">@(Knockout.InputFor<Coalesce.Domain.Case>(p => p.Duration))</td>
                        }
                        else
                        {
                            <td class="prop-title">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Title, true))</td>
                            <td class="prop-description">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Description, true))</td>
                            <td class="prop-openedAt">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.OpenedAt, true))</td>
                            <td class="prop-assignedTo">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.AssignedTo, true))</td>
                            <td class="prop-reportedBy">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.ReportedBy, true))</td>
                            <td class="prop-image">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Image, true))</td>
                            <td class="prop-imageName">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.ImageName, true))</td>
                            <td class="prop-imageSize">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.ImageSize, true))</td>
                            <td class="prop-imageHash">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.ImageHash, true))</td>
                            <td class="prop-attachment">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Attachment, true))</td>
                            <td class="prop-attachmentName">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.AttachmentName, true))</td>
                            <td class="prop-plainAttachment">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.PlainAttachment, true))</td>
                            <td class="prop-restrictedUploadAttachment">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.RestrictedUploadAttachment, true))</td>
                            <td class="prop-restrictedDownloadAttachment">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.RestrictedDownloadAttachment, true))</td>
                            <td class="prop-restrictedMetaAttachment">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.RestrictedMetaAttachment, true))</td>
                            <td class="prop-internalUseFileSize">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.InternalUseFileSize, true))</td>
                            <td class="prop-severity">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Severity, true))</td>
                            <td class="prop-status">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Status, true))</td>
                            <td class="prop-caseProducts">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.CaseProducts, true))</td>
                            <td class="prop-devTeamAssignedId">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.DevTeamAssignedId, true))</td>
                            <td class="prop-devTeamAssigned">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.DevTeamAssigned, true))</td>
                            <td class="prop-duration">@(Knockout.DisplayFor<Coalesce.Domain.Case>(p => p.Duration, true))</td>
                        }
                        <td>
                            <!-- Editor buttons -->
                            <div class="btn-group pull-right" role="group" style="display: inline-flex">
                                <a class="btn btn-sm btn-default" data-bind="attr: { href: editUrl }">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                <button class="btn btn-sm btn-danger" data-bind="click: deleteItemWithConfirmation">
                                    <i class="fa fa-remove"></i>
                                </button>
                            </div>
                            <div class="form-control-static" data-bind="text: errorMessage"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-heading">
        <h3 class="card-title">Actions</h3>
    </div>
    <div class="card-body">
        <table class="table">
            <thead>
                <tr>
                    <th style="width: 20%;">Action</th>
                    <th style="width: 50%;">Result</th>
                    <th style="width: 20%;">Successful</th>
                    <th style="width: 10%;"></th>
                </tr>
            </thead>
            <tbody>
                <tr data-bind="with: getSomeCases">
                    <td>
                        <button class="btn btn-default btn-xs" data-bind="click: function(){ invoke() }">
                            Get Some Cases
                        </button>
                    </td>
                    <td>
                        <ul data-bind="foreach: result">
                            <li data-bind="text: $data"></li>
                        </ul>
                    </td>
                    <td>
                        <span data-bind="text: wasSuccessful"></span>
                        <span data-bind="text: message"></span>
                    </td>
                    <td>
                        <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                    </td>
                </tr>
                <tr data-bind="with: getAllOpenCasesCount">
                    <td>
                        <button class="btn btn-default btn-xs" data-bind="click: function(){ invoke() }">
                            Get All Open Cases Count
                        </button>
                    </td>
                    <td>
                        <span data-bind="text: result"></span>
                    </td>
                    <td>
                        <span data-bind="text: wasSuccessful"></span>
                        <span data-bind="text: message"></span>
                    </td>
                    <td>
                        <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                    </td>
                </tr>
                <tr data-bind="with: randomizeDatesAndStatus">
                    <td>
                        <button class="btn btn-default btn-xs" data-bind="click: function(){ invoke() }">
                            Randomize Dates And Status
                        </button>
                    </td>
                    <td>
                        <span data-bind="text: result"></span>
                    </td>
                    <td>
                        <span data-bind="text: wasSuccessful"></span>
                        <span data-bind="text: message"></span>
                    </td>
                    <td>
                        <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                    </td>
                </tr>
                <tr data-bind="with: getCaseSummary">
                    <td>
                        <button class="btn btn-default btn-xs" data-bind="click: function(){ invoke() }">
                            Get Case Summary
                        </button>
                    </td>
                    <td>
                        <dl class="dl-horizontal" data-bind="with: result">
                            <dt>Case Summary Id</dt>
                            <dd data-bind="text: caseSummaryId"></dd>
                            <dt>Open Cases</dt>
                            <dd data-bind="text: openCases"></dd>
                            <dt>Case Count</dt>
                            <dd data-bind="text: caseCount"></dd>
                            <dt>Close Cases</dt>
                            <dd data-bind="text: closeCases"></dd>
                            <dt>Description</dt>
                            <dd data-bind="text: description"></dd>
                        </dl>
                    </td>
                    <td>
                        <span data-bind="text: wasSuccessful"></span>
                        <span data-bind="text: message"></span>
                    </td>
                    <td>
                        <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section Scripts
{
    <script>
        @if (!ViewBag.Editable)
        {
            @:Coalesce.GlobalConfiguration.viewModel.setupValidationAutomatically(false);
        }
        var caseList = new ListViewModels.CaseList();
        
        // Set up parent info based on the URL.
        @if (ViewBag.Query != null)
        {
            @:caseList.queryString = "@(ViewBag.Query)";
        }
        
        // Save and restore values from the URL:
        var urlVariables = ['page', 'pageSize', 'search', 'orderBy', 'orderByDescending'];
        $.each(urlVariables, function(){
            var param = Coalesce.Utilities.GetUrlParameter(this);
            if (param) {caseList[this](param);}
        })
        caseList.isLoading.subscribe(function(){
            var newUrl = window.location.href;
        
            $.each(urlVariables, function(){
                var param = caseList[this]();
                newUrl = Coalesce.Utilities.SetUrlParameter(newUrl, this, param);
            })
            history.replaceState(null, document.title, newUrl);
        });
        
        caseList.isSavingAutomatically = false;
        ko.applyBindings(caseList);
        caseList.isSavingAutomatically = true;
        
        caseList.includes = "CaseListGen";
        caseList.load();
    </script>
}
