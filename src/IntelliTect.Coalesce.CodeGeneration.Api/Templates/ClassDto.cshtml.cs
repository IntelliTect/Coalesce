using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Api.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class ClassDtoTemplate : CoalesceTemplate<ClassDto>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string namespaceName = Model.Namespace;
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                namespaceName += "." + Model.AreaName;
            }
            namespaceName += ".Models";
            var namespaces = new List<string>();
            namespaces.Add("IntelliTect.Coalesce");
            namespaces.Add("IntelliTect.Coalesce.Mapping");
            namespaces.Add("IntelliTect.Coalesce.Models");
            namespaces.Add("Newtonsoft.Json");
            namespaces.Add("System");
            namespaces.Add("System.Linq");
            namespaces.Add("System.Linq.Dynamic.Core");
            namespaces.Add("System.Collections.Generic");
            namespaces.Add("System.Security.Claims");
            b.Line();
            foreach (var ns in namespaces.OrderBy(n => n))
            {
                b.Line($"    using {ns};");
            }
            b.Line();
            b.Line($"namespace {namespaceName}");
            b.Line("{");
            b.Line($"    public partial class {model.Name}DtoGen : GeneratedDto<{model.FullyQualifiedName}>");
            b.Line("    {");
            b.Line($"        public {model.Name}DtoGen() {{ }}");
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties)
            {
                b.Line($"        public {prop.Type.NullableTypeForDto(namespaceName)} {prop.Name} {{ get; set; }}");
            }
            b.Line();
            b.Line("        /// <summary>");
            b.Line("        /// Map from the domain object to the properties of the current DTO instance.");
            b.Line("        /// </summary>");
            b.Line($"        public override void MapFrom({model.FullyQualifiedName} obj, IMappingContext context, IncludeTree tree = null) {{");
            b.Line("            if (obj == null) return;");
            b.Line("            var includes = context.Includes;");
            b.Line();
            b.Line("            // Fill the properties of the object.");
            b.Line();
            foreach (var conditionGroup in model.ClientProperties
           .OrderBy(p => p.PureType.HasClassViewModel)
           .Select(p => p.ObjToDtoPropertySetter("this"))
           .Where(p => p != null)
           .GroupBy(s => s.Value.conditional))
            {
                if (!string.IsNullOrWhiteSpace(conditionGroup.Key))
                {
                    b.Line($"            if ({conditionGroup.Key}) {{");
                    foreach (var setter in conditionGroup)
                    {
                        b.Line($"                {setter.Value.setter}");
                    }
                    b.Line("            }");
                }
                else
                {
                    foreach (var setter in conditionGroup)
                    {
                        b.Line($"            {setter.Value.setter}");
                    }
                }
            }
            b.Line("        }");
            b.Line("    ");
            b.Line("        /// <summary>");
            b.Line("        /// Map from the current DTO instance to the domain object.");
            b.Line("        /// </summary>");
            b.Line($"        public override void MapTo({model.FullyQualifiedName} entity, IMappingContext context)");
            b.Line("        {");
            b.Line("            var includes = context.Includes;");
            b.Line();
            b.Line("            if (OnUpdate(entity, context)) return;");
            b.Line();
            foreach (var conditionGroup in model.ClientProperties
           .Where(p => p.IsClientSerializable)
           .Select(p => p.DtoToObjPropertySetter())
           .Where(p => p != null)
           .GroupBy(s => s.Value.conditional))
            {
                if (!string.IsNullOrWhiteSpace(conditionGroup.Key))
                {
                    b.Line($"            if ({conditionGroup.Key}) {{");
                    foreach (var setter in conditionGroup)
                    {
                        b.Line($"                {setter.Value.setter}");
                    }
                    b.Line("            }");
                }
                else
                {
                    foreach (var setter in conditionGroup)
                    {
                        b.Line($"            {setter.Value.setter}");
                    }
                }
            }
            b.Line("        }");
            b.Line();
            b.Line("    }");
            b.Line("}");
        }
#pragma warning restore 1998
    }
}