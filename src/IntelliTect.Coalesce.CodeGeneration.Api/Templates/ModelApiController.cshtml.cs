using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Api.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    public class ModelApiControllerTemplate : CoalesceTemplate<ModelApiController>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string namespaceName = Model.Namespace;
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                namespaceName += "." + Model.AreaName;
            }
            var securityInfo = model.SecurityInfo;
            var namespaces = new List<string>();
            namespaces.Add("IntelliTect.Coalesce");
            namespaces.Add("IntelliTect.Coalesce.Api");
            namespaces.Add("IntelliTect.Coalesce.Api.Controllers");
            namespaces.Add("IntelliTect.Coalesce.Api.DataSources");
            namespaces.Add("IntelliTect.Coalesce.Mapping");
            namespaces.Add("IntelliTect.Coalesce.Mapping.IncludeTrees");
            namespaces.Add("IntelliTect.Coalesce.Models");
            namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
            namespaces.Add("Microsoft.AspNetCore.Authorization");
            namespaces.Add("Microsoft.AspNetCore.Mvc");
            namespaces.Add("Microsoft.AspNetCore.Http");
            namespaces.Add("System");
            namespaces.Add("System.Linq");
            namespaces.Add("System.Collections.Generic");
            namespaces.Add("System.ComponentModel.DataAnnotations");
            namespaces.Add("System.Net");
            namespaces.Add("System.Threading.Tasks");
            namespaces.Add($"{namespaceName}.Models");
            var primaryKeyParameter = $"{model.PrimaryKey.Type.FullyQualifiedName} id";
            var dataSourceParameter = $"IDataSource<{model.BaseViewModel.FullyQualifiedName}> dataSource";
            var behaviorsParameter = $"IBehaviors<{model.BaseViewModel.FullyQualifiedName}> behaviors";
            if (model.IsDto)
            {
                var declaredForAttr = $"[DeclaredFor(typeof({model.FullyQualifiedName}))] ";
                dataSourceParameter = declaredForAttr + dataSourceParameter;
                behaviorsParameter = declaredForAttr + behaviorsParameter;
            }
            b.Line();
            foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)).OrderBy(n => n))
            {
                b.Line($"    using {ns};");
            }
            b.Line();
            b.Line($"namespace {namespaceName}.Api");
            b.Line("{");
            if (model.ApiRouted)
            {
                if (!string.IsNullOrWhiteSpace(Model.AreaName))
                {
                    b.Line($"    [Route(\"{Model.AreaName}/api/{model.ApiRouteControllerPart}\")]");
                }
                else
                {
                    b.Line($"    [Route(\"api/{model.ApiRouteControllerPart}\")]");
                }
            }
            b.Line($"    {securityInfo.ClassAnnotation}");
            b.Line("    [ServiceFilter(typeof(IApiActionFilter))]");
            b.Line($"    public partial class {model.ApiControllerClassName} ");
            b.Line($"        : BaseApiController<{model.BaseViewModel.FullyQualifiedName}, {model.DtoName}, {Model.DbContext.Type.FullyQualifiedName}>");
            b.Line("    {");
            b.Line($"        public {model.ApiControllerClassName}({Model.DbContext.Type.FullyQualifiedName} db) : base(db)");
            b.Line("        {");
            b.Line($"            GeneratedForClassViewModel = ReflectionRepository.Global.GetClassViewModel<{model.FullyQualifiedName}>();");
            b.Line("        }");
            b.Line();
            if (securityInfo.IsReadAllowed())
            {
                b.Line();
                b.Line("        [HttpGet(\"get/{id}\")]");
                b.Line($"        {securityInfo.ReadAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<ItemResult<{model.DtoName}>> Get(");
                b.Line($"            {primaryKeyParameter}, ");
                b.Line("            DataSourceParameters parameters, ");
                b.Line($"            {dataSourceParameter})");
                b.Line("            => GetImplementation(id, parameters, dataSource);");
                b.Line();
                b.Line("        [HttpGet(\"list\")]");
                b.Line($"        {securityInfo.ReadAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<ListResult<{model.DtoName}>> List(");
                b.Line("            ListParameters parameters,");
                b.Line($"            {dataSourceParameter})");
                b.Line("            => ListImplementation(parameters, dataSource);");
                b.Line();
                b.Line("        [HttpGet(\"count\")]");
                b.Line($"        {securityInfo.ReadAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<ItemResult<int>> Count(");
                b.Line("            FilterParameters parameters, ");
                b.Line($"            {dataSourceParameter})");
                b.Line("            => CountImplementation(parameters, dataSource);");
                Write($"        ");
            }
            b.Line();
            if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed())
            {
                b.Line();
                b.Line("        [HttpPost(\"save\")]");
                b.Line($"        {securityInfo.SaveAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<ItemResult<{model.DtoName}>> Save(");
                b.Line($"            {model.DtoName} dto, ");
                b.Line("            [FromQuery] DataSourceParameters parameters, ");
                b.Line($"            {dataSourceParameter}, ");
                b.Line($"            {behaviorsParameter})");
                b.Line("            => SaveImplementation(dto, parameters, dataSource, behaviors);");
                Write($"        ");
            }
            b.Line();
            if (securityInfo.IsDeleteAllowed())
            {
                b.Line();
                b.Line("        [HttpPost(\"delete/{id}\")]");
                b.Line($"        {securityInfo.DeleteAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<ItemResult<{model.DtoName}>> Delete(");
                b.Line($"            {primaryKeyParameter}, ");
                b.Line($"            {behaviorsParameter}, ");
                b.Line($"            {dataSourceParameter})");
                b.Line("            => DeleteImplementation(id, new DataSourceParameters(), dataSource, behaviors);");
                Write($"        ");
            }
            b.Line();
            b.Line("        /// <summary>");
            b.Line($"        /// Downloads CSV of {model.DtoName}");
            b.Line("        /// </summary>");
            b.Line("        [HttpGet(\"csvDownload\")]");
            b.Line($"        {securityInfo.ReadAnnotation}");
            b.Line($"        {model.ApiActionAccessModifier} virtual Task<FileResult> CsvDownload(");
            b.Line("            ListParameters parameters, ");
            b.Line($"            {dataSourceParameter})");
            b.Line("            => CsvDownloadImplementation(parameters, dataSource);");
            b.Line();
            b.Line("        /// <summary>");
            b.Line($"        /// Returns CSV text of {model.DtoName}");
            b.Line("        /// </summary>");
            b.Line("        [HttpGet(\"csvText\")]");
            b.Line($"        {securityInfo.ReadAnnotation}");
            b.Line($"        {model.ApiActionAccessModifier} virtual Task<string> CsvText(");
            b.Line("            ListParameters parameters, ");
            b.Line($"            {dataSourceParameter})");
            b.Line("            => CsvTextImplementation(parameters, dataSource);");
            b.Line("    ");
            if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed())
            {
                b.Line();
                b.Line("        /// <summary>");
                b.Line("        /// Saves CSV data as an uploaded file");
                b.Line("        /// </summary>");
                b.Line("        [HttpPost(\"csvUpload\")]");
                b.Line($"        {securityInfo.SaveAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<IEnumerable<ItemResult>> CsvUpload(");
                b.Line("            IFormFile file, ");
                b.Line($"            {dataSourceParameter}, ");
                b.Line($"            {behaviorsParameter}, ");
                b.Line("            bool hasHeader = true) ");
                b.Line("            => CsvUploadImplementation(file, dataSource, behaviors, hasHeader);");
                b.Line("        /// <summary>");
                b.Line("        /// Saves CSV data as a posted string");
                b.Line("        /// </summary>");
                b.Line("        [HttpPost(\"csvSave\")]");
                b.Line($"        {securityInfo.SaveAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual Task<IEnumerable<ItemResult>> CsvSave(");
                b.Line("            string csv, ");
                b.Line($"            {dataSourceParameter}, ");
                b.Line($"            {behaviorsParameter}, ");
                b.Line("            bool hasHeader = true) ");
                b.Line("            => CsvSaveImplementation(csv, dataSource, behaviors, hasHeader);");
                Write($"        ");
            }
            b.Line();
            b.Line("        // Methods from data class exposed through API Controller.");
            foreach (var method in model.ClientMethods)
            {
                var returnType = method.ReturnTypeNameForApi;
                if (!method.IsStatic) { returnType = $"async Task<{returnType}>"; }
                b.Line();
                b.Line("        /// <summary>");
                b.Line($"        /// Method: {method.Name}");
                b.Line("        /// </summary>");
                b.Line($"        [{method.ApiActionHttpMethodAnnotation}(\"{method.Name}\")]");
                b.Line($"        {method.SecurityInfo.ExecuteAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual {returnType} {method.Name} ({method.CsParameters})");
                b.Line("        {");
                if (method.ResultType.HasClassViewModel ||
                   (method.ResultType.PureType.HasClassViewModel && method.ResultType.IsCollection))
                {
                    b.Line("                IncludeTree includeTree = null;");
                }
                Write($"            ");
                if (method.IsStatic)
                {
                    if (method.ReturnType.IsVoid)
                    {
                        b.Line($"                    {method.Parent.FullyQualifiedName}.{method.Name}({method.CsArguments});");
                    }
                    else
                    {
                        b.Line($"                    var methodResult = {method.Parent.FullyQualifiedName}.{method.Name}({method.CsArguments});");
                    }
                }
                else
                {
                    b.Line($"                var dataSource = dataSourceFactory.GetDataSource<{model.BaseViewModel.FullyQualifiedName}, {model.FullyQualifiedName}>(\"{method.LoadFromDataSourceName}\");");
                    b.Line("                var (itemResult, _) = await dataSource.GetItemAsync(id, new ListParameters());");
                    b.Line("                if (!itemResult.WasSuccessful)");
                    b.Line("                {");
                    b.Line($"                    return new {method.ReturnTypeNameForApi}(itemResult);");
                    b.Line("                }");
                    b.Line("                var item = itemResult.Object;");
                    if (method.ReturnType.IsVoid)
                    {
                        b.Line($"                    item.{method.Name}({method.CsArguments});");
                    }
                    else
                    {
                        b.Line($"                    var methodResult = item.{method.Name}({method.CsArguments});");
                    }
                    b.Line("                await Db.SaveChangesAsync();");
                }
                b.Line($"            {Model.MethodResultProcessBlock(method)}");
                b.Line("        }");
            }
            b.Line("    }");
            b.Line("}");
        }
#pragma warning restore 1998
    }
}