using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Api.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    public class ServiceApiControllerTemplate : CoalesceTemplate<ServiceApiController>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string namespaceName = Model.Namespace;
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                namespaceName += "." + Model.AreaName;
            }
            var namespaces = new List<string>();
            namespaces.Add("IntelliTect.Coalesce");
            namespaces.Add("IntelliTect.Coalesce.Api");
            namespaces.Add("IntelliTect.Coalesce.Api.Controllers");
            namespaces.Add("IntelliTect.Coalesce.Api.DataSources");
            namespaces.Add("IntelliTect.Coalesce.Mapping");
            namespaces.Add("IntelliTect.Coalesce.Mapping.IncludeTrees");
            namespaces.Add("IntelliTect.Coalesce.Models");
            namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
            namespaces.Add("Microsoft.AspNetCore.Authorization");
            namespaces.Add("Microsoft.AspNetCore.Mvc");
            namespaces.Add("Microsoft.AspNetCore.Http");
            namespaces.Add("System");
            namespaces.Add("System.Linq");
            namespaces.Add("System.Collections.Generic");
            namespaces.Add("System.ComponentModel.DataAnnotations");
            namespaces.Add("System.Net");
            namespaces.Add("System.Threading.Tasks");
            namespaces.Add($"{namespaceName}.Models");
            b.Line();
            foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)).OrderBy(n => n))
            {
                b.Line($"    using {ns};");
            }
            b.Line();
            b.Line($"namespace {namespaceName}.Api");
            b.Line("{");
            if (model.ApiRouted)
            {
                if (!string.IsNullOrWhiteSpace(Model.AreaName))
                {
                    b.Line($"    [Route(\"{Model.AreaName}/api/{model.ApiRouteControllerPart}\")]");
                }
                else
                {
                    b.Line($"    [Route(\"api/{model.ApiRouteControllerPart}\")]");
                }
            }
            /** No controller-level security annotation is applied - all security for service controllers is on a per-action basis. */
            b.Line("    [ServiceFilter(typeof(IApiActionFilter))]");
            b.Line($"    public partial class {model.ApiControllerClassName} : Controller");
            b.Line("    {");
            b.Line($"        protected {model.FullyQualifiedName} Service {{ get; }}");
            b.Line($"        public {model.ApiControllerClassName}({model.FullyQualifiedName} service)");
            b.Line("        {");
            b.Line("            Service = service;");
            b.Line("        }");
            b.Line();
            foreach (var method in model.ClientMethods)
            {
                b.Line();
                b.Line("        /// <summary>");
                b.Line($"        /// Method: {method.Name}");
                b.Line("        /// </summary>");
                b.Line($"        [{method.ApiActionHttpMethodAnnotation}(\"{method.Name}\")]");
                b.Line($"        {method.SecurityInfo.ExecuteAnnotation}");
                b.Line($"        {model.ApiActionAccessModifier} virtual {method.ReturnTypeNameForApi} {method.Name} ({method.CsParameters})");
                b.Line("        {");
                if (method.ResultType.HasClassViewModel ||
                   (method.ResultType.PureType.HasClassViewModel && method.ResultType.IsCollection))
                {
                    b.Line("                IncludeTree includeTree = null;");
                }
                Write($"            ");
                if (method.ReturnType.IsVoid)
                {
                    b.Line($"                Service.{method.Name}({method.CsArguments});");
                }
                else
                {
                    b.Line($"                var methodResult = Service.{method.Name}({method.CsArguments});");
                }
                b.Line();
                b.Line($"            {Model.MethodResultProcessBlock(method)}");
                b.Line("        }");
                Write($"        ");
            }
            b.Line("    }");
            b.Line("}");
        }
#pragma warning restore 1998
    }
}