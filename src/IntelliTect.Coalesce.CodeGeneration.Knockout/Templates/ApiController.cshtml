@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@inherits CoalesceTemplate<ApiController>
@{
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }
    var securityInfo = model.SecurityInfo;

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce");
    namespaces.Add("IntelliTect.Coalesce.Api");
    namespaces.Add("IntelliTect.Coalesce.Api.Controllers");
    namespaces.Add("IntelliTect.Coalesce.Api.DataSources");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Mapping.IncludeTrees");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
    namespaces.Add("Microsoft.AspNetCore.Authorization");
    namespaces.Add("Microsoft.AspNetCore.Mvc");
    namespaces.Add("Microsoft.AspNetCore.Http");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.ComponentModel.DataAnnotations");
    namespaces.Add("System.Net");
    namespaces.Add("System.Threading.Tasks");
    namespaces.Add($"{namespaceName}.Models");

    var primaryKeyParameter = $"{model.PrimaryKey.Type.FullyQualifiedName} id";
    var dataSourceParameter = $"IDataSource<{model.BaseViewModel.FullyQualifiedName}> dataSource";
    var behaviorsParameter = $"IBehaviors<{model.BaseViewModel.FullyQualifiedName}> behaviors";

    if (model.IsDto)
    {
        var declaredForAttr = $"[DeclaredFor(typeof({model.FullyQualifiedName}))] ";
        dataSourceParameter = declaredForAttr + dataSourceParameter;
        behaviorsParameter = declaredForAttr + behaviorsParameter;
    }
}

@foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)).OrderBy(n => n))
{
    @:using @ns;
}

namespace @(namespaceName).Api
{
@if (model.ApiRouted) {
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
    @:[Route("@Model.AreaName/api/@(model.ApiRouteControllerPart)")]
    }
    else
    {
    @:[Route("api/@(model.ApiRouteControllerPart)")]
    }
}
    @(securityInfo.ClassAnnotation)
    [ServiceFilter(typeof(IApiActionFilter))]
    public partial class @(model.ApiControllerClassName) 
        : BaseApiController<@(model.BaseViewModel.FullyQualifiedName), @(model.DtoName), @Model.DbContext.Type.FullyQualifiedName>
    {
        public @(model.ApiControllerClassName)(@Model.DbContext.Type.FullyQualifiedName db) : base(db)
        {
            GeneratedForClassViewModel = ReflectionRepository.Global.GetClassViewModel<@(model.FullyQualifiedName)>();
        }

        @if (securityInfo.IsReadAllowed())
        {
        <text>
        [HttpGet("get/{id}")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<ItemResult<@(model.DtoName)>> Get(
            @primaryKeyParameter, 
            DataSourceParameters parameters, 
            @dataSourceParameter)
            => GetImplementation(id, parameters, dataSource);

        [HttpGet("list")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<ListResult<@(model.DtoName)>> List(
            ListParameters parameters,
            @dataSourceParameter)
            => ListImplementation(parameters, dataSource);

        [HttpGet("count")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<int> Count(
            FilterParameters parameters, 
            @dataSourceParameter)
            => CountImplementation(parameters, dataSource);
        </text>
        }

        @if (securityInfo.IsDeleteAllowed()) {
        <text>
        [HttpPost("delete/{id}")]
        @(securityInfo.DeleteAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<ItemResult> Delete(
            @primaryKeyParameter, 
            @behaviorsParameter, 
            @dataSourceParameter)
            => DeleteImplementation(id, new DataSourceParameters(), dataSource, behaviors);
        </text>
        }

        @if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed()) {
        <text>
        [HttpPost("save")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<ItemResult<@(model.DtoName)>> Save(
            @(model.DtoName) dto, 
            [FromQuery] DataSourceParameters parameters, 
            @dataSourceParameter, 
            @behaviorsParameter)
            => SaveImplementation(dto, parameters, dataSource, behaviors);
        </text>
        }

        /// <summary>
        /// Downloads CSV of @(model.DtoName)
        /// </summary>
        [HttpGet("csvDownload")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<FileResult> CsvDownload(
            ListParameters parameters, 
            @dataSourceParameter)
            => CsvDownloadImplementation(parameters, dataSource);

        /// <summary>
        /// Returns CSV text of @(model.DtoName)
        /// </summary>
        [HttpGet("csvText")]
        @(securityInfo.ReadAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<string> CsvText(
            ListParameters parameters, 
            @dataSourceParameter)
            => CsvTextImplementation(parameters, dataSource);
    
        @if (securityInfo.IsCreateAllowed() || securityInfo.IsEditAllowed())
        {
        <text>
        /// <summary>
        /// Saves CSV data as an uploaded file
        /// </summary>
        [HttpPost("csvUpload")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<IEnumerable<ItemResult>> CsvUpload(
            IFormFile file, 
            @dataSourceParameter, 
            @behaviorsParameter, 
            bool hasHeader = true) 
            => CsvUploadImplementation(file, dataSource, behaviors, hasHeader);

        /// <summary>
        /// Saves CSV data as a posted string
        /// </summary>
        [HttpPost("csvSave")]
        @(securityInfo.SaveAnnotation)
        @(model.ApiActionAccessModifier) virtual Task<IEnumerable<ItemResult>> CsvSave(
            string csv, 
            @dataSourceParameter, 
            @behaviorsParameter, 
            bool hasHeader = true) 
            => CsvSaveImplementation(csv, dataSource, behaviors, hasHeader);
        </text>
        }

        // Methods from data class exposed through API Controller.
        @foreach (var method in model.ClientMethods)
        {
            var returnType = $"ItemResult<{method.ReturnTypeNameForApi}>";
            if (!method.IsStatic) { returnType = $"async Task<{returnType}>"; }
        <text>
        /// <summary>
        /// Method: @method.Name
        /// </summary>
        [HttpPost("@(method.Name)")]
        @(method.SecurityInfo.ExecuteAnnotation)
        @(model.ApiActionAccessModifier) virtual @returnType @method.Name (@method.CsParameters)
        {
            var result = new ItemResult<@method.ReturnTypeNameForApi>();

            @if (method.ReturnType.HasClassViewModel ||
                (method.ReturnType.PureType.HasClassViewModel && method.ReturnType.IsCollection))
            {
                @:IncludeTree includeTree = null;
            }
            @if (method.IsStatic)
            {
                if(method.ReturnType.IsVoid) {
                    @:object methodResult = null;
                    @:@(method.Parent.FullyQualifiedName).@(method.Name)(@(method.CsArguments));
                }else{
                    @:var methodResult = @(method.Parent.FullyQualifiedName).@(method.Name)(@(method.CsArguments));
                }
            }
            else
            {
                @:var dataSource = dataSourceFactory.GetDataSource<@(model.BaseViewModel.FullyQualifiedName), @(model.FullyQualifiedName)>("@(method.LoadFromDataSourceName)");
                @:var (itemResult, _) = await dataSource.GetItemAsync(id, new ListParameters());
                @:if (!itemResult.WasSuccessful)
                @:{
                    @:return new ItemResult<@method.ReturnTypeNameForApi>(itemResult);
                @:}
                @:var item = itemResult.Object;
                if (method.ReturnType.IsVoid)
                {
                    @:object methodResult = null;
                    @:item.@(method.Name)(@(method.CsArguments));
                }else{
                    @:var methodResult = item.@(method.Name)(@(method.CsArguments));
                }
                @:Db.SaveChanges();
            }
            @if (method.ReturnType.IsCollection)
            {
                if (method.ReturnType.PureType.ClassViewModel?.IsDto ?? false)
                {
                    @:result.Object = methodResult.ToList();
                }
                else if (method.ReturnType.PureType.HasClassViewModel)
                {
                    @:var mappingContext = new MappingContext(User, "");
                    @:result.Object = methodResult.ToList().Select(o => Mapper.MapToDto<@(method.ReturnType.PureType.ClassViewModel.FullyQualifiedName), @(method.ReturnType.PureType.ClassViewModel.DtoName)>(o, mappingContext, (methodResult as IQueryable)?.GetIncludeTree() ?? includeTree)).ToList();
                }
                else
                {
                    @:result.Object = methodResult;
                }
            }
            else
            {
                if (method.ReturnType.ClassViewModel?.IsDto ?? false)
                {
                    @:result.Object = methodResult;
                }
                else if (method.ReturnType.HasClassViewModel)
                {
                    @:var mappingContext = new MappingContext(User, "");
                    @:result.Object = Mapper.MapToDto<@(method.ReturnType.ClassViewModel.FullyQualifiedName), @(method.ReturnType.ClassViewModel.DtoName)>(methodResult, mappingContext, includeTree);
                }
                else
                {
                    @:result.Object = methodResult;
                }
            }

            return result;
        }
</text>
        }
    }
}
