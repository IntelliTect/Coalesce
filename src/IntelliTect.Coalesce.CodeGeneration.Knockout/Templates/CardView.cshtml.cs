using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.DataAnnotations;
    using IntelliTect.Coalesce.Helpers;
    using IntelliTect.Coalesce.Knockout.Helpers;
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Knockout.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class CardViewTemplate : CoalesceTemplate<CardView>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string listViewModelsNamespace = "ListViewModels";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                listViewModelsNamespace = Model.AreaName + "." + listViewModelsNamespace;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                listViewModelsNamespace = Model.ModulePrefix + "." + listViewModelsNamespace;
            }
            b.Line("@using IntelliTect.Coalesce.Knockout.Helpers");
            b.Line("@{ ViewBag.Fluid = true; }");
            b.Line();
            b.Line("<style>");
            b.Line("    .card-view-header {");
            b.Line("        padding: 10px 15px;");
            b.Line("    }");
            b.Line("</style>");
            b.Line();
            Write($"<div");
            BeginWriteAttribute("class", " class=\"", 1005, "\"", 1054, 3);
            WriteAttributeValue("", 1013, "card-view", 1013, 9, true);
            WriteAttributeValue(" ", 1022, "obj-", 1023, 5, true);
            WriteAttributeValue("", 1027, model.Name.ToCamelCase(), 1027, 27, false);
            EndWriteAttribute();
            b.Line(">");
            b.Line("    <div class=\"card-view-header\">");
            b.Line("        <div class=\"clearfix\">");
            b.Line("            <h1 style=\"display: inline-block\">");
            b.Line($"                {model.Name.ToProperCase()} List");
            b.Line("                    <span style=\"font-size: .5em; padding-left: 20px;\"><a href=\"~/{model.ControllerName}/Docs\">API Docs</a></span>");
            b.Line("            </h1>");
            b.Line("            <span class=\"label label-info\" data-bind=\"fadeVisible: isLoading()\">Loading...</span>");
            b.Line("        </div>");
            b.Line("        <div class=\"clearfix\">");
            b.Line("            <div style=\"display: inline-block; font-size: 1.1em; margin-right: 10px;\">");
            b.Line("                <i class=\"fa fa-arrow-circle-left\" data-bind=\"enabled: previousPageEnabled(), click: previousPage\"></i>");
            b.Line("                Page");
            b.Line("                <input data-bind=\"value: page\" style=\"width: 35px\">");
            b.Line("                of");
            b.Line("                <span data-bind=\"text: pageCount\"></span>");
            b.Line("                <i class=\"fa fa-arrow-circle-right\" data-bind=\"enabled: nextPageEnabled(), click: nextPage\"></i>");
            b.Line("            </div>");
            b.Line("            <select data-bind=\"value:pageSize\" class=\"form-control\" style=\"width: 100px; display: inline-block\">");
            b.Line("                <option value=\"1\">1</option>");
            b.Line("                <option value=\"5\">5</option>");
            b.Line("                <option value=\"10\">10</option>");
            b.Line("                <option value=\"50\">50</option>");
            b.Line("                <option value=\"100\">100</option>");
            b.Line("                <option value=\"500\">500</option>");
            b.Line("                <option value=\"1000\">1000</option>");
            b.Line("            </select>");
            b.Line("            <input class=\"form-control pull-right\" style=\"width: 250px; margin-left: 20px\" data-bind=\"textInput: search\" placeholder=\"Search\" />");
            b.Line("            <div class=\"btn-group pull-right\">");
            if (model.SecurityInfo.IsCreateAllowed())
            {
                b.Line($"                        <a href=\"~/{model.ControllerName}/CreateEdit?@(ViewBag.Query)\" role=\"button\" class=\"btn btn-sm btn-default \"><i class=\"fa fa-plus\"></i> Create</a>");
            }
            b.Line("                    <button data-bind=\"click:load\" class=\"btn btn-sm btn-default \"><i class=\"fa fa-refresh\"></i> Refresh</button>");
            b.Line("                    <a href=\"#\" role=\"button\" class=\"btn btn-sm btn-default \" data-bind=\"attr:{href: downloadAllCsvUrl}\"><i class=\"fa fa-download\"></i> CSV</a>");
            if (model.SecurityInfo.IsCreateAllowed() && model.SecurityInfo.IsEditAllowed())
            {
                b.Line("                        <button role=\"button\" class=\"btn btn-sm btn-default \" data-bind=\"click: csvUploadUi\"><i class=\"fa fa-upload\"></i> CSV</button>");
            }
            b.Line("            </div>");
            b.Line("        </div>");
            b.Line("    </div>");
            b.Line("    <hr />");
            b.Line();
            b.Line();
            b.Line("    <div class=\"flex-card-container card-view-body\" data-bind=\"foreach: items, visible: isLoaded\" style=\"display: none\">");
            var properties = model.ClientProperties
                .Where(f => !f.IsHidden(HiddenAttribute.Areas.List))
                .OrderBy(f => f.EditorOrder)
                .ToList();
            var titleProp = properties.Where(f => f.IsListText).FirstOrDefault()
                // Prioritize "name" over "title" - probably more correct most of the time.
                ?? properties.Where(f => f.Name == "Name").FirstOrDefault()
                ?? properties.Where(f => f.Name == "Title").FirstOrDefault();
            b.Line("        <div class=\"flex-card \">");
            if (titleProp != null)
            {
                b.Line("                <div class=\"card-heading\">");
                b.Line("                    <h3 class=\"card-title\">");
                b.Line($"                        <span data-bind=\"text: {titleProp.JsVariableForBinding()}\"></span>");
                b.Line("                    </h3>");
                b.Line("                </div>");
            }
            else
            {
                // Make it easy for someone to add in the title with some other property if they want when they've copypasted this page.
                b.Line("                <!-- You can add a title to the card here by uncommenting and changing the binding below");
                b.Line("                <div class=\"card-heading\">");
                b.Line("                    <h3 class=\"card-title\">");
                b.Line("                        <span data-bind=\"text: TITLEVAR\"></span>");
                b.Line("                    </h3>");
                b.Line("                </div>");
                b.Line("                -->");
            }
            b.Line("            <div class=\"card-body flex\">");
            b.Line();
            b.Line("                <dl>");
            foreach (var prop in properties)
            {
                b.Line($"                        <dt>{prop.DisplayName}</dt>");
                b.Line("                        <dd>");
                b.Line($"                            {Display.PropertyHelper(prop, false)}");
                b.Line("                        </dd>");
            }
            b.Line();
            b.Line("                </dl>");
            b.Line();
            b.Line();
            b.Line("                <div style=\"margin-top: auto\">");
            b.Line("                    <!-- Editor buttons -->");
            b.Line("                    <div class=\"pull-right\" role=\"group\">");
            if (model.ClientMethods.Any(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsStatic))
            {
                b.Line("                            <!-- Action buttons -->");
                b.Line("                            <div class=\"btn-group\" role=\"group\">");
                b.Line("                                <button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">");
                b.Line("                                    Actions <span class=\"caret\"></span>");
                b.Line("                                </button>");
                b.Line("                                <ul class=\"dropdown-menu\">");
                foreach (var method in model.ClientMethods.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsStatic))
                {
                    b.Line($"                                        <li>{Display.MethodHelper(method)}</li>");
                }
                b.Line("                                </ul>");
                b.Line("                            </div>");
            }
            Write($"                        ");
            if (model.SecurityInfo.IsEditAllowed())
            {
                b.Line("                            <a data-bind=\"attr:{ href: editUrl }\" class=\"btn btn-sm btn-default\">");
                b.Line("                                <i class=\"fa fa-pencil\"></i>");
                b.Line("                            </a>");
            }
            Write($"                        ");
            if (model.SecurityInfo.IsDeleteAllowed())
            {
                b.Line("                            <button data-bind=\"click: deleteItemWithConfirmation\" class=\"btn btn-sm btn-danger\">");
                b.Line("                                <i class=\"fa fa-remove\"></i>");
                b.Line("                            </button>");
            }
            b.Line();
            b.Line("                    </div>");
            b.Line("                    <span class=\"form-control-static\" data-bind=\"text: errorMessage\"></span>");
            b.Line("                </div>");
            b.Line();
            b.Line("            </div>");
            b.Line("        </div>");
            b.Line("    </div>");
            b.Line("</div>");
            b.Line();
            b.Line();
            b.Line();
            if (model.ClientMethods.Any(f => f.IsStatic))
            {
                b.Line("    <div class=\"card\">");
                b.Line("        <div class=\"card-heading\">");
                b.Line("            <h3 class=\"card-title\">Actions</h3>");
                b.Line("        </div>");
                b.Line("        <div class=\"card-body\">");
                b.Line("            <table class=\"table\">");
                b.Line("                <thead>");
                b.Line("                    <tr>");
                b.Line("                        <th style=\"width: 20%;\">Action</th>");
                b.Line("                        <th style=\"width: 50%;\">Result</th>");
                b.Line("                        <th style=\"width: 20%;\">Successful</th>");
                b.Line("                        <th style=\"width: 10%;\"></th>");
                b.Line("                    </tr>");
                b.Line("                </thead>");
                b.Line("                <tbody>");
                foreach (MethodViewModel method in model.ClientMethods.Where(f => f.IsStatic))
                {
                    b.Line($"                        <tr data-bind=\"with: {method.JsVariable}\">");
                    b.Line("                            <td>");
                    if (method.ClientParameters.Any())
                    {
                        b.Line("                                    <button class=\"btn btn-default btn-xs\"");
                        b.Line($"                                            data-bind=\"click: function(){{$(\'#method-{method.Name}\').modal()}}\">");
                        b.Line($"                                        {method.DisplayName}");
                        b.Line("                                    </button>");
                    }
                    else
                    {
                        b.Line("                                    <button class=\"btn btn-default btn-xs\" data-bind=\"click: function(){ invoke() }\">");
                        b.Line($"                                        {method.DisplayName}");
                        b.Line("                                    </button>");
                    }
                    b.Line("                            </td>");
                    b.Line("                            <td>");
                    if (method.ResultType.IsCollection)
                    {
                        b.Line("                                    <ul data-bind=\"foreach: result\">");
                        b.Line("                                        <li class=\"\" data-bind=\"text: $data\"></li>");
                        b.Line("                                    </ul>");
                    }
                    else if (method.ResultType.HasClassViewModel)
                    {
                        b.Line("                                    <dl class=\"dl-horizontal\" data-bind=\"with: result\">");
                        foreach (var prop in method.ResultType.ClassViewModel.ClientProperties.Where(f => !f.IsHidden(HiddenAttribute.Areas.Edit)))
                        {
                            b.Line($"                                            <dt>{prop.DisplayName}</dt>");
                            b.Line($"                                            <dd data-bind=\"text: {prop.JsVariableForBinding()}\"></dd>");
                        }
                        b.Line("                                    </dl>");
                    }
                    else
                    {
                        b.Line("                                    <span data-bind=\"text: result\"></span>");
                    }
                    b.Line("                            </td>");
                    b.Line("                            <td>");
                    b.Line("                                <span data-bind=\"text: wasSuccessful\"></span>");
                    b.Line("                                <span data-bind=\"text: message\"></span>");
                    b.Line("                            </td>");
                    b.Line("                            <td>");
                    b.Line("                                <span class=\"label label-info\" data-bind=\"fadeVisible: isLoading\">Loading</span>");
                    b.Line("                            </td>");
                    b.Line("                        </tr>");
                }
                b.Line("                </tbody>");
                b.Line("            </table>");
                b.Line("        </div>");
                b.Line("    </div>");
            }
            b.Line();
            b.Line();
            foreach (var method in model.ClientMethods.Where(f => f.IsStatic && f.ClientParameters.Any()))
            {
                Write($"{Knockout.ModalFor(method)}");
            }
            b.Line();
            b.Line("    @section Scripts");
            b.Line("    {");
            b.Line($"{ScriptHelper.StandardBinding(model)}    }}");
        }
#pragma warning restore 1998
    }
}