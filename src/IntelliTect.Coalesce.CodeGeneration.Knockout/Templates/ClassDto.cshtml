@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@inherits CoalesceTemplate<ClassDto>
@{
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }
    namespaceName += ".Models";

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("Newtonsoft.Json");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Linq.Dynamic.Core");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.Security.Claims");
}

@foreach (var ns in namespaces.OrderBy(n => n))
{
    @:using @ns;
}

namespace @(namespaceName)
{
    public partial class @(model.Name)DtoGen : GeneratedDto<@(model.FullyQualifiedName)>
    {
        public @(model.Name)DtoGen() { }

        @foreach (PropertyViewModel prop in model.ClientProperties)
        {
        @:public @prop.Type.NullableTypeForDto(namespaceName) @prop.Name { get; set; }
        }

        /// <summary>
        /// Map from the domain object to the properties of the current DTO instance.
        /// </summary>
        public override void MapFrom(@(model.FullyQualifiedName) obj, IMappingContext context, IncludeTree tree = null) {
            if (obj == null) return;
            var includes = context.Includes;

            // Fill the properties of the object.

            @foreach (var conditionGroup in model.ClientProperties
            .OrderBy(p => p.PureType.HasClassViewModel)
            .Select(p => p.ObjToDtoPropertySetter("this"))
            .Where(p => p != null)
            .GroupBy(s => s.Value.conditional))
            {
                if (!string.IsNullOrWhiteSpace(conditionGroup.Key))
                {
            @:if (@(conditionGroup.Key)) {
                @foreach (var setter in conditionGroup)
                {
                @:@(setter.Value.setter)
                }
            @:}
            }
            else
            {
            @foreach (var setter in conditionGroup)
            {
            @:@(setter.Value.setter)
            }
            }
            }
        }
    
        /// <summary>
        /// Map from the current DTO instance to the domain object.
        /// </summary>
        public override void MapTo(@(model.FullyQualifiedName) entity, IMappingContext context)
        {
            var includes = context.Includes;

            if (OnUpdate(entity, context)) return;

            @foreach (var conditionGroup in model.ClientProperties
            .Where(p => p.IsClientWritable)
            .Select(p => p.DtoToObjPropertySetter())
            .Where(p => p != null)
            .GroupBy(s => s.Value.conditional))
            {
                if (!string.IsNullOrWhiteSpace(conditionGroup.Key))
                {
            @:if (@(conditionGroup.Key)) {
                @foreach (var setter in conditionGroup)
                {
                @:@(setter.Value.setter)
                }
            @:}
            }
            else
            {
            @foreach (var setter in conditionGroup)
            {
            @:@(setter.Value.setter)
            }
            }
            }
        }

	}
}
