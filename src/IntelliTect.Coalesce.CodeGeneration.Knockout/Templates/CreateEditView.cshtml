@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@using IntelliTect.Coalesce.DataAnnotations
@using IntelliTect.Coalesce.Knockout.Helpers
@using IntelliTect.Coalesce.Knockout.TypeDefinition
@inherits CoalesceTemplate<CreateEditView>
@{
    ClassViewModel model = Model.Model;
    string viewModelsNamespace = "ViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        viewModelsNamespace = Model.AreaName + "." + viewModelsNamespace;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        viewModelsNamespace = Model.ModulePrefix + "." + viewModelsNamespace;
    }
}
@@using IntelliTect.Coalesce.Knockout.Helpers

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="btn-group pull-right">
            <button onclick="window.history.back()" class="btn btn-sm btn-default">Back</button>
            <button data-bind="click:function() { load(); }" class="btn btn-sm btn-default">Refresh</button>
        </div>
        <h1 class="clearfix" style="display:inline-block;">@(model.Name.ToProperCase())</h1>
        <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>
    </div>
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="form-group btn-warning" sytle="display: none;" data-bind="if: errorMessage(), visible: errorMessage()">
                <label class="col-md-4 control-label">Error</label>
                <div class="col-md-8">
                    <div class="form-control-static" data-bind="text: errorMessage"></div>
                </div>
            </div>
            @foreach (var prop in model.ClientProperties.Where(f => !f.IsHidden(HiddenAttribute.Areas.Edit)).OrderBy(f => f.EditorOrder))
            {
                <div class="form-group">
                    <label class="col-md-4 control-label">@prop.DisplayName</label>
                    @if (prop.IsPOCO && prop.PureTypeOnContext)
                    {
                        @Display.PropertyHelperWithSurroundingDiv(prop, !prop.IsReadOnly, Model.AreaName, 7)
                        <div class="col-md-1" data-bind="with: @prop.JsVariableForBinding()">
                            <a data-bind="attr: {href: editUrl}" class="btn btn-default pull-right"><i class="fa fa-ellipsis-h "></i></a>
                        </div>
                    }
                    else
                    {
                        @Display.PropertyHelperWithSurroundingDiv(prop, !prop.IsReadOnly, Model.AreaName)
                    }
                </div>
            }
        </div>
    </div>
    <div class="panel-body">
        @if (model.ClientMethods.Any(f => !f.IsStatic))
        {
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>Actions</h4>
                </div>
                <table class="table">
                    <tr>
                        <th style="width:20%;">Action</th>
                        <th style="width:50%;">Result</th>
                        <th style="width:20%;">Successful</th>
                        <th style="width:10%;"></th>
                    </tr>
                    @foreach (MethodViewModel method in model.ClientMethods.Where(f => !f.IsStatic))
                    {
                        <tr>
                            <td>
                                <button class="btn btn-default btn-xs" data-bind="click: @(method.JsVariableModal)">@method.DisplayName</button>
                            </td>
                            <td>
                                <span class="" data-bind="text: @method.JsVariableResult"></span>
                            </td>
                            <td>
                                <span class="" data-bind="text: @method.JsVariableWasSuccessful"></span>
                                <span class="" data-bind="text: @method.JsVariableMessage"></span>
                            </td>
                            <td>
                                <span class="label label-info" data-bind="fadeVisible: @(method.JsVariableIsLoading)()">Loading</span>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        }
    </div>
</div>

@foreach (var method in model.ClientMethods.Where(f => !f.IsStatic && f.ClientParameters.Any()))
{
    <!-- Modal for method: @method.Name -->
    <div @($"id='method-{method.Name}'") class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">@method.Name.ToProperCase()</h4>
                </div>
                <div class="modal-body form-horizontal">
                    @foreach (ParameterViewModel arg in method.ClientParameters)
                    {
                        <div class="form-group">
                            <label class="col-md-4 control-label">@arg.Name.ToProperCase()</label>
                            <div class="col-md-8">
                                <input type="text" class="form-control" data-bind="value: @(method.JsVariableArgs).@(arg.CsArgumentName)">
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary btn-ok">OK</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->


}

@{
    @:@@section Scripts
    @:{
    <script>
        var model = new @viewModelsNamespace.@(model.ViewModelClassName)();
        model.includes = "Editor";

        model.saveCallbacks.push(function(obj){
            // If there is a new id, set the one for this page
            if (!Coalesce.Utilities.GetUrlParameter('id')){
                if (model.myId) {
                    var newUrl = Coalesce.Utilities.SetUrlParameter(window.location.href, "id", model.myId);
                    window.history.replaceState(null, window.document.title, newUrl);
                }
            }
        });

        @{
        @:@@if (ViewBag.Id != null)
                @:{
                    @:@@:model.load('@@ViewBag.Id');
                @:}
        @:@@foreach (var kvp in ViewBag.ParentIds)
                @:{
                    @:@@:model.@@(((string)(@@kvp.Key)))(@@kvp.Value);
                @:}
        }

        window.onbeforeunload = function(){
            if (model.isDirty()) model.save();
        }

        model.coalesceConfig.autoSaveEnabled(false);
        model.loadChildren(function() {
            ko.applyBindings(model);
            model.coalesceConfig.autoSaveEnabled(true);
        });
    </script>
    @:}
}