@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@using IntelliTect.Coalesce.DataAnnotations
@using IntelliTect.Coalesce.Knockout.Helpers
@using IntelliTect.Coalesce.Knockout.TypeDefinition
@inherits CoalesceTemplate<CreateEditView>
@{
    ClassViewModel model = Model.Model;
    string viewModelsNamespace = "ViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        viewModelsNamespace = Model.AreaName + "." + viewModelsNamespace;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        viewModelsNamespace = Model.ModulePrefix + "." + viewModelsNamespace;
    }
}
@@using IntelliTect.Coalesce.Knockout.Helpers

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="btn-group pull-right">
            <button onclick="window.history.back()" class="btn btn-sm btn-default">Back</button>
            <button data-bind="click:function() { load(); }" class="btn btn-sm btn-default">Refresh</button>
        </div>
        <h1 class="clearfix" style="display:inline-block;">@(model.Name.ToProperCase())</h1>
        <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>
    </div>
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="form-group btn-warning" style="display: none;" data-bind="if: errorMessage(), visible: errorMessage()">
                <label class="col-md-4 control-label">Error</label>
                <div class="col-md-8">
                    <div class="form-control-static" data-bind="text: errorMessage"></div>
                </div>
            </div>
            @foreach (var prop in model.ClientProperties.Where(f => !f.IsHidden(HiddenAttribute.Areas.Edit)).OrderBy(f => f.EditorOrder))
            {
                <div class="form-group">
                    <label class="col-md-4 control-label">@prop.DisplayName</label>
                    @if (prop.IsPOCO && prop.PureTypeOnContext)
                    {
                        @Display.PropertyHelperWithSurroundingDiv(prop, !prop.IsReadOnly, Model.AreaName, 7)
                        <div class="col-md-1" data-bind="with: @prop.JsVariableForBinding()">
                            <a data-bind="attr: {href: editUrl}" class="btn btn-default pull-right"><i class="fa fa-ellipsis-h "></i></a>
                        </div>
                    }
                    else
                    {
                        @Display.PropertyHelperWithSurroundingDiv(prop, !prop.IsReadOnly, Model.AreaName)
                    }
                </div>
            }
        </div>
    </div>
    <div class="panel-body">
        @if (model.ClientMethods.Any(f => !f.IsStatic))
        {
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>Actions</h4>
                </div>
                <table class="table">
                    <tr>
                        <th style="width:20%;">Action</th>
                        <th style="width:50%;">Result</th>
                        <th style="width:20%;">Successful</th>
                        <th style="width:10%;"></th>
                    </tr>
                    @foreach (MethodViewModel method in model.ClientMethods.Where(f => !f.IsStatic))
                    {
                        <tr data-bind="with: @(method.JsVariable)">
                            <td>
                                @if (method.ClientParameters.Any())
                                {
                                <button class="btn btn-default btn-xs" 
                                        data-bind="click: function(){$('#method-@(method.Name)').modal()}">
                                    @method.DisplayName
                                </button>
                                }
                                else
                                {
                                <button class="btn btn-default btn-xs" data-bind="click: function(){ invoke() }">
                                    @method.DisplayName
                                </button>
                                }
                            </td>
                            <td>
                                @if (method.ReturnType.IsCollection)
                                {
                                    <ul data-bind="foreach: result">
                                        <li class="" data-bind="text: $data"></li>
                                    </ul>
                                }
                                else if (method.ReturnType.HasClassViewModel)
                                {
                                    <dl class="dl-horizontal" data-bind="with: result">
                                        @foreach (var prop in method.ReturnType.ClassViewModel.ClientProperties.Where(f => !f.IsHidden(HiddenAttribute.Areas.Edit)))
                                        {
                                            <dt>@prop.DisplayName</dt>
                                            <dd data-bind="text: @prop.JsVariableForBinding()"></dd>
                                        }
                                    </dl>
                                }
                                else
                                {
                                    <span data-bind="text: result"></span>
                                }
                            </td>
                            <td>
                                <span data-bind="text: wasSuccessful"></span>
                                <span data-bind="text: message"></span>
                            </td>
                            <td>
                                <span class="label label-info" data-bind="fadeVisible: isLoading">Loading</span>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        }
    </div>
</div>

@foreach (var method in model.ClientMethods.Where(f => !f.IsStatic && f.ClientParameters.Any()))
{
    @(Knockout.ModalFor(method))
}

@{
    @:@@section Scripts
    @:{
    <script>
        var model = new @viewModelsNamespace.@(model.ViewModelClassName)();
        model.includes = "Editor";

        model.saveCallbacks.push(function(obj){
            // If there is a new id, set the one for this page
            if (!Coalesce.Utilities.GetUrlParameter('id')){
                if (model.myId) {
                    var newUrl = Coalesce.Utilities.SetUrlParameter(window.location.href, "id", model.myId);
                    window.history.replaceState(null, window.document.title, newUrl);
                }
            }
        });

        @{
        @:@@if (ViewBag.Id != null)
                @:{
                    @:@@:model.load('@@ViewBag.Id');
                @:}
        @:@@foreach (var kvp in ViewBag.ParentIds)
                @:{
                    @:@@:model.@@(((string)(@@kvp.Key)))(@@kvp.Value);
                @:}
        }

        window.onbeforeunload = function(){
            if (model.isDirty()) model.save();
        }

        model.coalesceConfig.autoSaveEnabled(false);
        model.loadChildren(function() {
            ko.applyBindings(model);
            model.coalesceConfig.autoSaveEnabled(true);
        });
    </script>
    @:}
}