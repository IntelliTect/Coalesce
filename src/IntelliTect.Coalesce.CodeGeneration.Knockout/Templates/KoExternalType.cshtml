@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Knockout.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@inherits CoalesceTemplate<KoExternalType>
@{
    ClassViewModel model = Model.Model;
    string moduleName = "ViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        moduleName = Model.AreaName + "." + moduleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
}

/// <reference path="../coalesce.dependencies.d.ts" />

module @moduleName {
    // *** External Type @(model.Name)
    export class @(model.ViewModelGeneratedClassName)
    {
    @if (model.PrimaryKey != null)
    {
        // ID of the object.
        @:public myId: any = 0;
    }

        // Observables
    @foreach (PropertyViewModel prop in model.ClientProperties)
    {
        @:public @(prop.JsVariable): @(prop.Type.TsKnockoutType()) = @(prop.Type.ObservableConstructorCall());
        if (prop.PureType.IsEnum)
        {
            @:public @(prop.JsTextPropertyName) = @(prop.Type.ObservableConstructorCall());  // Enum Text Value
        }
    }
        // Loads this object from a data transfer object received from the server.
        public parent: any;
        public parentCollection: any;

        public loadFromDto = (data: any) => {
            if (!data) return;
        @if (model.PrimaryKey != null)
        {
            @:// Set the ID
            @:this.myId = data.@(model.PrimaryKey.JsonName);
        }

            // Load the properties.
    @foreach (PropertyViewModel prop in model.ClientProperties)
    {
        if (prop.Type.IsCollection && prop.Type.ClassViewModel != null)
        {
            @:if (data.@prop.JsonName != null) {
            @:// Merge the incoming array
            @if (prop.Type.PureType.ClassViewModel.PrimaryKey != null)
            {
                @:Coalesce.KnockoutUtilities.RebuildArray(this.@(prop.JsVariable), data.@prop.JsonName, '@prop.Type.PureType.ClassViewModel.PrimaryKey.JsVariable', ViewModels.@prop.Type.PureType.ClassViewModel.Name, self, true);
            }
            else
            {
                @:Coalesce.KnockoutUtilities.RebuildArray(this.@(prop.JsVariable), data.@prop.JsonName, null, ViewModels.@prop.Type.PureType.ClassViewModel.Name, this, true);
            }
            @:}

        }
        else if (prop.Type.IsDate)
        {
            @:if (data.@prop.JsVariable == null) this.@(prop.JsVariable)(null);
            @:else if (this.@(prop.JsVariable)() == null || !this.@(prop.JsVariable)().isSame(moment(data.@prop.JsVariable))){
            @:this.@(prop.JsVariable)(moment(data.@prop.JsVariable));
            @:}
        }
        else if (prop.IsPOCO)
        {
            @:if (!this.@(prop.JsVariable)()){
            @:this.@(prop.JsVariable)(new @(prop.Object.ViewModelClassName)(data.@prop.JsonName, this));
            @:}else{
            @:this.@(prop.JsVariable)().loadFromDto(data.@prop.JsonName);
            @:}
        }
        else
        {
            @:this.@(prop.JsVariable)(data.@prop.JsVariable);
        }
    }

        };

        @(Model.SaveToDto())

        constructor(newItem?: any, parent?: any){
            this.parent = parent;
            // Load the object

            if (newItem) {
                this.loadFromDto(newItem);
            }
        }
    }
}
