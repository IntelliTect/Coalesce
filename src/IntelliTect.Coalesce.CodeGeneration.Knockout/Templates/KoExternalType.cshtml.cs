using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Knockout.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class KoExternalTypeTemplate : CoalesceTemplate<KoExternalType>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string moduleName = "ViewModels";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                moduleName = Model.AreaName + "." + moduleName;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                moduleName = Model.ModulePrefix + "." + moduleName;
            }
            b.Line();
            b.Line("/// <reference path=\"../coalesce.dependencies.d.ts\" />");
            b.Line();
            b.Line($"module {moduleName} {{");
            b.Line($"    // *** External Type {model.Name}");
            b.Line($"    export class {model.ViewModelGeneratedClassName}");
            b.Line("    {");
            if (model.PrimaryKey != null)
            {
                // ID of the object.
                b.Line("        public myId: any = 0;");
            }
            b.Line();
            b.Line("        // Observables");
            foreach (PropertyViewModel prop in model.ClientProperties)
            {
                b.Line($"        public {prop.JsVariable}: {prop.Type.TsKnockoutType(true)} = {prop.Type.ObservableConstructorCall()};");
                if (prop.PureType.IsEnum)
                {
                    b.Line($"            public {prop.JsTextPropertyName} = {prop.Type.ObservableConstructorCall()};  // Enum Text Value");
                }
            }
            b.Line("        // Loads this object from a data transfer object received from the server.");
            b.Line("        public parent: any;");
            b.Line("        public parentCollection: any;");
            b.Line();
            b.Line("        public loadFromDto = (data: any) => {");
            b.Line("            if (!data) return;");
            if (model.PrimaryKey != null)
            {
                b.Line("            // Set the ID");
                b.Line($"            this.myId = data.{model.PrimaryKey.JsonName};");
            }
            b.Line();
            b.Line("            // Load the properties.");
            foreach (PropertyViewModel prop in model.ClientProperties)
            {
                if (prop.Type.IsCollection && prop.Type.ClassViewModel != null)
                {
                    b.Line($"            if (data.{prop.JsonName} != null) {{");
                    b.Line("            // Merge the incoming array");
                    if (prop.Type.PureType.ClassViewModel.PrimaryKey != null)
                    {
                        b.Line($"                Coalesce.KnockoutUtilities.RebuildArray(this.{prop.JsVariable}, data.{prop.JsonName}, \'{prop.Type.PureType.ClassViewModel.PrimaryKey.JsVariable}\', ViewModels.{prop.Type.PureType.ClassViewModel.Name}, self, true);");
                    }
                    else
                    {
                        b.Line($"                Coalesce.KnockoutUtilities.RebuildArray(this.{prop.JsVariable}, data.{prop.JsonName}, null, ViewModels.{prop.Type.PureType.ClassViewModel.Name}, this, true);");
                    }
                    b.Line("            }");
                }
                else if (prop.Type.IsDate)
                {
                    b.Line($"            if (data.{prop.JsVariable} == null) this.{prop.JsVariable}(null);");
                    b.Line($"            else if (this.{prop.JsVariable}() == null || !this.{prop.JsVariable}()!.isSame(moment(data.{prop.JsVariable}))){{");
                    b.Line($"                this.{prop.JsVariable}(moment(data.{prop.JsVariable}));");
                    b.Line("            }");
                }
                else if (prop.IsPOCO)
                {
                    b.Line($"            if (!this.{prop.JsVariable}()){{");
                    b.Line($"                this.{prop.JsVariable}(new {prop.Object.ViewModelClassName}(data.{prop.JsonName}, this));");
                    b.Line("            }else{");
                    b.Line($"                this.{prop.JsVariable}()!.loadFromDto(data.{prop.JsonName});");
                    b.Line("            }");
                }
                else
                {
                    b.Line($"            this.{prop.JsVariable}(data.{prop.JsVariable});");
                }
            }
            b.Line();
            b.Line("        };");
            b.Line();
            b.Line($"        {Model.SaveToDto()}");
            b.Line();
            b.Line("        constructor(newItem?: any, parent?: any){");
            b.Line("            this.parent = parent;");
            b.Line("            // Load the object");
            b.Line();
            b.Line("            if (newItem) {");
            b.Line("                this.loadFromDto(newItem);");
            b.Line("            }");
            b.Line("        }");
            b.Line("    }");
            b.Line("}");
        }
#pragma warning restore 1998
    }
}