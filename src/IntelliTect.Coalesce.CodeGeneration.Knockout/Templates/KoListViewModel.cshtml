@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Knockout.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@inherits CoalesceTemplate<KoListViewModel>
@{
    ClassViewModel model = Model.Model;
    string moduleName = "ListViewModels";
    string viewModelModuleName = "ViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        moduleName = Model.AreaName + "." + moduleName;
        viewModelModuleName = Model.AreaName + "." + viewModelModuleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
        viewModelModuleName = Model.ModulePrefix + "." + viewModelModuleName;
    }
    string viewModelFullName = $"{viewModelModuleName}.{model.ViewModelClassName}";
}

/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: @(model.Name)
// Generated by IntelliTect.Coalesce

module @moduleName {

    @{ 
        var dataSources = model.ClientDataSources(Model.RazorServices.ReflectionRepository).ToList();
        var defaultSource = dataSources.SingleOrDefault(s => s.IsDefaultDataSource);
    }
    export namespace @(model.Name)DataSources {
        @if (defaultSource == null) {
        @:export class Default extends Coalesce.DataSource<@viewModelFullName> { }
        }
        @foreach (var source in dataSources)
        {
        @:
        if (source.Comment.Length > 0)
        {
        @:/** @(source.Comment) */
        }
        @:export class @source.Name extends Coalesce.DataSource<@viewModelFullName> {
            @if (source.DataSourceParameters.Any())
            {
            @foreach (PropertyViewModel prop in source.DataSourceParameters)
            {
            if (prop.Comment.Length > 0)
            {
            @:/** @(prop.Comment) */
            }
            @:public @(prop.JsVariable): @(prop.Type.TsKnockoutType()) = @(prop.Type.ObservableConstructorCall());
            }
            @:public saveToDto = () => {
                @:var dto: any = {};
            @foreach (PropertyViewModel prop in source.DataSourceParameters)
            {
                if (prop.Type.IsDate)
                {
                @:if (!this.@(prop.JsVariable)()) dto.@prop.JsonName = null;
                @:else dto.@prop.JsonName = this.@(prop.JsVariable)().format('YYYY-MM-DDTHH:mm:ss@(prop.Type.IsDateTimeOffset ? "ZZ" : "")');
                }
                else
                {
                @:dto.@prop.JsonName = this.@(prop.JsVariable)();
                }
            }
                @:return dto;
            @:}
            }
        @:}
        if (source == defaultSource) {
        @:export const Default = @source.Name;
        }
        }
    }

    export class @(model.ListViewModelClassName) extends Coalesce.BaseListViewModel<@viewModelFullName> {
        public readonly modelName: string = "@(model.Name)";
        public readonly apiController: string = "/@(model.ApiRouteControllerPart)";
        public modelKeyName: string = "@(model.PrimaryKey.JsVariable)";
        public itemClass: new () => @viewModelFullName = @viewModelFullName;

        public filter: {
            @(string.Join("\r\n            ", model.BaseViewModel.ClientProperties
                .Where(f=>f.IsUrlFilterParameter)
                .Select(f=>$"{f.JsonName}?:{"string" /*f.Type.TsType + (f.Type.IsString ? "" : " | string")*/};")))
        } = null;
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof @(model.Name)DataSources = @(model.Name)DataSources;

        /**
            The data source on the server to use when retrieving objects.
            Valid values are in this.dataSources.
        */
        public dataSource: Coalesce.DataSource<@viewModelFullName> = new this.dataSources.Default();

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<@(model.ListViewModelClassName), @viewModelFullName>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig: Coalesce.ListViewModelConfiguration<@(model.ListViewModelClassName), @viewModelFullName>
            = new Coalesce.ListViewModelConfiguration<@(model.ListViewModelClassName), @viewModelFullName>(@(model.ListViewModelClassName).coalesceConfig);

        @foreach(var method in model.ClientMethods.Where(m => m.IsStatic))
        {
            @(Model.ClientMethodDeclaration(method, model.ListViewModelClassName))
        }

        protected createItem = (newItem?: any, parent?: any) => new @(viewModelFullName)(newItem, parent);

        constructor() {
            super();
        }
    }
}