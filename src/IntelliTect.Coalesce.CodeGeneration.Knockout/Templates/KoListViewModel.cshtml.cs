using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Knockout.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class KoListViewModelTemplate : CoalesceTemplate<KoListViewModel>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string moduleName = "ListViewModels";
            string viewModelModuleName = "ViewModels";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                moduleName = Model.AreaName + "." + moduleName;
                viewModelModuleName = Model.AreaName + "." + viewModelModuleName;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                moduleName = Model.ModulePrefix + "." + moduleName;
                viewModelModuleName = Model.ModulePrefix + "." + viewModelModuleName;
            }
            string viewModelFullName = $"{viewModelModuleName}.{model.ViewModelClassName}";
            b.Line();
            b.Line("/// <reference path=\"../coalesce.dependencies.d.ts\" />");
            b.Line();
            b.Line($"// Knockout List View Model for: {model.Name}");
            b.Line("// Generated by IntelliTect.Coalesce");
            b.Line();
            b.Line($"module {moduleName} {{");
            b.Line();
            var dataSources = model.ClientDataSources(Model.RazorServices.ReflectionRepository).ToList();
            var defaultSource = dataSources.SingleOrDefault(s => s.IsDefaultDataSource);
            b.Line($"    export namespace {model.Name}DataSources {{");
            if (defaultSource == null)
            {
                b.Line($"        export class Default extends Coalesce.DataSource<{viewModelFullName}> {{ }}");
            }
            Write($"        ");
            foreach (var source in dataSources)
            {
                b.Line("        ");
                if (source.Comment.Length > 0)
                {
                    b.Line($"        /** {source.Comment} */");
                }
                b.Line($"        export class {source.Name} extends Coalesce.DataSource<{viewModelFullName}> {{");
                if (source.DataSourceParameters.Any())
                {
                    foreach (PropertyViewModel prop in source.DataSourceParameters)
                    {
                        if (prop.Comment.Length > 0)
                        {
                            b.Line($"            /** {prop.Comment} */");
                        }
                        b.Line($"            public {prop.JsVariable}: {prop.Type.TsKnockoutType(true)} = {prop.Type.ObservableConstructorCall()};");
                    }
                    b.Line("            public saveToDto = () => {");
                    b.Line("                var dto: any = {};");
                    foreach (PropertyViewModel prop in source.DataSourceParameters)
                    {
                        if (prop.Type.IsDate)
                        {
                            b.Line($"                if (!this.{prop.JsVariable}()) dto.{prop.JsonName} = null;");
                            Write($"                else dto.{prop.JsonName} = this.{prop.JsVariable}()!.format(\'YYYY-MM-DDTHH:mm:ss");
                            Write(prop.Type.IsDateTimeOffset ? "ZZ" : "");
                            b.Line("\');");
                        }
                        else
                        {
                            b.Line($"                dto.{prop.JsonName} = this.{prop.JsVariable}();");
                        }
                    }
                    b.Line("                return dto;");
                    b.Line("            }");
                }
                b.Line("        }");
                if (source == defaultSource)
                {
                    b.Line($"        export const Default = {source.Name};");
                }
            }
            b.Line("    }");
            b.Line();
            b.Line($"    export class {model.ListViewModelClassName} extends Coalesce.BaseListViewModel<{viewModelFullName}> {{");
            b.Line($"        public readonly modelName: string = \"{model.Name}\";");
            b.Line($"        public readonly apiController: string = \"/{model.ApiRouteControllerPart}\";");
            b.Line($"        public modelKeyName: string = \"{model.PrimaryKey.JsVariable}\";");
            b.Line($"        public itemClass: new () => {viewModelFullName} = {viewModelFullName};");
            b.Line();
            b.Line("        public filter: {");
            Write($"            ");
            b.Line(string.Join("");
            Write($"            ", model.BaseViewModel.ClientProperties
                                .Where(f => f.IsUrlFilterParameter)
                                .Select(f => $"{f.JsonName}?:{"string" /*f.Type.TsType + (f.Type.IsString ? "" : " | string")*/};")));
            b.Line();
            b.Line("        } | null = null;");
            b.Line("    ");
            b.Line("        /** ");
            b.Line("            The namespace containing all possible values of this.dataSource.");
            b.Line("        */");
            b.Line($"        public dataSources: typeof {model.Name}DataSources = {model.Name}DataSources;");
            b.Line();
            b.Line("        /**");
            b.Line("            The data source on the server to use when retrieving objects.");
            b.Line("            Valid values are in this.dataSources.");
            b.Line("        */");
            b.Line($"        public dataSource: Coalesce.DataSource<{viewModelFullName}> = new this.dataSources.Default();");
            b.Line();
            b.Line($"        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<{model.ListViewModelClassName}, {viewModelFullName}>(Coalesce.GlobalConfiguration.listViewModel);");
            b.Line($"        public coalesceConfig: Coalesce.ListViewModelConfiguration<{model.ListViewModelClassName}, {viewModelFullName}>");
            b.Line($"            = new Coalesce.ListViewModelConfiguration<{model.ListViewModelClassName}, {viewModelFullName}>({model.ListViewModelClassName}.coalesceConfig);");
            b.Line();
            foreach (var method in model.ClientMethods.Where(m => m.IsStatic))
            {
                Write($"{Model.ClientMethodDeclaration(method, model.ListViewModelClassName)}");
            }
            b.Line();
            b.Line($"        protected createItem = (newItem?: any, parent?: any) => new {viewModelFullName}(newItem, parent);");
            b.Line();
            b.Line("        constructor() {");
            b.Line("            super();");
            b.Line("        }");
            b.Line("    }");
            Write($"}}");
        }
#pragma warning restore 1998
    }
}