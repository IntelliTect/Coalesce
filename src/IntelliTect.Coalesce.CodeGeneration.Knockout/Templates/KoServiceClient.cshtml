@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.Knockout.TypeDefinition
@using IntelliTect.Coalesce.Utilities
@inherits CoalesceTemplate<KoServiceClient>
@{
    ClassViewModel model = Model.Model;
    string moduleName = "Services";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        moduleName = Model.AreaName + "." + moduleName;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        moduleName = Model.ModulePrefix + "." + moduleName;
    }
    string viewModelFullName = $"{moduleName}.{model.ViewModelClassName}";
}

/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: @(model.Name)
// Generated by IntelliTect.Coalesce

module @moduleName {
    export class @(model.ServiceClientClassName) {
        public readonly apiController: string = "/@(model.ApiRouteControllerPart)";

        public static coalesceConfig = new Coalesce.ServiceClientConfiguration<@(model.ServiceClientClassName)>(Coalesce.GlobalConfiguration.serviceClient);
        public coalesceConfig: Coalesce.ServiceClientConfiguration<@(model.ServiceClientClassName)>
            = new Coalesce.ServiceClientConfiguration<@(model.ServiceClientClassName)>(@(model.ServiceClientClassName).coalesceConfig);

        @foreach (var method in model.ClientMethods)
        {
            @(Model.ClientMethodDeclaration(method, model.ServiceClientClassName))
        }
    }
}