using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Knockout.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class KoServiceClientTemplate : CoalesceTemplate<KoServiceClient>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string moduleName = "Services";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                moduleName = Model.AreaName + "." + moduleName;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                moduleName = Model.ModulePrefix + "." + moduleName;
            }
            string viewModelFullName = $"{moduleName}.{model.ViewModelClassName}";
            b.Line();
            b.Line("/// <reference path=\"../coalesce.dependencies.d.ts\" />");
            b.Line();
            b.Line($"// Knockout List View Model for: {model.Name}");
            b.Line("// Generated by IntelliTect.Coalesce");
            b.Line();
            b.Line($"module {moduleName} {{");
            b.Line($"    export class {model.ServiceClientClassName} {{");
            b.Line($"        public readonly apiController: string = \"/{model.ApiRouteControllerPart}\";");
            b.Line();
            b.Line($"        public static coalesceConfig = new Coalesce.ServiceClientConfiguration<{model.ServiceClientClassName}>(Coalesce.GlobalConfiguration.serviceClient);");
            b.Line($"        public coalesceConfig: Coalesce.ServiceClientConfiguration<{model.ServiceClientClassName}>");
            b.Line($"            = new Coalesce.ServiceClientConfiguration<{model.ServiceClientClassName}>({model.ServiceClientClassName}.coalesceConfig);");
            b.Line();
            foreach (var method in model.ClientMethods)
            {
                Write($"{Model.ClientMethodDeclaration(method, model.ServiceClientClassName)}");
            }
            b.Line("    }");
            Write($"}}");
        }
#pragma warning restore 1998
    }
}