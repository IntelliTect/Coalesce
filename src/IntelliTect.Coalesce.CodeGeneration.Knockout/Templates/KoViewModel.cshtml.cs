using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Knockout.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class KoViewModelTemplate : CoalesceTemplate<KoViewModel>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string moduleName = "ViewModels";
            string listModuleName = "ListViewModels";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                moduleName = Model.AreaName + "." + moduleName;
                listModuleName = Model.AreaName + "." + listModuleName;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                moduleName = Model.ModulePrefix + "." + moduleName;
            }
            b.Line();
            b.Line("/// <reference path=\"../coalesce.dependencies.d.ts\" />");
            b.Line();
            b.Line($"// Knockout View Model for: {model.Name}");
            b.Line("// Generated by IntelliTect.Coalesce");
            b.Line();
            b.Line($"module {moduleName} {{");
            b.Line();
            b.Line($"    export class {model.ViewModelGeneratedClassName} extends Coalesce.BaseViewModel");
            b.Line("    {");
            b.Line($"        public readonly modelName = \"{model.Name}\";");
            b.Line($"        public readonly primaryKeyName: keyof this = \"{model.PrimaryKey.JsVariable}\";");
            b.Line($"        public readonly modelDisplayName = \"{model.DisplayName}\";");
            b.Line($"        public readonly apiController = \"/{model.ApiRouteControllerPart}\";");
            b.Line($"        public readonly viewController = \"/{model.ControllerName}\";");
            b.Line();
            b.Line($"        /** Behavioral configuration for all instances of {model.ViewModelClassName}. Can be overidden on each instance via instance.coalesceConfig. */");
            b.Line($"        public static coalesceConfig: Coalesce.ViewModelConfiguration<{model.ViewModelClassName}>");
            b.Line($"            = new Coalesce.ViewModelConfiguration<{model.ViewModelClassName}>(Coalesce.GlobalConfiguration.viewModel);");
            b.Line();
            b.Line($"        /** Behavioral configuration for the current {model.ViewModelClassName} instance. */");
            b.Line("        public coalesceConfig: Coalesce.ViewModelConfiguration<this>");
            b.Line($"            = new Coalesce.ViewModelConfiguration<{model.ViewModelGeneratedClassName}>({model.ViewModelClassName}.coalesceConfig);");
            b.Line("    ");
            b.Line("        /** ");
            b.Line("            The namespace containing all possible values of this.dataSource.");
            b.Line("        */");
            b.Line($"        public dataSources: typeof ListViewModels.{model.Name}DataSources = ListViewModels.{model.Name}DataSources;");
            b.Line("    ");
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties)
            {
                if (prop.Comment.Length > 0)
                {
                    b.Line($"        /** {prop.Comment} */");
                }
                b.Line($"        public {prop.JsVariable}: {prop.Type.TsKnockoutType(true)} = {prop.Type.ObservableConstructorCall()};");
                if (prop.PureType.IsEnum)
                {
                    b.Line($"        /** Text value for enumeration {prop.Name} */");
                    b.Line($"        public {prop.JsTextPropertyName}: KnockoutComputed<string | null> = ko.pureComputed(() => {{");
                    b.Line($"            for(var i = 0; i < this.{prop.JsVariable}Values.length; i++){{");
                    b.Line($"                if (this.{prop.JsVariable}Values[i].id == this.{prop.JsVariable}()){{");
                    b.Line($"                    return this.{prop.JsVariable}Values[i].value;");
                    b.Line("                }");
                    b.Line("            }");
                    b.Line("            return null;");
                    b.Line("        });");
                }
                if (prop.IsManytoManyCollection)
                {
                    if (prop.Comment.Length > 0)
                    {
                        b.Line($"        /** Collection of related objects for many-to-many relationship {prop.ManyToManyCollectionName} via {prop.Name} */");
                    }
                    b.Line($"        public {prop.ManyToManyCollectionName.ToCamelCase()}: KnockoutObservableArray<ViewModels.{prop.ManyToManyCollectionProperty.Object.ViewModelClassName}> = ko.observableArray([]);");
                }
            }
            b.Line();
            b.Line("       ");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.IsPOCO))
            {
                b.Line($"        /** Display text for {prop.Name} */");
                b.Line($"        public {prop.JsTextPropertyName}: KnockoutComputed<string>;");
            }
            b.Line("        ");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.Type.IsCollection && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
                b.Line();
                b.Line($"        /** Add object to {prop.JsVariable} */");
                b.Line($"        public addTo{prop.Name} = (autoSave?: boolean | null): {prop.PureType.ClassViewModel.Name} => {{");
                b.Line($"            var newItem = new {prop.Object.ViewModelClassName}();");
                b.Line("            if (typeof(autoSave) == \'boolean\'){");
                b.Line("                newItem.coalesceConfig.autoSaveEnabled(autoSave);");
                b.Line("            }");
                b.Line("            newItem.parent = this;");
                b.Line($"            newItem.parentCollection = this.{prop.JsVariable};");
                b.Line("            newItem.isExpanded(true);");
                if (prop.HasInverseProperty)
                {
                    b.Line($"            newItem.{prop.InverseIdProperty.JsVariable}(this.{model.PrimaryKey.JsVariable}());");
                }
                else if (prop.Object.PropertyByName(model.PrimaryKey.JsVariable) != null)
                {
                    b.Line($"            newItem.{model.PrimaryKey.JsVariable}(this.{model.PrimaryKey.JsVariable}());");
                }
                b.Line($"            this.{prop.JsVariable}.push(newItem);");
                b.Line("            return newItem;");
                b.Line("        };");
                b.Line();
                b.Line($"        /** ListViewModel for {prop.Name}. Allows for loading subsets of data. */");
                b.Line($"        public {prop.JsVariable}List: (loadImmediate?: boolean) => {listModuleName}.{prop.Object.ListViewModelClassName};");
                Write($"        ");
            }
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.Type.IsCollection && f.PureTypeOnContext))
            {
                b.Line($"        /** Url for a table view of all members of collection {prop.Name} for the current object. */");
                b.Line($"        public {prop.ListEditorUrlName}: KnockoutComputed<string> = ko.computed(");
                if (prop.ListEditorUrl == null)
                {
                    b.Line($"            () => \"Inverse property not set on {model.Name} for property {prop.Name}\",");
                }
                else
                {
                    b.Line($"            () => this.coalesceConfig.baseViewUrl() + \'/{prop.ListEditorUrl}\' + this.{model.PrimaryKey.JsVariable}(),");
                }
                b.Line("            null, { deferEvaluation: true }");
                b.Line("        );");
            }
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.IsPOCO && !f.Type.IsCollection && f.PureTypeOnContext))
            {
                b.Line($"        /** Pops up a stock editor for object {prop.JsVariable} */");
                b.Line($"        public show{prop.Name}Editor: (callback?: any) => void;");
            }
            b.Line();
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.PureType.IsEnum))
            {
                b.Line($"        /** Array of all possible names & values of enum {prop.JsVariable} */");
                b.Line($"        public {prop.JsVariable}Values: Coalesce.EnumValue[] = [ ");
                foreach (var kvp in prop.Type.EnumValues)
                {
                    b.Line($"            {{ id: {kvp.Key}, value: \'{kvp.Value.ToProperCase()}\' }},");
                }
                b.Line("        ];");
            }
            b.Line();
            foreach (var method in model.ClientMethods.Where(m => !m.IsStatic || m.ResultType.EqualsType(model.Type)))
            {
                Write($"{Model.ClientMethodDeclaration(method, model.ViewModelGeneratedClassName)}");
            }
            b.Line();
            b.Line("        /** ");
            b.Line("            Load the ViewModel object from the DTO. ");
            b.Line("            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.");
            b.Line("            @param allowCollectionDeletes: Set true when entire collect\\ions \"are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.");
            b.Line("        */");
            b.Line("        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {");
            b.Line("            if (!data || (!force && this.isLoading())) return;");
            b.Line("            this.isLoading(true);");
            b.Line("            // Set the ID ");
            b.Line($"            this.myId = data.{model.PrimaryKey.JsonName};");
            b.Line($"            this.{model.PrimaryKey.JsVariable}(data.{model.PrimaryKey.JsonName});");
            b.Line("            // Load the lists of other objects");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => p.Type.IsCollection))
            {
                b.Line($"            if (data.{prop.JsonName} != null) {{");
                if (prop.Object.PrimaryKey != null)
                {
                    b.Line("                // Merge the incoming array");
                    b.Line($"                Coalesce.KnockoutUtilities.RebuildArray(this.{prop.JsVariable}, data.{prop.JsonName}, \'{prop.Object.PrimaryKey.JsonName}\', {prop.Object.ViewModelClassName}, this, allowCollectionDeletes);");
                    if (prop.IsManytoManyCollection)
                    {
                        b.Line("                // Add many-to-many collection");
                        b.Line("                let objs: any[] = [];");
                        b.Line($"                $.each(data.{prop.JsonName}, (index, item) => {{");
                        b.Line($"                    if (item.{prop.ManyToManyCollectionProperty.JsonName}){{");
                        b.Line($"                        objs.push(item.{prop.ManyToManyCollectionProperty.JsonName});");
                        b.Line("                    }");
                        b.Line("                });");
                        b.Line($"                Coalesce.KnockoutUtilities.RebuildArray(this.{prop.ManyToManyCollectionName.ToCamelCase()}, objs, \'{prop.ManyToManyCollectionProperty.ObjectIdProperty.JsVariable}\', {prop.ManyToManyCollectionProperty.Object.ViewModelClassName}, this, allowCollectionDeletes);");
                    }
                }
                else if (prop.PureType.IsPrimitive)
                {
                    b.Line($"                this.{prop.JsVariable}(data.{prop.JsVariable});");
                }
                else
                {
                    b.Line($"                Coalesce.KnockoutUtilities.RebuildArray(this.{prop.JsVariable}, data.{prop.JsonName}, null, {prop.Object.ViewModelClassName}, this, allowCollectionDeletes);");
                }
                b.Line("            } ");
            }
            b.Line("            // Objects are loaded first so that they are available when the IDs get loaded.");
            b.Line("            // This handles the issue with populating select lists with correct data because we now have the object.");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => p.IsPOCO && !p.Type.IsCollection))
            {
                b.Line($"            if (!data.{prop.JsonName}) {{ ");
                if (prop.ObjectIdProperty != null)
                {
                    b.Line($"                if (data.{prop.ObjectIdProperty.JsonName} != this.{prop.ObjectIdProperty.JsVariable}()) {{");
                    b.Line($"                    this.{prop.JsVariable}(null);");
                    b.Line("                }");
                }
                else
                {
                    b.Line($"                this.{prop.JsVariable}(null);");
                }
                b.Line("            } else {");
                b.Line($"                if (!this.{prop.JsVariable}()){{");
                b.Line($"                    this.{prop.JsVariable}(new {prop.Object.ViewModelClassName}(data.{prop.JsonName}, this));");
                b.Line("                } else {");
                b.Line($"                    this.{prop.JsVariable}()!.loadFromDto(data.{prop.JsonName});");
                b.Line("                }");
                if (prop.Object.OnContext)
                {
                    b.Line($"                if (this.parent instanceof {prop.Object.ViewModelClassName} && this.parent !== this.{prop.JsVariable}() && this.parent.{prop.Object.PrimaryKey.JsVariable}() == this.{prop.JsVariable}()!.{prop.Object.PrimaryKey.JsVariable}())");
                    b.Line("                {");
                    b.Line($"                    this.parent.loadFromDto(data.{prop.JsonName}, undefined, false);");
                    b.Line("                }");
                }
                b.Line("            }");
            }
            b.Line();
            b.Line("            // The rest of the objects are loaded now.");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => !p.HasValidValues && !p.Type.IsCollection))
            {
                if (prop.Type.IsDate)
                {   // Using valueOf/getTime here is a 20x performance increase over moment.isSame(). moment(new Date(...)) is also a 10x perf increase.
                    b.Line($"            if (data.{prop.JsonName} == null) this.{prop.JsVariable}(null);");
                    b.Line($"            else if (this.{prop.JsVariable}() == null || this.{prop.JsVariable}()!.valueOf() != new Date(data.{prop.JsonName}).getTime()){{");
                    b.Line($"                this.{prop.JsVariable}(moment(new Date(data.{prop.JsonName})));");
                    b.Line("            }");
                }
                else if (!prop.IsPOCO && !prop.IsPrimaryKey)
                {
                    b.Line($"            this.{prop.JsVariable}(data.{prop.JsonName});");
                }
            }
            b.Line("            if (this.coalesceConfig.onLoadFromDto()){");
            b.Line("                this.coalesceConfig.onLoadFromDto()(this as any);");
            b.Line("            }");
            b.Line("            this.isLoading(false);");
            b.Line("            this.isDirty(false);");
            b.Line("            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();");
            b.Line("        };");
            b.Line($"{Model.SaveToDto()}");
            b.Line("        /**");
            b.Line("            Loads any child objects that have an ID set, but not the full object.");
            b.Line("            This is useful when creating an object that has a parent object and the ID is set on the new child.");
            b.Line("        */");
            b.Line("        public loadChildren = (callback?: () => void): void => {");
            b.Line("            var loadingCount = 0;");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.IsPOCO && !f.Type.IsCollection && !f.IsReadOnly && !f.HasNotMapped && f.Object.HasDbSet))
            {
                b.Line($"            // See if this.{prop.JsVariable} needs to be loaded.");
                b.Line($"            if (this.{prop.JsVariable}() == null && this.{prop.ObjectIdProperty.JsVariable}() != null){{");
                b.Line("                loadingCount++;");
                b.Line($"                var {prop.JsVariable}Obj = new {prop.Object.ViewModelClassName}();");
                b.Line($"                {prop.JsVariable}Obj.load(this.{prop.ObjectIdProperty.JsVariable}(), () => {{");
                b.Line("                    loadingCount--;");
                b.Line($"                    this.{prop.JsVariable}({prop.JsVariable}Obj);");
                b.Line("                    if (loadingCount == 0 && typeof(callback) == \"function\"){");
                b.Line("                        callback();");
                b.Line("                    }");
                b.Line("                });");
                b.Line("            }");
            }
            b.Line("            if (loadingCount == 0 && typeof(callback) == \"function\"){");
            b.Line("                callback();");
            b.Line("            }");
            b.Line("        };");
            b.Line();
            b.Line("        public setupValidation(): void {");
            b.Line("            if (this.errors !== null) return;");
            b.Line("            this.errors = ko.validation.group([");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => !p.ClientValidationAllowSave && !string.IsNullOrWhiteSpace(p.ClientValidationKnockoutJs())))
            {
                b.Line($"                this.{prop.JsVariable}.extend({{ {prop.ClientValidationKnockoutJs()} }}),");
            }
            b.Line("            ]);");
            b.Line("            this.warnings = ko.validation.group([");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => p.ClientValidationAllowSave && !string.IsNullOrWhiteSpace(p.ClientValidationKnockoutJs())))
            {
                b.Line($"                this.{prop.JsVariable}.extend({{ {prop.ClientValidationKnockoutJs()} }}),");
            }
            b.Line("            ]);");
            b.Line("        }");
            b.Line();
            b.Line($"        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | {listModuleName}.{model.ListViewModelClassName}){{");
            b.Line("            super(parent);");
            b.Line("            this.baseInitialize();");
            b.Line("            var self = this;");
            b.Line("            self.myId;");
            b.Line();
            b.Line("            // Create computeds for display for objects");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.IsPOCO))
            {
                b.Line($"            this.{prop.JsTextPropertyName} = ko.pureComputed(function()");
                b.Line("            {   // If the object exists, use the text value. Otherwise show \'None\'");
                b.Line($"                if (self.{prop.JsVariable}() && self.{prop.JsVariable}()!.{prop.Object.ListTextProperty.JsVariable}()) {{");
                b.Line($"                    return self.{prop.JsVariable}()!.{prop.Object.ListTextProperty.JsVariable}()!.toString();");
                b.Line("                } else {");
                b.Line("                    return \"None\";");
                b.Line("                }");
                b.Line("            });");
            }
            b.Line();
            b.Line("    ");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.Type.IsCollection && !f.IsManytoManyCollection && f.PureTypeOnContext))
            {
                b.Line($"            // List Object model for {prop.Name}. Allows for loading subsets of data.");
                b.Line($"            var _{prop.JsVariable}List: {listModuleName}.{prop.Object.ListViewModelClassName};");
                b.Line($"            this.{prop.JsVariable}List = function(loadImmediate = true) {{");
                b.Line($"                if (!_{prop.JsVariable}List){{");
                b.Line($"                    _{prop.JsVariable}List = new {listModuleName}.{prop.Object.ListViewModelClassName}();");
                b.Line($"                    if (loadImmediate) load{prop.Name}List();");
                b.Line($"                    self.{prop.Parent.PrimaryKey.JsVariable}.subscribe(load{prop.Name}List)");
                b.Line("                }");
                b.Line($"                return _{prop.JsVariable}List;");
                b.Line("            }");
                b.Line($"            function load{prop.Name}List() {{");
                b.Line($"                if (self.{prop.Parent.PrimaryKey.JsVariable}()){{");
                if (prop.InverseIdProperty != null)
                {
                    b.Line($"                    _{prop.JsVariable}List.queryString = \"filter.{prop.InverseIdProperty.Name}=\" + self.{prop.Parent.PrimaryKey.JsVariable}();");
                }
                else
                {
                    b.Line($"                    _{prop.JsVariable}List.queryString = \"filter.{model.PrimaryKey.Name}=\" + self.{prop.Parent.PrimaryKey.JsVariable}();");
                }
                b.Line($"                    _{prop.JsVariable}List.load();");
                b.Line("                }");
                b.Line("            }");
            }
            b.Line();
            b.Line();
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.IsPOCO && !f.Type.IsCollection && f.PureType.ClassViewModel.HasDbSet))
            {
                b.Line($"            this.show{prop.Name}Editor = function(callback: any) {{");
                b.Line($"                if (!self.{prop.JsVariable}()) {{");
                b.Line($"                    self.{prop.JsVariable}(new {prop.Object.ViewModelClassName}());");
                b.Line("                }");
                b.Line($"                self.{prop.JsVariable}()!.showEditor(callback)");
                b.Line("            };");
            }
            b.Line();
            b.Line("            // This stuff needs to be done after everything else is set up.");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => p.IsClientWritable && !p.IsManytoManyCollection && !p.Type.IsCollection))
            {
                b.Line($"            self.{prop.JsVariable}.subscribe(self.autoSave);");
            }
            Write($"        ");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(p => p.IsManytoManyCollection))
            {
                b.Line();
                b.Line($"            self.{prop.ManyToManyCollectionName.ToCamelCase()}.subscribe<KnockoutArrayChange<{prop.ManyToManyCollectionProperty.Object.ViewModelClassName}>[]>(changes => {{");
                b.Line("                for (var i in changes){");
                b.Line("                    var change = changes[i];");
                b.Line("                    self.autoSaveCollection(");
                b.Line("                        change.status, ");
                b.Line($"                        this.{prop.JsVariable}, ");
                b.Line($"                        {prop.Object.ViewModelClassName}, ");
                b.Line($"                        \'{prop.Object.ClientProperties.First(f => f.Type.EqualsType(model.Type)).ObjectIdProperty.JsVariable}\',");
                b.Line($"                        \'{prop.ManyToManyCollectionProperty.ObjectIdProperty.JsVariable}\',");
                b.Line($"                        change.value.{prop.ManyToManyCollectionProperty.Object.PrimaryKey.JsVariable}()");
                b.Line("                    );");
                b.Line("                }");
                b.Line("            }, null, \"arrayChange\");");
                Write($"            ");
            }
            b.Line();
            b.Line("            if (newItem) {");
            b.Line("                self.loadFromDto(newItem, true);");
            b.Line("            }");
            b.Line("        }");
            b.Line("    }");
            b.Line();
            b.Line();
            b.Line();
            b.Line();
            b.Line();
            b.Line($"    export namespace {model.ViewModelGeneratedClassName} {{");
            foreach (PropertyViewModel prop in model.ClientProperties.Where(f => f.PureType.IsEnum))
            {
                b.Line($"        export enum {prop.Name}Enum {{");
                foreach (var kvp in prop.Type.EnumValues)
                {
                    b.Line($"            {kvp.Value} = {kvp.Key},");
                }
                b.Line("        };");
            }
            b.Line("    }");
            Write($"}}");
        }
#pragma warning restore 1998
    }
}