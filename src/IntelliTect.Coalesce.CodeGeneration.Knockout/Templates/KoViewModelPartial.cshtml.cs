using System;
using System.Linq;
using System.Collections.Generic;
using System.Dynamic;
using IntelliTect.Coalesce.Utilities;
// <auto-generated/>
namespace Razor
{
#line hidden
    using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
    using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
    using IntelliTect.Coalesce.TypeDefinition;
    using IntelliTect.Coalesce.Utilities;
    public class KoViewModelPartialTemplate : CoalesceTemplate<KoTsPartialStub>
    {
#pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            var b = new CodeBuilder();
            ClassViewModel model = Model.Model;
            string moduleName = "ViewModels";
            string listModuleName = "ListViewModels";
            if (!string.IsNullOrWhiteSpace(Model.AreaName))
            {
                moduleName = Model.AreaName + "." + moduleName;
                listModuleName = Model.AreaName + "." + listModuleName;
            }
            if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
            {
                moduleName = Model.ModulePrefix + "." + moduleName;
            }
            b.Line("/// <reference path=\"../viewmodels.generated.d.ts\" />");
            b.Line();
            b.Line();
            b.Line();
            b.Line($"module {moduleName} {{");
            b.Line($"    export class {model.ViewModelClassName} extends {model.ViewModelGeneratedClassName} {{");
            b.Line();
            b.Line($"        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | {listModuleName}.{model.ListViewModelClassName}) {{");
            b.Line("            super(newItem, parent);");
            b.Line();
            b.Line("        }");
            b.Line("    }");
            Write($"}}");
        }
#pragma warning restore 1998
    }
}