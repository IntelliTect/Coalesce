@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@inherits CoalesceTemplate<ServiceController>
@{
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce");
    namespaces.Add("IntelliTect.Coalesce.Api");
    namespaces.Add("IntelliTect.Coalesce.Api.Controllers");
    namespaces.Add("IntelliTect.Coalesce.Api.DataSources");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Mapping.IncludeTrees");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
    namespaces.Add("Microsoft.AspNetCore.Authorization");
    namespaces.Add("Microsoft.AspNetCore.Mvc");
    namespaces.Add("Microsoft.AspNetCore.Http");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.ComponentModel.DataAnnotations");
    namespaces.Add("System.Net");
    namespaces.Add("System.Threading.Tasks");
    namespaces.Add($"{namespaceName}.Models");
}

@foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)).OrderBy(n => n))
{
    @:using @ns;
}

namespace @(namespaceName).Api
{
@if (model.ApiRouted) {
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
    @:[Route("@Model.AreaName/api/@(model.ApiRouteControllerPart)")]
    }
    else
    {
    @:[Route("api/@(model.ApiRouteControllerPart)")]
    }
}
    @{ /** No controller-level security annotation is applied - all security for service controllers is on a per-action basis. */ } 
    [ServiceFilter(typeof(IApiActionFilter))]
    public partial class @(model.ApiControllerClassName) : Controller
    {
        protected @(model.FullyQualifiedName) Service { get; }
        public @(model.ApiControllerClassName)(@(model.FullyQualifiedName) service)
        {
            Service = service;
        }

        @foreach (var method in model.ClientMethods)
        {
            var returnType = $"ItemResult<{method.ReturnTypeNameForApi}>";
        <text>
        /// <summary>
        /// Method: @method.Name
        /// </summary>
        [@(method.ApiActionHttpMethodAnnotation)("@(method.Name)")]
        @(method.SecurityInfo.ExecuteAnnotation)
        @(model.ApiActionAccessModifier) virtual @returnType @method.Name (@method.CsParameters)
        {
            var result = new @(returnType)();

            @if (method.ReturnType.HasClassViewModel ||
                (method.ReturnType.PureType.HasClassViewModel && method.ReturnType.IsCollection))
            {
                @:IncludeTree includeTree = null;
            }
            @if(method.ReturnType.IsVoid) {
                @:object methodResult = null;
                @:Service.@(method.Name)(@(method.CsArguments));
            } else {
                @:var methodResult = Service.@(method.Name)(@(method.CsArguments));
            }

            @if (method.ReturnType.IsCollection)
            {
                if (method.ReturnType.PureType.ClassViewModel?.IsDto ?? false)
                {
                    @:result.Object = methodResult.ToList();
                }
                else if (method.ReturnType.PureType.HasClassViewModel)
                {
                    @:var mappingContext = new MappingContext(User, "");
                    @:result.Object = methodResult.ToList().Select(o => Mapper.MapToDto<@(method.ReturnType.PureType.ClassViewModel.FullyQualifiedName), @(method.ReturnType.PureType.ClassViewModel.DtoName)>(o, mappingContext, (methodResult as IQueryable)?.GetIncludeTree() ?? includeTree)).ToList();
                }
                else
                {
                    @:result.Object = methodResult;
                }
            }
            else
            {
                if (method.ReturnType.ClassViewModel?.IsDto ?? false)
                {
                    @:result.Object = methodResult;
                }
                else if (method.ReturnType.HasClassViewModel)
                {
                    @:var mappingContext = new MappingContext(User, "");
                    @:result.Object = Mapper.MapToDto<@(method.ReturnType.ClassViewModel.FullyQualifiedName), @(method.ReturnType.ClassViewModel.DtoName)>(methodResult, mappingContext, includeTree);
                }
                else
                {
                    @:result.Object = methodResult;
                }
            }

            return result;
        }
        </text>
        }
    }
}
