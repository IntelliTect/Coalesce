@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Knockout.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@inherits CoalesceTemplate<ViewController>
@{
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    string viewLocation = "~/Views";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
        viewLocation = "~/Areas/" + Model.AreaName + "/Views";
    }
}
using IntelliTect.Coalesce.Knockout.Controllers;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Hosting;

namespace @(namespaceName).Controllers
{
    @if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
    @:[Area("@Model.AreaName")]
    }
    @(model.SecurityInfo.ClassAnnotation)
    public partial class @(model.ViewControllerClassName): BaseViewController<@(model.FullyQualifiedName)>
    { 
        @(model.SecurityInfo.ReadAnnotation)
        public ActionResult Cards(){
            return IndexImplementation(false, @@"@viewLocation/Generated/@(model.Name)/Cards.cshtml");
        }

        @(model.SecurityInfo.ReadAnnotation)
        public ActionResult Table(){
            return IndexImplementation(false, @@"@viewLocation/Generated/@(model.Name)/Table.cshtml");
        }

        @if (model.SecurityInfo.IsEditAllowed()) { 
        <text>
        @(model.SecurityInfo.EditAnnotation)
        public ActionResult TableEdit(){
            return IndexImplementation(true, @@"@viewLocation/Generated/@(model.Name)/Table.cshtml");
        }

        @(model.SecurityInfo.EditAnnotation)
        public ActionResult CreateEdit(){
            return CreateEditImplementation(@@"@viewLocation/Generated/@(model.Name)/CreateEdit.cshtml");
        }
                      
        @(model.SecurityInfo.EditAnnotation)
        public ActionResult EditorHtml(bool simple = false)
        {
            return EditorHtmlImplementation(simple);
        }

        @(model.SecurityInfo.EditAnnotation)
        public ActionResult Docs([FromServices] IHostingEnvironment hostingEnvironment)
        {
            return DocsImplementation(hostingEnvironment);
        }    
        </text>
        }
    }
}