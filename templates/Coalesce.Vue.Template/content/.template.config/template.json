{
  "$schema": "http://json.schemastore.org/template",
  "author": "IntelliTect",
  "classifications": ["Web", "MVC", "Vue"],
  "identity": "IntelliTect.Coalesce.Vue.Template",
  "name": "IntelliTect Coalesce Web App Vue Template",
  "shortName": "coalescevue",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "sourceName": "Coalesce.Starter.Vue",
  "preferNameDirectory": true,
  "guids": ["a0519206-1884-46ae-9307-ec95105646e5"],
  "symbols": {
    "KestrelPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "fallback": 5001
      },
      "replaces": "5001"
    },
    "VitePortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "fallback": 5002
      },
      "replaces": "5002"
    },
    "AspirePortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "fallback": 5003
      },
      "replaces": "5003"
    },
    "AspireOtlpPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "fallback": 5004
      },
      "replaces": "5004"
    },
    "AspireServicePortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "fallback": 5005
      },
      "replaces": "5005"
    },

    "Identity": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "ASP.NET Core Identity",
      "description": "Adds ASP.NET Core Identity, providing user storage, authentication, and authorization mechanisms. Also includes a permission-based security model. If you don't include Identity, you'll have to build your auth stack from scratch.",
      "$coalesceLink": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity"
    },
    "MicrosoftAuth": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Sign-in with Microsoft",
      "description": "Adds Microsoft as an external authentication and account provider for Identity.",
      "$coalesceRequires": ["and", "Identity"],
      "$coalesceLink": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins"
    },
    "GoogleAuth": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Sign-in with Google",
      "description": "Adds Google as an external authentication and account provider for Identity.",
      "$coalesceRequires": ["and", "Identity"],
      "$coalesceLink": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins"
    },
    "OtherOAuth": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Sign-in with other OAuth/OIDC",
      "description": "Adds generic code to help you add a different OAuth/OIDC external authentication and account provider for Identity.",
      "$coalesceRequires": ["and", "Identity"],
      "$coalesceLink": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/other-logins"
    },
    "LocalAuth": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Sign-in with Username/Password",
      "description": "Adds infrastructure for supporting individual user accounts with first-party usernames and passwords.",
      "$coalesceRequires": ["and", "Identity"],
      "$coalesceLink": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/individual"
    },
    "UserPictures": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "User Profile Pictures",
      "description": "Adds infrastructure for acquiring, saving, and displaying user profile pictures.",
      "$coalesceRequires": ["and", "Identity"]
    },
    "TrackingBase": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tracking Base",
      "description": "Include a base entity class for tracking created/modified by and date stamps on each entity, and infrastructure for automatically setting those fields."
    },
    "AuditLogs": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Audit Logging",
      "description": "Adds Coalesce audit logging infrastructure, logging each change made to the database through Entity Framework.",
      "$coalesceLink": "/topics/audit-logging.html"
    },
    "DarkMode": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Dark Mode Toggle",
      "description": "Adds features for user-togglable dark mode. Don't use if you're developing a light-only or dark-only application."
    },
    "ExampleModel": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Sample Page",
      "description": "Includes a 'Widget' example model with a basic Vue page, frontend tests, and backend tests."
    },
    "OpenAPI": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "OpenAPI",
      "description": "Include configuration to expose an OpenAPI document, and interactive UI with Scalar."
    },
    "Tenancy": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tenancy: Core",
      "description": "Includes core infrastructure for supporting multiple tenants within one shared database, with shared user accounts.",
      "$coalesceLink": "/topics/template-features.html#tenancy",
      "$coalesceRequires": ["and", "Identity"]
    },
    "TenantCreateSelf": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tenancy: Creation by Self-service",
      "description": "Allows any signed in user to create additional tenants.",
      "$coalesceRequires": ["and", "Tenancy"]
    },
    "TenantCreateAdmin": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tenancy: Creation by Global Admin",
      "description": "Allows global admins to create new tenants.",
      "$coalesceRequires": ["and", "Tenancy"]
    },
    "TenantCreateExternal": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tenancy: Creation/Membership by OIDC",
      "description": "Automatically creates a new tenant for external organizations (Microsoft Entra, Google GSuite), and grants automatic tenant membership to other users within those organizations.",
      "$coalesceRequires": [
        "and",
        "Tenancy",
        ["or", "MicrosoftAuth", "GoogleAuth", "OtherOAuth"]
      ]
    },
    "TenantMemberInvites": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Tenancy: Membership by Invitation",
      "description": "Allows administrators within a tenant to create invitation links to grant membership to their tenant.",
      "$coalesceRequires": ["and", "Tenancy"]
    },
    "AppInsights": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Azure Application Insights",
      "description": "Include configuration and integrations for Application Insights, both front-end and back-end.",
      "$coalesceLink": "https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"
    },
    "EmailAzure": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Email: Azure Communication Services",
      "description": "Include basic code for sending email with Azure Communication Services. See instructions in appsettings.json - the official ACS documentation is very confusing.",
      "$coalesceLink": "https://learn.microsoft.com/en-us/azure/communication-services/concepts/email/prepare-email-communication-resource"
    },
    "EmailSendGrid": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Email: Twilio SendGrid",
      "description": "Include basic code for sending email with Twilio SendGrid.",
      "$coalesceLink": "https://www.twilio.com/docs/sendgrid/for-developers/sending-email/email-api-quickstart-for-c"
    },
    "AzurePipelines": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "CI: Azure Pipelines",
      "description": "Include an azure-pipelines.yml build template. For deployments, a release pipeline is recommended (which don't support YAML config files).",
      "$coalesceLink": "https://learn.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=net%2Cbrowser"
    },
    "GithubActions": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "CI: Github Actions",
      "description": "Include an build-test-and-deploy.yml github action file template.",
      "$coalesceLink": "https://docs.github.com/actions/use-cases-and-examples/deploying/deploying-net-to-azure-app-service"
    }
  },
  "sources": [
    {
      "modifiers": [
        {
          "exclude": [
            "**/[Bb]in/**",
            "**/[Oo]bj/**",
            "**/node_modules/**",
            ".template.config/**/*",
            "**/*.filelist",
            "**/*.user",
            "**/*.g.cs",
            "**/*.g.ts",
            "**/*.lock.json"
          ]
        },
        {
          "condition": "!Identity",
          "exclude": [
            "**/ProgramAuthConfiguration.cs",
            "**/Forbidden.vue",
            "**/UserAvatar.vue",
            "**/UserProfile.vue",
            "**/SignIn.*",
            "**/SignOut.*",
            "**/AppClaimTypes.cs",
            "**/ClaimsPrincipalFactory.cs",
            "**/Permission.cs",
            "**/User.cs",
            "**/UserRole.cs",
            "**/Role.cs"
          ]
        },
        {
          "condition": "!MicrosoftAuth && !GoogleAuth && !OtherOAuth",
          "exclude": ["**/ExternalLogin.*"]
        },
        {
          "condition": "!LocalAuth",
          "exclude": [
            "**/ResetPassword.*",
            "**/Register.*",
            "**/ForgotPassword.*",
            "**/ConfirmEmail.*",
            "**/UserManagementService.cs"
          ]
        },
        {
          "condition": "!(LocalAuth || TenantMemberInvites || TenantCreateAdmin || EmailSendGrid || EmailAzure)",
          "exclude": ["**/NoOpEmailService.*", "**/IEmailService.*"]
        },
        {
          "condition": "!Tenancy",
          "exclude": [
            "**/Tenant.cs",
            "**/DbContextFactoryExtensions.cs",
            "**/TenantMembership.cs",
            "**/ITenanted.cs",
            "**/TenantedBase.cs",
            "**/SelectTenant.*"
          ]
        },
        {
          "condition": "!TenantCreateSelf",
          "exclude": ["**/CreateTenant.*"]
        },
        {
          "condition": "!(TenantMemberInvites || TenantCreateAdmin)",
          "exclude": [
            "**/Invitation.*",
            "**/InvitationService.*",
            "**/UserInvitation.*"
          ]
        },
        {
          "condition": "!(UserPictures && Identity)",
          "exclude": ["Coalesce.Starter.Vue.Data/Models/UserPhoto.cs"]
        },
        {
          "condition": "!AuditLogs",
          "exclude": ["**/AuditOperationContext.cs", "**/AuditLog.cs"]
        },
        {
          "condition": "!TrackingBase",
          "exclude": ["**/TrackingBase.cs"]
        },
        {
          "condition": "!AppInsights",
          "exclude": ["**/AppInsightsTelemetryEnricher.cs"]
        },
        {
          "condition": "!GoogleAuth",
          "exclude": ["**/google-logo.svg"]
        },
        {
          "condition": "!MicrosoftAuth",
          "exclude": ["**/microsoft-logo.svg"]
        },
        {
          "condition": "!EmailAzure",
          "exclude": ["**/AzureEmailOptions.cs", "**/AzureEmailService.cs"]
        },
        {
          "condition": "!EmailSendGrid",
          "exclude": [
            "**/SendGridEmailOptions.cs",
            "**/SendGridEmailService.cs"
          ]
        },
        {
          "condition": "!ExampleModel",
          "exclude": [
            "**/WidgetEdit.vue",
            "**/WidgetEdit.spec.ts",
            "**/Widget.cs"
          ]
        },
        {
          "condition": "!OpenAPI",
          "exclude": ["**/OpenAPI.vue"]
        },
        {
          "condition": "!AzurePipelines",
          "exclude": ["**/azure-pipelines.yml"]
        },
        {
          "condition": "!GithubActions",
          "exclude": ["**/.github/workflows/build-test-and-deploy.yml"]
        }
      ]
    }
  ],
  "SpecialCustomOperations": {
    "**.vue": {
      "operations": [
        {
          "type": "conditional",
          "configuration": {
            "if": ["//#if"],
            "else": ["//#else"],
            "elseif": ["//#elseif"],
            "endif": ["//#endif"],
            "actionableIf": ["////#if"],
            "actionableElse": ["////#else"],
            "actionableElseif": ["////#elseif"],
            "actions": ["cStyleUncomment", "cStyleReduceComment"],
            "trim": true,
            "wholeLine": true,
            "evaluator": "C++"
          }
        },
        {
          "type": "conditional",
          "configuration": {
            "endif": ["#endif", "<!--#endif"],
            "actionableIf": ["<!--#if"],
            "actionableElse": ["#else", "<!--#else"],
            "actionableElseif": [
              "#elseif",
              "<!--#elseif",
              "#elif",
              "<!--#elif"
            ],
            "trim": true,
            "wholeLine": true,
            "evaluator": "C++"
          }
        },
        {
          "type": "replacement",
          "configuration": {
            "original": "//",
            "replacement": "",
            "id": "cStyleUncomment"
          }
        },
        {
          "type": "replacement",
          "configuration": {
            "original": "////",
            "replacement": "//",
            "id": "cStyleReduceComment"
          }
        }
      ]
    }
  }
}
